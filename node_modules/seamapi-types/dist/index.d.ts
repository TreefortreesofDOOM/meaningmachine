import { Except } from 'type-fest';

interface CommonDeviceEvent<EventType extends string, Payload extends Record<string, unknown> | {} = {}> {
    event_type: EventType;
    payload: Payload & {
        workspace_id: string;
        connected_account_id: string;
        device_id: string;
    };
    created_at: string;
    occurred_at: string;
}
declare type DeviceDisconnectEventPayload = {
    error_code: "account_disconnected" | "hub_disconnected" | "device_disconnected";
};
declare type DeviceConnectedEvent = CommonDeviceEvent<"device.connected">;
declare type DeviceConvertedToUnmanagedEvent = CommonDeviceEvent<"device.converted_to_unmanaged">;
declare type UnmanagedDeviceConvertedToManagedEvent = CommonDeviceEvent<"device.unmanaged.converted_to_managed">;
declare type UnmanagedDeviceConnectedEvent = CommonDeviceEvent<"device.unmanaged.connected">;
declare type DeviceDisconnectEvent = CommonDeviceEvent<"device.disconnected", DeviceDisconnectEventPayload>;
declare type UnmanagedDeviceDisconnectEvent = CommonDeviceEvent<"device.unmanaged.disconnected", DeviceDisconnectEventPayload>;
declare type DeviceTamperEvent = CommonDeviceEvent<"device.tampered">;
declare type DeviceLowBatteryEvent = CommonDeviceEvent<"device.low_battery", {
    battery_level: number;
}>;
declare type DeviceBatteryStatus = "critical" | "low" | "good" | "full";
declare type DeviceBatteryStatusChanged = CommonDeviceEvent<"device.battery_status_changed", {
    battery_status: DeviceBatteryStatus;
    battery_level: number;
}>;
declare type DeviceCodeLimitReachedEvent = CommonDeviceEvent<"device.code_limit_reached">;
declare type DeviceRemovedEvent = CommonDeviceEvent<"device.removed">;
declare type DeviceDeletedEvent = CommonDeviceEvent<"device.deleted">;
declare type DeviceThirdPartyIntegrationDetected = CommonDeviceEvent<"device.third_party_integration_detected">;
declare type DeviceThirdPartyIntegrationNoLongerDetected = CommonDeviceEvent<"device.third_party_integration_no_longer_detected">;
declare type DeviceSaltoPrivacyModeActivated = CommonDeviceEvent<"device.salto.privacy_mode_activated">;
declare type DeviceSaltoPrivacyModedeactivated = CommonDeviceEvent<"device.salto.privacy_mode_deactivated">;
declare type DeviceConnectionBecameFlaky = CommonDeviceEvent<"device.connection_became_flaky">;
declare type DeviceConnectionStabilized = CommonDeviceEvent<"device.connection_stabilized">;
declare type DeviceErrorSubscriptionRequired = CommonDeviceEvent<"device.error.subscription_required">;
declare type DeviceErrorSubscriptionRequiredResolved = CommonDeviceEvent<"device.error.subscription_required.resolved">;
declare type DeviceAccessoryKeypadConnected = CommonDeviceEvent<"device.accessory_keypad_connected">;
declare type DeviceAccessoryKeypadDisconnected = CommonDeviceEvent<"device.accessory_keypad_disconnected">;
interface CommonAccessCodeEvent<EventType extends string, Payload extends Record<string, unknown> | {} = {}> extends CommonDeviceEvent<EventType, Payload & {
    access_code_id: string;
}> {
}
interface DetailedAccessCodeEvent<EventType extends string> extends CommonDeviceEvent<EventType, {
    access_code_id: string;
    code: string;
}> {
}
declare type CreateAccessCodeEvent = CommonAccessCodeEvent<"access_code.created">;
declare type ChangeAccessCodeEvent = CommonAccessCodeEvent<"access_code.changed">;
declare type ScheduledOnDeviceAccessCodeEvent = DetailedAccessCodeEvent<"access_code.scheduled_on_device">;
declare type SetOnDeviceAccessCodeEvent = DetailedAccessCodeEvent<"access_code.set_on_device">;
declare type RemovedFromDeviceAccessCodeEvent = CommonAccessCodeEvent<"access_code.removed_from_device">;
declare type DelayInSettingOnDeviceAccessCodeEvent = CommonAccessCodeEvent<"access_code.delay_in_setting_on_device">;
declare type FailedToSetOnDeviceAccessCodeEvent = CommonAccessCodeEvent<"access_code.failed_to_set_on_device">;
declare type DeletedAccessCodeEvent = CommonAccessCodeEvent<"access_code.deleted", {
    code?: string;
}>;
declare type DelayInRemovingFromDeviceAccessCodeEvent = CommonAccessCodeEvent<"access_code.delay_in_removing_from_device">;
declare type FailedToRemoveFromDeviceAccessCodeEvent = CommonAccessCodeEvent<"access_code.failed_to_remove_from_device">;
declare type ExternalModificationAccessCodeEvent = CommonAccessCodeEvent<"access_code.modified_external_to_seam">;
declare type ExternalDeletionAccessCodeEvent = CommonAccessCodeEvent<"access_code.deleted_external_to_seam">;
declare type BackupAccessCodePulledEvent = CommonAccessCodeEvent<"access_code.backup_access_code_pulled", {
    backup_access_code_id: string;
}>;
declare type ConvertedToManagedAccessCodeEvent = CommonAccessCodeEvent<"access_code.unmanaged.converted_to_managed">;
declare type FailedToConvertUnmanagedAccessCodeEvent = CommonAccessCodeEvent<"access_code.unmanaged.failed_to_convert_to_managed">;
declare type UnmanagedAccessCodeCreatedEvent = CommonAccessCodeEvent<"access_code.unmanaged.created">;
declare type UnmanagedAccessCodeRemovedEvent = CommonAccessCodeEvent<"access_code.unmanaged.removed">;
declare type NoiseDetectedEvent = CommonDeviceEvent<"noise_detection.detected_noise">;
declare type NoiseThresholdTriggeredEvent = CommonDeviceEvent<"noise_sensor.noise_threshold_triggered", {
    noiseaware_metadata?: Record<string, unknown>;
    minut_metadata?: Record<string, unknown>;
}>;
declare type LockMethod = "keycode" | "manual" | "unknown" | "seamapi";
declare type LockLockedEvent = CommonDeviceEvent<"lock.locked", {
    access_code_id?: string;
    method: LockMethod;
}>;
declare type LockUnlockedEvent = CommonDeviceEvent<"lock.unlocked", {
    access_code_id?: string;
    method: LockMethod;
}>;
interface CommonAcsCredentialEvent<EventType extends string, Payload extends Record<string, unknown> | {} = {}> {
    event_type: EventType;
    payload: Payload & {
        workspace_id: string;
        connected_account_id: string;
        acs_system_id: string;
        acs_credential_id: string;
    };
    created_at: string;
    occurred_at: string;
}
declare type AcsCredentialDeleted = CommonAcsCredentialEvent<"acs_credential.deleted">;
interface CommonAcsUserEvent<EventType extends string, Payload extends Record<string, unknown> | {} = {}> {
    event_type: EventType;
    payload: Payload & {
        workspace_id: string;
        connected_account_id: string;
        acs_system_id: string;
        acs_user_id: string;
    };
    created_at: string;
    occurred_at: string;
}
declare type AcsUserDeleted = CommonAcsUserEvent<"acs_user.deleted">;
interface CommonClientSessionEvent<EventType extends string, Payload extends Record<string, unknown> | {} = {}> {
    event_type: EventType;
    payload: Payload & {
        workspace_id: string;
        client_session_id: string;
    };
    created_at: string;
    occurred_at: string;
}
declare type ClientSessionDeleted = CommonClientSessionEvent<"client_session.deleted">;
interface CommonConnectedAccountEvent<EventType extends string, Payload extends Record<string, unknown> | {} = {}> {
    event_type: EventType;
    payload: Payload & {
        workspace_id: string;
        connected_account_id: string;
    };
    created_at: string;
    occurred_at: string;
}
declare type ConnectedAccountConnected = CommonConnectedAccountEvent<"connected_account.connected", {
    connect_webview_id: string;
}>;
declare type ConnectedAccountCreated = CommonConnectedAccountEvent<"connected_account.created", {
    connect_webview_id: string;
}>;
declare type ConnectedAccountSuccessfulLogin = CommonConnectedAccountEvent<"connected_account.successful_login", {
    connect_webview_id: string;
}>;
declare type ConnectedAccountDisconnected = CommonConnectedAccountEvent<"connected_account.disconnected">;
declare type ConnectedAccountCompletedFirstSync = CommonConnectedAccountEvent<"connected_account.completed_first_sync">;
declare type ConnectedAccountDeleted = CommonConnectedAccountEvent<"connected_account.deleted">;
declare type ConnectedAccountCompletedFirstSyncAfterReconnection = CommonConnectedAccountEvent<"connected_account.completed_first_sync_after_reconnection">;
interface CommonPhoneEvent<EventType extends string, Payload extends Record<string, unknown> | {} = {}> {
    event_type: EventType;
    payload: Payload & {
        workspace_id: string;
        device_id: string;
    };
    created_at: string;
    occurred_at: string;
}
declare type PhoneDeactivatedEvent = CommonPhoneEvent<"phone.deactivated">;
interface CommonEnrollmentAutomationEvent<EventType extends string, Payload extends Record<string, unknown> | {} = {}> {
    event_type: EventType;
    payload: Payload & {
        workspace_id: string;
        enrollment_automation_id: string;
    };
    created_at: string;
    occurred_at: string;
}
declare type EnrollmentAutomationDeletedEvent = CommonEnrollmentAutomationEvent<"enrollment_automation.deleted">;
declare type SeamEvent = DeviceConnectedEvent | UnmanagedDeviceConnectedEvent | DeviceDisconnectEvent | UnmanagedDeviceDisconnectEvent | DeviceConvertedToUnmanagedEvent | UnmanagedDeviceConvertedToManagedEvent | DeviceTamperEvent | DeviceLowBatteryEvent | DeviceBatteryStatusChanged | DeviceRemovedEvent | DeviceDeletedEvent | CreateAccessCodeEvent | ChangeAccessCodeEvent | ScheduledOnDeviceAccessCodeEvent | SetOnDeviceAccessCodeEvent | RemovedFromDeviceAccessCodeEvent | DeletedAccessCodeEvent | FailedToRemoveFromDeviceAccessCodeEvent | DelayInRemovingFromDeviceAccessCodeEvent | FailedToSetOnDeviceAccessCodeEvent | DelayInSettingOnDeviceAccessCodeEvent | BackupAccessCodePulledEvent | ConvertedToManagedAccessCodeEvent | FailedToConvertUnmanagedAccessCodeEvent | UnmanagedAccessCodeCreatedEvent | UnmanagedAccessCodeRemovedEvent | ExternalModificationAccessCodeEvent | ExternalDeletionAccessCodeEvent | NoiseDetectedEvent | NoiseThresholdTriggeredEvent | ConnectedAccountConnected | ConnectedAccountSuccessfulLogin | ConnectedAccountCreated | ConnectedAccountDisconnected | ConnectedAccountCompletedFirstSync | ConnectedAccountDeleted | ConnectedAccountCompletedFirstSyncAfterReconnection | LockLockedEvent | LockUnlockedEvent | DeviceThirdPartyIntegrationDetected | DeviceThirdPartyIntegrationNoLongerDetected | DeviceSaltoPrivacyModeActivated | DeviceSaltoPrivacyModedeactivated | DeviceConnectionBecameFlaky | DeviceConnectionStabilized | DeviceErrorSubscriptionRequired | DeviceErrorSubscriptionRequiredResolved | PhoneDeactivatedEvent | AcsCredentialDeleted | AcsUserDeleted | EnrollmentAutomationDeletedEvent | ClientSessionDeleted | DeviceAccessoryKeypadConnected | DeviceAccessoryKeypadDisconnected;

declare type Field<Type extends string, Props, Input> = {
    props: {
        label: string;
        is_required: boolean;
        name: string;
        type: Type;
        is_disabled?: boolean;
        is_read_only?: boolean;
        help_link?: string;
        help_text?: string;
    } & Props;
    input: Input;
};
declare type TextField = Field<"text", {
    placeholder: string;
    regex?: string;
    default_value?: string;
    text_type?: "text" | "password" | "email" | "number" | "tel" | "url";
}, string>;
declare type TextAreaField = Field<"textarea", {
    placeholder: string;
    regex?: string;
    default_value?: string;
}, string>;
declare type RadioControlTextField = Field<"radio-control-text", {
    options: [TextField["props"], TextField["props"]];
}, string>;
declare type SelectionField = Field<"selection", {
    options: Array<{
        label: string;
        value: string;
    }>;
}, string>;
declare type AnyField = TextField | SelectionField | TextAreaField | RadioControlTextField;

interface BaseTwoFactorOption<Method extends string> {
    method: Method;
    code_length: number;
}
declare type TwoFactorSMSOption = BaseTwoFactorOption<"sms"> & {
    phone_number: string;
};
declare type TwoFactorOTPOption = BaseTwoFactorOption<"otp">;
declare type TwoFactorEmailOption = BaseTwoFactorOption<"email"> & {
    email_address: string;
};
declare type TwoFactorOption = TwoFactorSMSOption | TwoFactorOTPOption | TwoFactorEmailOption;
declare type TwoFactorOptionWithId = TwoFactorOption & {
    id: string;
};

declare type WebviewFlowErrorCode = UnexpectedWebviewFlowErrorCode | UserInputWebviewFlowErrorCode | LoginWebviewFlowErrorCode;
declare type UnexpectedWebviewFlowErrorCode = "ERROR";
declare type UserInputWebviewFlowErrorCode = "INVALID_MASTER_CODE" | "INVALID_PHONE_NUMBER";
declare type LoginWebviewFlowErrorCode = "BAD_CREDENTIALS" | "TWO_FACTOR_REQUIRED" | "TWO_FACTOR_BAD_CODE";
declare type ProviderMetadata = {
    display_name: string;
    image_url: string;
    primary_color?: string;
    secondary_color?: string;
};
declare type Pane<Name extends string, PaneRenderProps extends Record<string, unknown>, PaneSubmitProps extends Record<string, unknown>> = {
    name: Name;
    render_props: PaneRenderProps & {
        error_msg?: string;
        notice_msg?: string;
        error_code?: WebviewFlowErrorCode;
        scheduling_link?: string;
    };
    submit_props: PaneSubmitProps;
    last_updated_at: string;
};
declare type LoadingPane = Pane<"loading", {
    message: string;
}, {}>;
declare type RedirectPane = Pane<"redirect_pane", {
    redirect_url: string;
    pre_redirect_acknowledgement?: boolean;
    context?: "smartthings_auth";
    redirect_target_disallows_embedding?: boolean;
    provider?: ProviderMetadata;
}, {
    callback_args?: Record<string, string>;
    alternative_action?: string;
}>;
declare type SearchAndSelectPane = Pane<"search_and_select_pane", {
    title: string;
    description?: string;
    options: Array<{
        label: string;
        sublabel?: string;
        value: string;
        image_url?: string;
    }>;
    selection_mode?: "none" | "single" | "multiple";
    context?: "device" | "smartthings_auth";
    manufacturer_name?: string;
    provider?: ProviderMetadata;
}, {
    value: string | string[];
}>;
declare type BrandSelectPane = Pane<"brand_select_pane", {
    options: Array<{
        label: string;
        sublabel?: string;
        value: string;
        image_url: string;
    }>;
}, {
    brand: string;
}>;
declare type LoginPane = Pane<"login_pane", {
    accepted_user_identifiers: Array<"email" | "phone" | "username">;
    /** @deprecated - use a more specific property than context for dynamic rendering logic */
    context?: "smartthings_pre_auth";
    credential?: "password" | "api_key";
    default_user_identifier?: string;
    provider: ProviderMetadata;
}, {
    user_identifier: string;
    password?: string;
    api_key?: string;
}>;
declare type InitiateTwoFactorPane = Pane<"initiate_two_factor_pane", {
    options: TwoFactorOptionWithId[];
    provider: ProviderMetadata;
}, {
    id: TwoFactorOptionWithId["id"];
}>;
declare type TwoFactorPane = Pane<"two_factor_pane", {
    code_length: number;
    provider: ProviderMetadata;
}, {
    code: string;
}>;
declare type FieldsPane = Pane<"fields_pane", {
    fields: AnyField["props"][];
    context?: "brivo_auth";
    submit_label?: string;
    header: {
        title: string;
        provider?: ProviderMetadata;
        description?: string;
    };
}, Record<string, AnyField["input"]>>;
interface SmartThingsLocation {
    id: string;
    name: string;
}
declare type FinishedPane = Pane<"finished_pane", {
    custom_redirect_url?: string;
    is_final?: boolean;
    context?: {
        nuki_smart_hosting?: {
            connected_devices_count: number;
            not_connected_devices_count: number;
            nuki_smart_hosting_url: string;
        };
        smartthings_auth?: {
            locations: SmartThingsLocation[];
            oauth_redirect?: string;
        };
        igloodeveloper_auth?: {
            igloo_webhook_url: string;
        };
    };
    shared_devices_from_other_accounts?: {
        name: string;
        image_url: string;
        display_name: string;
    }[];
    total_device_count?: number;
    was_account_reconnected?: boolean;
}, {
    finalize?: boolean;
}>;
declare type AnyPane = LoadingPane | RedirectPane | SearchAndSelectPane | BrandSelectPane | LoginPane | InitiateTwoFactorPane | TwoFactorPane | FieldsPane | FinishedPane;
declare type AnyPaneWithoutSubmitProps = Except<AnyPane, "submit_props">;

interface Workspace {
    workspace_id: string;
    connect_partner_name?: string;
    name: string;
    is_sandbox: boolean;
    webview_inviter_logo_url?: string;
}

export { AcsCredentialDeleted, AcsUserDeleted, AnyField, AnyPane, AnyPaneWithoutSubmitProps, BackupAccessCodePulledEvent, BrandSelectPane, ChangeAccessCodeEvent, ClientSessionDeleted, CommonAccessCodeEvent, CommonAcsCredentialEvent, CommonAcsUserEvent, CommonClientSessionEvent, CommonConnectedAccountEvent, CommonDeviceEvent, CommonEnrollmentAutomationEvent, CommonPhoneEvent, ConnectedAccountCompletedFirstSync, ConnectedAccountCompletedFirstSyncAfterReconnection, ConnectedAccountConnected, ConnectedAccountCreated, ConnectedAccountDeleted, ConnectedAccountDisconnected, ConnectedAccountSuccessfulLogin, ConvertedToManagedAccessCodeEvent, CreateAccessCodeEvent, DelayInRemovingFromDeviceAccessCodeEvent, DelayInSettingOnDeviceAccessCodeEvent, DeletedAccessCodeEvent, DeviceAccessoryKeypadConnected, DeviceAccessoryKeypadDisconnected, DeviceBatteryStatus, DeviceBatteryStatusChanged, DeviceCodeLimitReachedEvent, DeviceConnectedEvent, DeviceConnectionBecameFlaky, DeviceConnectionStabilized, DeviceConvertedToUnmanagedEvent, DeviceDeletedEvent, DeviceDisconnectEvent, DeviceErrorSubscriptionRequired, DeviceErrorSubscriptionRequiredResolved, DeviceLowBatteryEvent, DeviceRemovedEvent, DeviceSaltoPrivacyModeActivated, DeviceSaltoPrivacyModedeactivated, DeviceTamperEvent, DeviceThirdPartyIntegrationDetected, DeviceThirdPartyIntegrationNoLongerDetected, EnrollmentAutomationDeletedEvent, ExternalDeletionAccessCodeEvent, ExternalModificationAccessCodeEvent, FailedToConvertUnmanagedAccessCodeEvent, FailedToRemoveFromDeviceAccessCodeEvent, FailedToSetOnDeviceAccessCodeEvent, Field, FieldsPane, FinishedPane, InitiateTwoFactorPane, LoadingPane, LockLockedEvent, LockMethod, LockUnlockedEvent, LoginPane, LoginWebviewFlowErrorCode, NoiseDetectedEvent, NoiseThresholdTriggeredEvent, PhoneDeactivatedEvent, ProviderMetadata, RedirectPane, RemovedFromDeviceAccessCodeEvent, ScheduledOnDeviceAccessCodeEvent, SeamEvent, SearchAndSelectPane, SelectionField, SetOnDeviceAccessCodeEvent, SmartThingsLocation, TextAreaField, TextField, TwoFactorOption, TwoFactorOptionWithId, TwoFactorPane, UnexpectedWebviewFlowErrorCode, UnmanagedAccessCodeCreatedEvent, UnmanagedAccessCodeRemovedEvent, UnmanagedDeviceConnectedEvent, UnmanagedDeviceConvertedToManagedEvent, UnmanagedDeviceDisconnectEvent, UserInputWebviewFlowErrorCode, WebviewFlowErrorCode, Workspace };
