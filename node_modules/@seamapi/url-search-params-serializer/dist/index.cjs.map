{"version":3,"sources":["../src/lib/serialize.ts"],"names":[],"mappings":";AAEO,IAAM,2BAA2B,CAAC,WAA2B;AAClE,QAAM,eAAe,IAAI,gBAAgB;AACzC,wBAAsB,cAAc,MAAM;AAC1C,SAAO,aAAa,SAAS;AAC/B;AAEO,IAAM,wBAAwB,CACnC,cACA,WACS;AACT,aAAW,CAAC,MAAM,KAAK,KAAK,OAAO,QAAQ,MAAM,GAAG;AAClD,QAAI,SAAS;AAAM;AAEnB,QAAI,MAAM,QAAQ,KAAK,GAAG;AACxB,UAAI,MAAM,WAAW;AAAG,qBAAa,IAAI,MAAM,EAAE;AACjD,UAAI,MAAM,WAAW,KAAK,MAAM,CAAC,MAAM,IAAI;AACzC,cAAM,IAAI;AAAA,UACR;AAAA,UACA;AAAA,QACF;AAAA,MACF;AACA,iBAAW,KAAK,OAAO;AACrB,qBAAa,OAAO,MAAM,UAAU,MAAM,CAAC,CAAC;AAAA,MAC9C;AACA;AAAA,IACF;AAEA,iBAAa,IAAI,MAAM,UAAU,MAAM,KAAK,CAAC;AAAA,EAC/C;AAEA,eAAa,KAAK;AACpB;AAEA,IAAM,YAAY,CAAC,GAAW,MAAuB;AACnD,MAAI,OAAO,MAAM;AAAU,WAAO,EAAE,SAAS;AAC7C,MAAI,OAAO,MAAM;AAAU,WAAO,EAAE,SAAS;AAC7C,MAAI,OAAO,MAAM;AAAU,WAAO,EAAE,SAAS;AAC7C,MAAI,OAAO,MAAM;AAAW,WAAO,EAAE,SAAS;AAC9C,QAAM,IAAI,yBAAyB,GAAG,QAAQ,OAAO,CAAC,EAAE;AAC1D;AAEO,IAAM,2BAAN,cAAuC,MAAM;AAAA,EAClD,YAAY,MAAc,SAAiB;AACzC,UAAM,mCAAmC,IAAI,KAAK,OAAO,EAAE;AAC3D,SAAK,OAAO,KAAK,YAAY;AAAA,EAC/B;AACF","sourcesContent":["type Params = Record<string, unknown>\n\nexport const serializeUrlSearchParams = (params: Params): string => {\n  const searchParams = new URLSearchParams()\n  updateUrlSearchParams(searchParams, params)\n  return searchParams.toString()\n}\n\nexport const updateUrlSearchParams = (\n  searchParams: URLSearchParams,\n  params: Record<string, unknown>,\n): void => {\n  for (const [name, value] of Object.entries(params)) {\n    if (value == null) continue\n\n    if (Array.isArray(value)) {\n      if (value.length === 0) searchParams.set(name, '')\n      if (value.length === 1 && value[0] === '') {\n        throw new UnserializableParamError(\n          name,\n          `is a single element array containing the empty string which is unsupported because it serializes to the empty array`,\n        )\n      }\n      for (const v of value) {\n        searchParams.append(name, serialize(name, v))\n      }\n      continue\n    }\n\n    searchParams.set(name, serialize(name, value))\n  }\n\n  searchParams.sort()\n}\n\nconst serialize = (k: string, v: unknown): string => {\n  if (typeof v === 'string') return v.toString()\n  if (typeof v === 'number') return v.toString()\n  if (typeof v === 'bigint') return v.toString()\n  if (typeof v === 'boolean') return v.toString()\n  throw new UnserializableParamError(k, `is a ${typeof v}`)\n}\n\nexport class UnserializableParamError extends Error {\n  constructor(name: string, message: string) {\n    super(`Could not serialize parameter: '${name}' ${message}`)\n    this.name = this.constructor.name\n  }\n}\n"]}