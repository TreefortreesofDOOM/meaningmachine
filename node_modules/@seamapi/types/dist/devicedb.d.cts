import { z } from 'zod';

declare const device_capability_flags: z.ZodObject<{
    can_remotely_unlock: z.ZodOptional<z.ZodBoolean>;
    can_remotely_lock: z.ZodOptional<z.ZodBoolean>;
    can_program_offline_access_codes: z.ZodOptional<z.ZodBoolean>;
    can_program_online_access_codes: z.ZodOptional<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    can_remotely_unlock?: boolean | undefined;
    can_remotely_lock?: boolean | undefined;
    can_program_offline_access_codes?: boolean | undefined;
    can_program_online_access_codes?: boolean | undefined;
}, {
    can_remotely_unlock?: boolean | undefined;
    can_remotely_lock?: boolean | undefined;
    can_program_offline_access_codes?: boolean | undefined;
    can_program_online_access_codes?: boolean | undefined;
}>;

declare const device_category: z.ZodEnum<["smartlock", "sensor", "thermostat", "relay", "intercom", "accessory"]>;
type DeviceCategory = z.infer<typeof device_category>;
declare const device_connection_type: z.ZodEnum<["wifi", "zwave", "zigbee", "unknown"]>;
type DeviceConnectionType = z.infer<typeof device_connection_type>;
declare const thermostat: z.ZodObject<{
    main_category: z.ZodLiteral<"thermostat">;
    physical_properties: z.ZodObject<{
        available_modes: z.ZodArray<z.ZodEnum<["heat", "cool", "fan", "eco"]>, "many">;
        is_heat_pump_compatible: z.ZodBoolean;
        has_occupancy_detection: z.ZodBoolean;
        supports_demand_response: z.ZodBoolean;
        has_humidity_sensor: z.ZodBoolean;
        has_temperature_sensor: z.ZodBoolean;
        supports_emergency_heating_mode: z.ZodBoolean;
    }, "strip", z.ZodTypeAny, {
        has_humidity_sensor: boolean;
        has_temperature_sensor: boolean;
        has_occupancy_detection: boolean;
        available_modes: ("heat" | "cool" | "fan" | "eco")[];
        is_heat_pump_compatible: boolean;
        supports_demand_response: boolean;
        supports_emergency_heating_mode: boolean;
    }, {
        has_humidity_sensor: boolean;
        has_temperature_sensor: boolean;
        has_occupancy_detection: boolean;
        available_modes: ("heat" | "cool" | "fan" | "eco")[];
        is_heat_pump_compatible: boolean;
        supports_demand_response: boolean;
        supports_emergency_heating_mode: boolean;
    }>;
    software_features: z.ZodObject<{
        can_program_climate_schedules: z.ZodBoolean;
    }, "strip", z.ZodTypeAny, {
        can_program_climate_schedules: boolean;
    }, {
        can_program_climate_schedules: boolean;
    }>;
}, "strip", z.ZodTypeAny, {
    main_category: "thermostat";
    physical_properties: {
        has_humidity_sensor: boolean;
        has_temperature_sensor: boolean;
        has_occupancy_detection: boolean;
        available_modes: ("heat" | "cool" | "fan" | "eco")[];
        is_heat_pump_compatible: boolean;
        supports_demand_response: boolean;
        supports_emergency_heating_mode: boolean;
    };
    software_features: {
        can_program_climate_schedules: boolean;
    };
}, {
    main_category: "thermostat";
    physical_properties: {
        has_humidity_sensor: boolean;
        has_temperature_sensor: boolean;
        has_occupancy_detection: boolean;
        available_modes: ("heat" | "cool" | "fan" | "eco")[];
        is_heat_pump_compatible: boolean;
        supports_demand_response: boolean;
        supports_emergency_heating_mode: boolean;
    };
    software_features: {
        can_program_climate_schedules: boolean;
    };
}>;
type ThermostatProperties = z.infer<typeof thermostat>;
declare const device_model_category_specific_properties: z.ZodDiscriminatedUnion<"main_category", [z.ZodObject<{
    main_category: z.ZodLiteral<"smartlock">;
    physical_properties: z.ZodObject<{
        lock_type: z.ZodEnum<["deadbolt", "lever", "mortise", "lockbox", "cylinder", "padlock", "locker", "unknown"]>;
        has_physical_key: z.ZodBoolean;
        has_camera: z.ZodBoolean;
    }, "strip", z.ZodTypeAny, {
        lock_type: "unknown" | "deadbolt" | "lever" | "mortise" | "lockbox" | "cylinder" | "padlock" | "locker";
        has_physical_key: boolean;
        has_camera: boolean;
    }, {
        lock_type: "unknown" | "deadbolt" | "lever" | "mortise" | "lockbox" | "cylinder" | "padlock" | "locker";
        has_physical_key: boolean;
        has_camera: boolean;
    }>;
    software_features: z.ZodObject<{
        can_remotely_unlock: z.ZodBoolean;
        can_program_access_codes: z.ZodBoolean;
        can_program_access_schedules: z.ZodBoolean;
        can_program_access_codes_offline: z.ZodBoolean;
    }, "strip", z.ZodTypeAny, {
        can_remotely_unlock: boolean;
        can_program_access_codes: boolean;
        can_program_access_schedules: boolean;
        can_program_access_codes_offline: boolean;
    }, {
        can_remotely_unlock: boolean;
        can_program_access_codes: boolean;
        can_program_access_schedules: boolean;
        can_program_access_codes_offline: boolean;
    }>;
    can_remotely_unlock: z.ZodOptional<z.ZodLiteral<true>>;
    can_remotely_lock: z.ZodOptional<z.ZodLiteral<true>>;
    can_program_offline_access_codes: z.ZodOptional<z.ZodLiteral<true>>;
    can_program_online_access_codes: z.ZodOptional<z.ZodLiteral<true>>;
}, "strip", z.ZodTypeAny, {
    main_category: "smartlock";
    physical_properties: {
        lock_type: "unknown" | "deadbolt" | "lever" | "mortise" | "lockbox" | "cylinder" | "padlock" | "locker";
        has_physical_key: boolean;
        has_camera: boolean;
    };
    software_features: {
        can_remotely_unlock: boolean;
        can_program_access_codes: boolean;
        can_program_access_schedules: boolean;
        can_program_access_codes_offline: boolean;
    };
    can_remotely_unlock?: true | undefined;
    can_remotely_lock?: true | undefined;
    can_program_offline_access_codes?: true | undefined;
    can_program_online_access_codes?: true | undefined;
}, {
    main_category: "smartlock";
    physical_properties: {
        lock_type: "unknown" | "deadbolt" | "lever" | "mortise" | "lockbox" | "cylinder" | "padlock" | "locker";
        has_physical_key: boolean;
        has_camera: boolean;
    };
    software_features: {
        can_remotely_unlock: boolean;
        can_program_access_codes: boolean;
        can_program_access_schedules: boolean;
        can_program_access_codes_offline: boolean;
    };
    can_remotely_unlock?: true | undefined;
    can_remotely_lock?: true | undefined;
    can_program_offline_access_codes?: true | undefined;
    can_program_online_access_codes?: true | undefined;
}>, z.ZodObject<{
    main_category: z.ZodLiteral<"sensor">;
    physical_properties: z.ZodObject<{
        has_noise_sensor: z.ZodBoolean;
        has_humidity_sensor: z.ZodBoolean;
        has_temperature_sensor: z.ZodBoolean;
        has_occupancy_detection: z.ZodBoolean;
    }, "strip", z.ZodTypeAny, {
        has_noise_sensor: boolean;
        has_humidity_sensor: boolean;
        has_temperature_sensor: boolean;
        has_occupancy_detection: boolean;
    }, {
        has_noise_sensor: boolean;
        has_humidity_sensor: boolean;
        has_temperature_sensor: boolean;
        has_occupancy_detection: boolean;
    }>;
}, "strip", z.ZodTypeAny, {
    main_category: "sensor";
    physical_properties: {
        has_noise_sensor: boolean;
        has_humidity_sensor: boolean;
        has_temperature_sensor: boolean;
        has_occupancy_detection: boolean;
    };
}, {
    main_category: "sensor";
    physical_properties: {
        has_noise_sensor: boolean;
        has_humidity_sensor: boolean;
        has_temperature_sensor: boolean;
        has_occupancy_detection: boolean;
    };
}>, z.ZodObject<{
    main_category: z.ZodLiteral<"thermostat">;
    physical_properties: z.ZodObject<{
        available_modes: z.ZodArray<z.ZodEnum<["heat", "cool", "fan", "eco"]>, "many">;
        is_heat_pump_compatible: z.ZodBoolean;
        has_occupancy_detection: z.ZodBoolean;
        supports_demand_response: z.ZodBoolean;
        has_humidity_sensor: z.ZodBoolean;
        has_temperature_sensor: z.ZodBoolean;
        supports_emergency_heating_mode: z.ZodBoolean;
    }, "strip", z.ZodTypeAny, {
        has_humidity_sensor: boolean;
        has_temperature_sensor: boolean;
        has_occupancy_detection: boolean;
        available_modes: ("heat" | "cool" | "fan" | "eco")[];
        is_heat_pump_compatible: boolean;
        supports_demand_response: boolean;
        supports_emergency_heating_mode: boolean;
    }, {
        has_humidity_sensor: boolean;
        has_temperature_sensor: boolean;
        has_occupancy_detection: boolean;
        available_modes: ("heat" | "cool" | "fan" | "eco")[];
        is_heat_pump_compatible: boolean;
        supports_demand_response: boolean;
        supports_emergency_heating_mode: boolean;
    }>;
    software_features: z.ZodObject<{
        can_program_climate_schedules: z.ZodBoolean;
    }, "strip", z.ZodTypeAny, {
        can_program_climate_schedules: boolean;
    }, {
        can_program_climate_schedules: boolean;
    }>;
}, "strip", z.ZodTypeAny, {
    main_category: "thermostat";
    physical_properties: {
        has_humidity_sensor: boolean;
        has_temperature_sensor: boolean;
        has_occupancy_detection: boolean;
        available_modes: ("heat" | "cool" | "fan" | "eco")[];
        is_heat_pump_compatible: boolean;
        supports_demand_response: boolean;
        supports_emergency_heating_mode: boolean;
    };
    software_features: {
        can_program_climate_schedules: boolean;
    };
}, {
    main_category: "thermostat";
    physical_properties: {
        has_humidity_sensor: boolean;
        has_temperature_sensor: boolean;
        has_occupancy_detection: boolean;
        available_modes: ("heat" | "cool" | "fan" | "eco")[];
        is_heat_pump_compatible: boolean;
        supports_demand_response: boolean;
        supports_emergency_heating_mode: boolean;
    };
    software_features: {
        can_program_climate_schedules: boolean;
    };
}>, z.ZodObject<{
    main_category: z.ZodLiteral<"relay">;
}, "strip", z.ZodTypeAny, {
    main_category: "relay";
}, {
    main_category: "relay";
}>, z.ZodObject<{
    main_category: z.ZodLiteral<"intercom">;
    physical_properties: z.ZodObject<{
        has_camera: z.ZodBoolean;
        has_rfid_reader: z.ZodDefault<z.ZodBoolean>;
        has_nfc_reader: z.ZodDefault<z.ZodBoolean>;
        has_wiegand_interface: z.ZodDefault<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        has_camera: boolean;
        has_rfid_reader: boolean;
        has_nfc_reader: boolean;
        has_wiegand_interface: boolean;
    }, {
        has_camera: boolean;
        has_rfid_reader?: boolean | undefined;
        has_nfc_reader?: boolean | undefined;
        has_wiegand_interface?: boolean | undefined;
    }>;
    software_features: z.ZodObject<{
        can_remotely_unlock: z.ZodBoolean;
        can_program_access_codes: z.ZodBoolean;
        can_unlock_with_face_recognition: z.ZodDefault<z.ZodBoolean>;
        supports_onvif: z.ZodDefault<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        can_remotely_unlock: boolean;
        can_program_access_codes: boolean;
        can_unlock_with_face_recognition: boolean;
        supports_onvif: boolean;
    }, {
        can_remotely_unlock: boolean;
        can_program_access_codes: boolean;
        can_unlock_with_face_recognition?: boolean | undefined;
        supports_onvif?: boolean | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    main_category: "intercom";
    physical_properties: {
        has_camera: boolean;
        has_rfid_reader: boolean;
        has_nfc_reader: boolean;
        has_wiegand_interface: boolean;
    };
    software_features: {
        can_remotely_unlock: boolean;
        can_program_access_codes: boolean;
        can_unlock_with_face_recognition: boolean;
        supports_onvif: boolean;
    };
}, {
    main_category: "intercom";
    physical_properties: {
        has_camera: boolean;
        has_rfid_reader?: boolean | undefined;
        has_nfc_reader?: boolean | undefined;
        has_wiegand_interface?: boolean | undefined;
    };
    software_features: {
        can_remotely_unlock: boolean;
        can_program_access_codes: boolean;
        can_unlock_with_face_recognition?: boolean | undefined;
        supports_onvif?: boolean | undefined;
    };
}>, z.ZodObject<{
    main_category: z.ZodLiteral<"accessory">;
}, "strip", z.ZodTypeAny, {
    main_category: "accessory";
}, {
    main_category: "accessory";
}>]>;
declare const base_device_model_v1: z.ZodObject<{
    device_model_id: z.ZodString;
    manufacturer: z.ZodObject<Omit<{
        manufacturer_id: z.ZodString;
        display_name: z.ZodString;
        logo: z.ZodOptional<z.ZodObject<{
            url: z.ZodString;
            width: z.ZodNumber;
            height: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            url: string;
            width: number;
            height: number;
        }, {
            url: string;
            width: number;
            height: number;
        }>>;
        integration: z.ZodEnum<["stable", "beta", "planned", "unsupported", "inquire"]>;
        integration_support_level: z.ZodEnum<["stable", "beta", "planned", "unsupported", "inquire"]>;
        is_connect_webview_supported: z.ZodBoolean;
        requires_seam_support_to_add_account: z.ZodBoolean;
        device_model_count: z.ZodNumber;
        annotations: z.ZodArray<z.ZodObject<{
            annotation_code: z.ZodEnum<["subscription_required"]>;
            message: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            message: string;
            annotation_code: "subscription_required";
        }, {
            message: string;
            annotation_code: "subscription_required";
        }>, "many">;
    }, "device_model_count">, "strip", z.ZodTypeAny, {
        display_name: string;
        manufacturer_id: string;
        integration: "stable" | "beta" | "planned" | "unsupported" | "inquire";
        integration_support_level: "stable" | "beta" | "planned" | "unsupported" | "inquire";
        is_connect_webview_supported: boolean;
        requires_seam_support_to_add_account: boolean;
        annotations: {
            message: string;
            annotation_code: "subscription_required";
        }[];
        logo?: {
            url: string;
            width: number;
            height: number;
        } | undefined;
    }, {
        display_name: string;
        manufacturer_id: string;
        integration: "stable" | "beta" | "planned" | "unsupported" | "inquire";
        integration_support_level: "stable" | "beta" | "planned" | "unsupported" | "inquire";
        is_connect_webview_supported: boolean;
        requires_seam_support_to_add_account: boolean;
        annotations: {
            message: string;
            annotation_code: "subscription_required";
        }[];
        logo?: {
            url: string;
            width: number;
            height: number;
        } | undefined;
    }>;
    is_device_supported: z.ZodBoolean;
    display_name: z.ZodString;
    description: z.ZodString;
    product_url: z.ZodOptional<z.ZodString>;
    main_connection_type: z.ZodEnum<["wifi", "zwave", "zigbee", "unknown"]>;
    hardware: z.ZodObject<{
        has_physical_key: z.ZodOptional<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        has_physical_key?: boolean | undefined;
    }, {
        has_physical_key?: boolean | undefined;
    }>;
    aesthetic_variants: z.ZodArray<z.ZodObject<{
        slug: z.ZodString;
        display_name: z.ZodString;
        primary_color_hex: z.ZodOptional<z.ZodString>;
        manufacturer_sku: z.ZodOptional<z.ZodString>;
        front_image: z.ZodOptional<z.ZodObject<{
            url: z.ZodString;
            width: z.ZodNumber;
            height: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            url: string;
            width: number;
            height: number;
        }, {
            url: string;
            width: number;
            height: number;
        }>>;
        back_image: z.ZodOptional<z.ZodObject<{
            url: z.ZodString;
            width: z.ZodNumber;
            height: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            url: string;
            width: number;
            height: number;
        }, {
            url: string;
            width: number;
            height: number;
        }>>;
        images: z.ZodArray<z.ZodObject<{
            url: z.ZodString;
            width: z.ZodNumber;
            height: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            url: string;
            width: number;
            height: number;
        }, {
            url: string;
            width: number;
            height: number;
        }>, "many">;
    }, "strip", z.ZodTypeAny, {
        display_name: string;
        slug: string;
        images: {
            url: string;
            width: number;
            height: number;
        }[];
        primary_color_hex?: string | undefined;
        manufacturer_sku?: string | undefined;
        front_image?: {
            url: string;
            width: number;
            height: number;
        } | undefined;
        back_image?: {
            url: string;
            width: number;
            height: number;
        } | undefined;
    }, {
        display_name: string;
        slug: string;
        images: {
            url: string;
            width: number;
            height: number;
        }[];
        primary_color_hex?: string | undefined;
        manufacturer_sku?: string | undefined;
        front_image?: {
            url: string;
            width: number;
            height: number;
        } | undefined;
        back_image?: {
            url: string;
            width: number;
            height: number;
        } | undefined;
    }>, "many">;
    power_sources: z.ZodArray<z.ZodEnum<["battery", "hardwired", "mechanical_harvesting", "wireless", "ethernet"]>, "many">;
}, "strip", z.ZodTypeAny, {
    display_name: string;
    device_model_id: string;
    manufacturer: {
        display_name: string;
        manufacturer_id: string;
        integration: "stable" | "beta" | "planned" | "unsupported" | "inquire";
        integration_support_level: "stable" | "beta" | "planned" | "unsupported" | "inquire";
        is_connect_webview_supported: boolean;
        requires_seam_support_to_add_account: boolean;
        annotations: {
            message: string;
            annotation_code: "subscription_required";
        }[];
        logo?: {
            url: string;
            width: number;
            height: number;
        } | undefined;
    };
    is_device_supported: boolean;
    description: string;
    main_connection_type: "unknown" | "wifi" | "zwave" | "zigbee";
    hardware: {
        has_physical_key?: boolean | undefined;
    };
    aesthetic_variants: {
        display_name: string;
        slug: string;
        images: {
            url: string;
            width: number;
            height: number;
        }[];
        primary_color_hex?: string | undefined;
        manufacturer_sku?: string | undefined;
        front_image?: {
            url: string;
            width: number;
            height: number;
        } | undefined;
        back_image?: {
            url: string;
            width: number;
            height: number;
        } | undefined;
    }[];
    power_sources: ("battery" | "hardwired" | "mechanical_harvesting" | "wireless" | "ethernet")[];
    product_url?: string | undefined;
}, {
    display_name: string;
    device_model_id: string;
    manufacturer: {
        display_name: string;
        manufacturer_id: string;
        integration: "stable" | "beta" | "planned" | "unsupported" | "inquire";
        integration_support_level: "stable" | "beta" | "planned" | "unsupported" | "inquire";
        is_connect_webview_supported: boolean;
        requires_seam_support_to_add_account: boolean;
        annotations: {
            message: string;
            annotation_code: "subscription_required";
        }[];
        logo?: {
            url: string;
            width: number;
            height: number;
        } | undefined;
    };
    is_device_supported: boolean;
    description: string;
    main_connection_type: "unknown" | "wifi" | "zwave" | "zigbee";
    hardware: {
        has_physical_key?: boolean | undefined;
    };
    aesthetic_variants: {
        display_name: string;
        slug: string;
        images: {
            url: string;
            width: number;
            height: number;
        }[];
        primary_color_hex?: string | undefined;
        manufacturer_sku?: string | undefined;
        front_image?: {
            url: string;
            width: number;
            height: number;
        } | undefined;
        back_image?: {
            url: string;
            width: number;
            height: number;
        } | undefined;
    }[];
    power_sources: ("battery" | "hardwired" | "mechanical_harvesting" | "wireless" | "ethernet")[];
    product_url?: string | undefined;
}>;
type BaseDeviceModel = z.infer<typeof base_device_model_v1>;
declare const device_model_v1: z.ZodIntersection<z.ZodObject<{
    device_model_id: z.ZodString;
    manufacturer: z.ZodObject<Omit<{
        manufacturer_id: z.ZodString;
        display_name: z.ZodString;
        logo: z.ZodOptional<z.ZodObject<{
            url: z.ZodString;
            width: z.ZodNumber;
            height: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            url: string;
            width: number;
            height: number;
        }, {
            url: string;
            width: number;
            height: number;
        }>>;
        integration: z.ZodEnum<["stable", "beta", "planned", "unsupported", "inquire"]>;
        integration_support_level: z.ZodEnum<["stable", "beta", "planned", "unsupported", "inquire"]>;
        is_connect_webview_supported: z.ZodBoolean;
        requires_seam_support_to_add_account: z.ZodBoolean;
        device_model_count: z.ZodNumber;
        annotations: z.ZodArray<z.ZodObject<{
            annotation_code: z.ZodEnum<["subscription_required"]>;
            message: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            message: string;
            annotation_code: "subscription_required";
        }, {
            message: string;
            annotation_code: "subscription_required";
        }>, "many">;
    }, "device_model_count">, "strip", z.ZodTypeAny, {
        display_name: string;
        manufacturer_id: string;
        integration: "stable" | "beta" | "planned" | "unsupported" | "inquire";
        integration_support_level: "stable" | "beta" | "planned" | "unsupported" | "inquire";
        is_connect_webview_supported: boolean;
        requires_seam_support_to_add_account: boolean;
        annotations: {
            message: string;
            annotation_code: "subscription_required";
        }[];
        logo?: {
            url: string;
            width: number;
            height: number;
        } | undefined;
    }, {
        display_name: string;
        manufacturer_id: string;
        integration: "stable" | "beta" | "planned" | "unsupported" | "inquire";
        integration_support_level: "stable" | "beta" | "planned" | "unsupported" | "inquire";
        is_connect_webview_supported: boolean;
        requires_seam_support_to_add_account: boolean;
        annotations: {
            message: string;
            annotation_code: "subscription_required";
        }[];
        logo?: {
            url: string;
            width: number;
            height: number;
        } | undefined;
    }>;
    is_device_supported: z.ZodBoolean;
    display_name: z.ZodString;
    description: z.ZodString;
    product_url: z.ZodOptional<z.ZodString>;
    main_connection_type: z.ZodEnum<["wifi", "zwave", "zigbee", "unknown"]>;
    hardware: z.ZodObject<{
        has_physical_key: z.ZodOptional<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        has_physical_key?: boolean | undefined;
    }, {
        has_physical_key?: boolean | undefined;
    }>;
    aesthetic_variants: z.ZodArray<z.ZodObject<{
        slug: z.ZodString;
        display_name: z.ZodString;
        primary_color_hex: z.ZodOptional<z.ZodString>;
        manufacturer_sku: z.ZodOptional<z.ZodString>;
        front_image: z.ZodOptional<z.ZodObject<{
            url: z.ZodString;
            width: z.ZodNumber;
            height: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            url: string;
            width: number;
            height: number;
        }, {
            url: string;
            width: number;
            height: number;
        }>>;
        back_image: z.ZodOptional<z.ZodObject<{
            url: z.ZodString;
            width: z.ZodNumber;
            height: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            url: string;
            width: number;
            height: number;
        }, {
            url: string;
            width: number;
            height: number;
        }>>;
        images: z.ZodArray<z.ZodObject<{
            url: z.ZodString;
            width: z.ZodNumber;
            height: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            url: string;
            width: number;
            height: number;
        }, {
            url: string;
            width: number;
            height: number;
        }>, "many">;
    }, "strip", z.ZodTypeAny, {
        display_name: string;
        slug: string;
        images: {
            url: string;
            width: number;
            height: number;
        }[];
        primary_color_hex?: string | undefined;
        manufacturer_sku?: string | undefined;
        front_image?: {
            url: string;
            width: number;
            height: number;
        } | undefined;
        back_image?: {
            url: string;
            width: number;
            height: number;
        } | undefined;
    }, {
        display_name: string;
        slug: string;
        images: {
            url: string;
            width: number;
            height: number;
        }[];
        primary_color_hex?: string | undefined;
        manufacturer_sku?: string | undefined;
        front_image?: {
            url: string;
            width: number;
            height: number;
        } | undefined;
        back_image?: {
            url: string;
            width: number;
            height: number;
        } | undefined;
    }>, "many">;
    power_sources: z.ZodArray<z.ZodEnum<["battery", "hardwired", "mechanical_harvesting", "wireless", "ethernet"]>, "many">;
}, "strip", z.ZodTypeAny, {
    display_name: string;
    device_model_id: string;
    manufacturer: {
        display_name: string;
        manufacturer_id: string;
        integration: "stable" | "beta" | "planned" | "unsupported" | "inquire";
        integration_support_level: "stable" | "beta" | "planned" | "unsupported" | "inquire";
        is_connect_webview_supported: boolean;
        requires_seam_support_to_add_account: boolean;
        annotations: {
            message: string;
            annotation_code: "subscription_required";
        }[];
        logo?: {
            url: string;
            width: number;
            height: number;
        } | undefined;
    };
    is_device_supported: boolean;
    description: string;
    main_connection_type: "unknown" | "wifi" | "zwave" | "zigbee";
    hardware: {
        has_physical_key?: boolean | undefined;
    };
    aesthetic_variants: {
        display_name: string;
        slug: string;
        images: {
            url: string;
            width: number;
            height: number;
        }[];
        primary_color_hex?: string | undefined;
        manufacturer_sku?: string | undefined;
        front_image?: {
            url: string;
            width: number;
            height: number;
        } | undefined;
        back_image?: {
            url: string;
            width: number;
            height: number;
        } | undefined;
    }[];
    power_sources: ("battery" | "hardwired" | "mechanical_harvesting" | "wireless" | "ethernet")[];
    product_url?: string | undefined;
}, {
    display_name: string;
    device_model_id: string;
    manufacturer: {
        display_name: string;
        manufacturer_id: string;
        integration: "stable" | "beta" | "planned" | "unsupported" | "inquire";
        integration_support_level: "stable" | "beta" | "planned" | "unsupported" | "inquire";
        is_connect_webview_supported: boolean;
        requires_seam_support_to_add_account: boolean;
        annotations: {
            message: string;
            annotation_code: "subscription_required";
        }[];
        logo?: {
            url: string;
            width: number;
            height: number;
        } | undefined;
    };
    is_device_supported: boolean;
    description: string;
    main_connection_type: "unknown" | "wifi" | "zwave" | "zigbee";
    hardware: {
        has_physical_key?: boolean | undefined;
    };
    aesthetic_variants: {
        display_name: string;
        slug: string;
        images: {
            url: string;
            width: number;
            height: number;
        }[];
        primary_color_hex?: string | undefined;
        manufacturer_sku?: string | undefined;
        front_image?: {
            url: string;
            width: number;
            height: number;
        } | undefined;
        back_image?: {
            url: string;
            width: number;
            height: number;
        } | undefined;
    }[];
    power_sources: ("battery" | "hardwired" | "mechanical_harvesting" | "wireless" | "ethernet")[];
    product_url?: string | undefined;
}>, z.ZodDiscriminatedUnion<"main_category", [z.ZodObject<{
    main_category: z.ZodLiteral<"smartlock">;
    physical_properties: z.ZodObject<{
        lock_type: z.ZodEnum<["deadbolt", "lever", "mortise", "lockbox", "cylinder", "padlock", "locker", "unknown"]>;
        has_physical_key: z.ZodBoolean;
        has_camera: z.ZodBoolean;
    }, "strip", z.ZodTypeAny, {
        lock_type: "unknown" | "deadbolt" | "lever" | "mortise" | "lockbox" | "cylinder" | "padlock" | "locker";
        has_physical_key: boolean;
        has_camera: boolean;
    }, {
        lock_type: "unknown" | "deadbolt" | "lever" | "mortise" | "lockbox" | "cylinder" | "padlock" | "locker";
        has_physical_key: boolean;
        has_camera: boolean;
    }>;
    software_features: z.ZodObject<{
        can_remotely_unlock: z.ZodBoolean;
        can_program_access_codes: z.ZodBoolean;
        can_program_access_schedules: z.ZodBoolean;
        can_program_access_codes_offline: z.ZodBoolean;
    }, "strip", z.ZodTypeAny, {
        can_remotely_unlock: boolean;
        can_program_access_codes: boolean;
        can_program_access_schedules: boolean;
        can_program_access_codes_offline: boolean;
    }, {
        can_remotely_unlock: boolean;
        can_program_access_codes: boolean;
        can_program_access_schedules: boolean;
        can_program_access_codes_offline: boolean;
    }>;
    can_remotely_unlock: z.ZodOptional<z.ZodLiteral<true>>;
    can_remotely_lock: z.ZodOptional<z.ZodLiteral<true>>;
    can_program_offline_access_codes: z.ZodOptional<z.ZodLiteral<true>>;
    can_program_online_access_codes: z.ZodOptional<z.ZodLiteral<true>>;
}, "strip", z.ZodTypeAny, {
    main_category: "smartlock";
    physical_properties: {
        lock_type: "unknown" | "deadbolt" | "lever" | "mortise" | "lockbox" | "cylinder" | "padlock" | "locker";
        has_physical_key: boolean;
        has_camera: boolean;
    };
    software_features: {
        can_remotely_unlock: boolean;
        can_program_access_codes: boolean;
        can_program_access_schedules: boolean;
        can_program_access_codes_offline: boolean;
    };
    can_remotely_unlock?: true | undefined;
    can_remotely_lock?: true | undefined;
    can_program_offline_access_codes?: true | undefined;
    can_program_online_access_codes?: true | undefined;
}, {
    main_category: "smartlock";
    physical_properties: {
        lock_type: "unknown" | "deadbolt" | "lever" | "mortise" | "lockbox" | "cylinder" | "padlock" | "locker";
        has_physical_key: boolean;
        has_camera: boolean;
    };
    software_features: {
        can_remotely_unlock: boolean;
        can_program_access_codes: boolean;
        can_program_access_schedules: boolean;
        can_program_access_codes_offline: boolean;
    };
    can_remotely_unlock?: true | undefined;
    can_remotely_lock?: true | undefined;
    can_program_offline_access_codes?: true | undefined;
    can_program_online_access_codes?: true | undefined;
}>, z.ZodObject<{
    main_category: z.ZodLiteral<"sensor">;
    physical_properties: z.ZodObject<{
        has_noise_sensor: z.ZodBoolean;
        has_humidity_sensor: z.ZodBoolean;
        has_temperature_sensor: z.ZodBoolean;
        has_occupancy_detection: z.ZodBoolean;
    }, "strip", z.ZodTypeAny, {
        has_noise_sensor: boolean;
        has_humidity_sensor: boolean;
        has_temperature_sensor: boolean;
        has_occupancy_detection: boolean;
    }, {
        has_noise_sensor: boolean;
        has_humidity_sensor: boolean;
        has_temperature_sensor: boolean;
        has_occupancy_detection: boolean;
    }>;
}, "strip", z.ZodTypeAny, {
    main_category: "sensor";
    physical_properties: {
        has_noise_sensor: boolean;
        has_humidity_sensor: boolean;
        has_temperature_sensor: boolean;
        has_occupancy_detection: boolean;
    };
}, {
    main_category: "sensor";
    physical_properties: {
        has_noise_sensor: boolean;
        has_humidity_sensor: boolean;
        has_temperature_sensor: boolean;
        has_occupancy_detection: boolean;
    };
}>, z.ZodObject<{
    main_category: z.ZodLiteral<"thermostat">;
    physical_properties: z.ZodObject<{
        available_modes: z.ZodArray<z.ZodEnum<["heat", "cool", "fan", "eco"]>, "many">;
        is_heat_pump_compatible: z.ZodBoolean;
        has_occupancy_detection: z.ZodBoolean;
        supports_demand_response: z.ZodBoolean;
        has_humidity_sensor: z.ZodBoolean;
        has_temperature_sensor: z.ZodBoolean;
        supports_emergency_heating_mode: z.ZodBoolean;
    }, "strip", z.ZodTypeAny, {
        has_humidity_sensor: boolean;
        has_temperature_sensor: boolean;
        has_occupancy_detection: boolean;
        available_modes: ("heat" | "cool" | "fan" | "eco")[];
        is_heat_pump_compatible: boolean;
        supports_demand_response: boolean;
        supports_emergency_heating_mode: boolean;
    }, {
        has_humidity_sensor: boolean;
        has_temperature_sensor: boolean;
        has_occupancy_detection: boolean;
        available_modes: ("heat" | "cool" | "fan" | "eco")[];
        is_heat_pump_compatible: boolean;
        supports_demand_response: boolean;
        supports_emergency_heating_mode: boolean;
    }>;
    software_features: z.ZodObject<{
        can_program_climate_schedules: z.ZodBoolean;
    }, "strip", z.ZodTypeAny, {
        can_program_climate_schedules: boolean;
    }, {
        can_program_climate_schedules: boolean;
    }>;
}, "strip", z.ZodTypeAny, {
    main_category: "thermostat";
    physical_properties: {
        has_humidity_sensor: boolean;
        has_temperature_sensor: boolean;
        has_occupancy_detection: boolean;
        available_modes: ("heat" | "cool" | "fan" | "eco")[];
        is_heat_pump_compatible: boolean;
        supports_demand_response: boolean;
        supports_emergency_heating_mode: boolean;
    };
    software_features: {
        can_program_climate_schedules: boolean;
    };
}, {
    main_category: "thermostat";
    physical_properties: {
        has_humidity_sensor: boolean;
        has_temperature_sensor: boolean;
        has_occupancy_detection: boolean;
        available_modes: ("heat" | "cool" | "fan" | "eco")[];
        is_heat_pump_compatible: boolean;
        supports_demand_response: boolean;
        supports_emergency_heating_mode: boolean;
    };
    software_features: {
        can_program_climate_schedules: boolean;
    };
}>, z.ZodObject<{
    main_category: z.ZodLiteral<"relay">;
}, "strip", z.ZodTypeAny, {
    main_category: "relay";
}, {
    main_category: "relay";
}>, z.ZodObject<{
    main_category: z.ZodLiteral<"intercom">;
    physical_properties: z.ZodObject<{
        has_camera: z.ZodBoolean;
        has_rfid_reader: z.ZodDefault<z.ZodBoolean>;
        has_nfc_reader: z.ZodDefault<z.ZodBoolean>;
        has_wiegand_interface: z.ZodDefault<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        has_camera: boolean;
        has_rfid_reader: boolean;
        has_nfc_reader: boolean;
        has_wiegand_interface: boolean;
    }, {
        has_camera: boolean;
        has_rfid_reader?: boolean | undefined;
        has_nfc_reader?: boolean | undefined;
        has_wiegand_interface?: boolean | undefined;
    }>;
    software_features: z.ZodObject<{
        can_remotely_unlock: z.ZodBoolean;
        can_program_access_codes: z.ZodBoolean;
        can_unlock_with_face_recognition: z.ZodDefault<z.ZodBoolean>;
        supports_onvif: z.ZodDefault<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        can_remotely_unlock: boolean;
        can_program_access_codes: boolean;
        can_unlock_with_face_recognition: boolean;
        supports_onvif: boolean;
    }, {
        can_remotely_unlock: boolean;
        can_program_access_codes: boolean;
        can_unlock_with_face_recognition?: boolean | undefined;
        supports_onvif?: boolean | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    main_category: "intercom";
    physical_properties: {
        has_camera: boolean;
        has_rfid_reader: boolean;
        has_nfc_reader: boolean;
        has_wiegand_interface: boolean;
    };
    software_features: {
        can_remotely_unlock: boolean;
        can_program_access_codes: boolean;
        can_unlock_with_face_recognition: boolean;
        supports_onvif: boolean;
    };
}, {
    main_category: "intercom";
    physical_properties: {
        has_camera: boolean;
        has_rfid_reader?: boolean | undefined;
        has_nfc_reader?: boolean | undefined;
        has_wiegand_interface?: boolean | undefined;
    };
    software_features: {
        can_remotely_unlock: boolean;
        can_program_access_codes: boolean;
        can_unlock_with_face_recognition?: boolean | undefined;
        supports_onvif?: boolean | undefined;
    };
}>, z.ZodObject<{
    main_category: z.ZodLiteral<"accessory">;
}, "strip", z.ZodTypeAny, {
    main_category: "accessory";
}, {
    main_category: "accessory";
}>]>>;
type DeviceModel = z.infer<typeof device_model_v1>;

declare const image_reference: z.ZodObject<{
    url: z.ZodString;
    width: z.ZodNumber;
    height: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    url: string;
    width: number;
    height: number;
}, {
    url: string;
    width: number;
    height: number;
}>;
type ImageReference = z.infer<typeof image_reference>;

declare const manufacturer_integration_support_level: z.ZodEnum<["stable", "beta", "planned", "unsupported", "inquire"]>;
type ManufacturerIntegrationSupportLevel = z.infer<typeof manufacturer_integration_support_level>;
declare const manufacturer_annotation_code: z.ZodEnum<["subscription_required"]>;
type ManufacturerAnnotationCode = z.infer<typeof manufacturer_annotation_code>;
declare const manufacturer_annotation: z.ZodObject<{
    annotation_code: z.ZodEnum<["subscription_required"]>;
    message: z.ZodString;
}, "strip", z.ZodTypeAny, {
    message: string;
    annotation_code: "subscription_required";
}, {
    message: string;
    annotation_code: "subscription_required";
}>;
type ManufacturerAnnotation = z.infer<typeof manufacturer_annotation>;
declare const manufacturer: z.ZodObject<{
    manufacturer_id: z.ZodString;
    display_name: z.ZodString;
    logo: z.ZodOptional<z.ZodObject<{
        url: z.ZodString;
        width: z.ZodNumber;
        height: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        url: string;
        width: number;
        height: number;
    }, {
        url: string;
        width: number;
        height: number;
    }>>;
    /** @deprecated */
    integration: z.ZodEnum<["stable", "beta", "planned", "unsupported", "inquire"]>;
    integration_support_level: z.ZodEnum<["stable", "beta", "planned", "unsupported", "inquire"]>;
    is_connect_webview_supported: z.ZodBoolean;
    requires_seam_support_to_add_account: z.ZodBoolean;
    device_model_count: z.ZodNumber;
    annotations: z.ZodArray<z.ZodObject<{
        annotation_code: z.ZodEnum<["subscription_required"]>;
        message: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        message: string;
        annotation_code: "subscription_required";
    }, {
        message: string;
        annotation_code: "subscription_required";
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    display_name: string;
    manufacturer_id: string;
    integration: "stable" | "beta" | "planned" | "unsupported" | "inquire";
    integration_support_level: "stable" | "beta" | "planned" | "unsupported" | "inquire";
    is_connect_webview_supported: boolean;
    requires_seam_support_to_add_account: boolean;
    device_model_count: number;
    annotations: {
        message: string;
        annotation_code: "subscription_required";
    }[];
    logo?: {
        url: string;
        width: number;
        height: number;
    } | undefined;
}, {
    display_name: string;
    manufacturer_id: string;
    integration: "stable" | "beta" | "planned" | "unsupported" | "inquire";
    integration_support_level: "stable" | "beta" | "planned" | "unsupported" | "inquire";
    is_connect_webview_supported: boolean;
    requires_seam_support_to_add_account: boolean;
    device_model_count: number;
    annotations: {
        message: string;
        annotation_code: "subscription_required";
    }[];
    logo?: {
        url: string;
        width: number;
        height: number;
    } | undefined;
}>;
type Manufacturer = z.infer<typeof manufacturer>;

type index_BaseDeviceModel = BaseDeviceModel;
type index_DeviceCategory = DeviceCategory;
type index_DeviceConnectionType = DeviceConnectionType;
type index_DeviceModel = DeviceModel;
type index_ImageReference = ImageReference;
type index_Manufacturer = Manufacturer;
type index_ManufacturerAnnotation = ManufacturerAnnotation;
type index_ManufacturerAnnotationCode = ManufacturerAnnotationCode;
type index_ManufacturerIntegrationSupportLevel = ManufacturerIntegrationSupportLevel;
type index_ThermostatProperties = ThermostatProperties;
declare const index_base_device_model_v1: typeof base_device_model_v1;
declare const index_device_capability_flags: typeof device_capability_flags;
declare const index_device_category: typeof device_category;
declare const index_device_connection_type: typeof device_connection_type;
declare const index_device_model_category_specific_properties: typeof device_model_category_specific_properties;
declare const index_device_model_v1: typeof device_model_v1;
declare const index_image_reference: typeof image_reference;
declare const index_manufacturer: typeof manufacturer;
declare const index_manufacturer_annotation: typeof manufacturer_annotation;
declare const index_manufacturer_annotation_code: typeof manufacturer_annotation_code;
declare const index_manufacturer_integration_support_level: typeof manufacturer_integration_support_level;
declare const index_thermostat: typeof thermostat;
declare namespace index {
  export { type index_BaseDeviceModel as BaseDeviceModel, type index_DeviceCategory as DeviceCategory, type index_DeviceConnectionType as DeviceConnectionType, type index_DeviceModel as DeviceModel, type index_ImageReference as ImageReference, type index_Manufacturer as Manufacturer, type index_ManufacturerAnnotation as ManufacturerAnnotation, type index_ManufacturerAnnotationCode as ManufacturerAnnotationCode, type index_ManufacturerIntegrationSupportLevel as ManufacturerIntegrationSupportLevel, type index_ThermostatProperties as ThermostatProperties, index_base_device_model_v1 as base_device_model_v1, index_device_capability_flags as device_capability_flags, index_device_category as device_category, index_device_connection_type as device_connection_type, index_device_model_category_specific_properties as device_model_category_specific_properties, index_device_model_v1 as device_model_v1, index_image_reference as image_reference, index_manufacturer as manufacturer, index_manufacturer_annotation as manufacturer_annotation, index_manufacturer_annotation_code as manufacturer_annotation_code, index_manufacturer_integration_support_level as manufacturer_integration_support_level, index_thermostat as thermostat };
}

declare const routes: {
    readonly '/api/v1/device_models/get': {
        readonly auth: "publishable_key";
        readonly methods: readonly ["GET", "OPTIONS"];
        readonly queryParams: z.ZodObject<{
            device_model_id: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            device_model_id: string;
        }, {
            device_model_id: string;
        }>;
        readonly jsonResponse: z.ZodObject<{
            device_model: z.ZodIntersection<z.ZodObject<{
                device_model_id: z.ZodString;
                manufacturer: z.ZodObject<Omit<{
                    manufacturer_id: z.ZodString;
                    display_name: z.ZodString;
                    logo: z.ZodOptional<z.ZodObject<{
                        url: z.ZodString;
                        width: z.ZodNumber;
                        height: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        url: string;
                        width: number;
                        height: number;
                    }, {
                        url: string;
                        width: number;
                        height: number;
                    }>>;
                    integration: z.ZodEnum<["stable", "beta", "planned", "unsupported", "inquire"]>;
                    integration_support_level: z.ZodEnum<["stable", "beta", "planned", "unsupported", "inquire"]>;
                    is_connect_webview_supported: z.ZodBoolean;
                    requires_seam_support_to_add_account: z.ZodBoolean;
                    device_model_count: z.ZodNumber;
                    annotations: z.ZodArray<z.ZodObject<{
                        annotation_code: z.ZodEnum<["subscription_required"]>;
                        message: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        message: string;
                        annotation_code: "subscription_required";
                    }, {
                        message: string;
                        annotation_code: "subscription_required";
                    }>, "many">;
                }, "device_model_count">, "strip", z.ZodTypeAny, {
                    display_name: string;
                    manufacturer_id: string;
                    integration: "stable" | "beta" | "planned" | "unsupported" | "inquire";
                    integration_support_level: "stable" | "beta" | "planned" | "unsupported" | "inquire";
                    is_connect_webview_supported: boolean;
                    requires_seam_support_to_add_account: boolean;
                    annotations: {
                        message: string;
                        annotation_code: "subscription_required";
                    }[];
                    logo?: {
                        url: string;
                        width: number;
                        height: number;
                    } | undefined;
                }, {
                    display_name: string;
                    manufacturer_id: string;
                    integration: "stable" | "beta" | "planned" | "unsupported" | "inquire";
                    integration_support_level: "stable" | "beta" | "planned" | "unsupported" | "inquire";
                    is_connect_webview_supported: boolean;
                    requires_seam_support_to_add_account: boolean;
                    annotations: {
                        message: string;
                        annotation_code: "subscription_required";
                    }[];
                    logo?: {
                        url: string;
                        width: number;
                        height: number;
                    } | undefined;
                }>;
                is_device_supported: z.ZodBoolean;
                display_name: z.ZodString;
                description: z.ZodString;
                product_url: z.ZodOptional<z.ZodString>;
                main_connection_type: z.ZodEnum<["wifi", "zwave", "zigbee", "unknown"]>;
                hardware: z.ZodObject<{
                    has_physical_key: z.ZodOptional<z.ZodBoolean>;
                }, "strip", z.ZodTypeAny, {
                    has_physical_key?: boolean | undefined;
                }, {
                    has_physical_key?: boolean | undefined;
                }>;
                aesthetic_variants: z.ZodArray<z.ZodObject<{
                    slug: z.ZodString;
                    display_name: z.ZodString;
                    primary_color_hex: z.ZodOptional<z.ZodString>;
                    manufacturer_sku: z.ZodOptional<z.ZodString>;
                    front_image: z.ZodOptional<z.ZodObject<{
                        url: z.ZodString;
                        width: z.ZodNumber;
                        height: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        url: string;
                        width: number;
                        height: number;
                    }, {
                        url: string;
                        width: number;
                        height: number;
                    }>>;
                    back_image: z.ZodOptional<z.ZodObject<{
                        url: z.ZodString;
                        width: z.ZodNumber;
                        height: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        url: string;
                        width: number;
                        height: number;
                    }, {
                        url: string;
                        width: number;
                        height: number;
                    }>>;
                    images: z.ZodArray<z.ZodObject<{
                        url: z.ZodString;
                        width: z.ZodNumber;
                        height: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        url: string;
                        width: number;
                        height: number;
                    }, {
                        url: string;
                        width: number;
                        height: number;
                    }>, "many">;
                }, "strip", z.ZodTypeAny, {
                    display_name: string;
                    slug: string;
                    images: {
                        url: string;
                        width: number;
                        height: number;
                    }[];
                    primary_color_hex?: string | undefined;
                    manufacturer_sku?: string | undefined;
                    front_image?: {
                        url: string;
                        width: number;
                        height: number;
                    } | undefined;
                    back_image?: {
                        url: string;
                        width: number;
                        height: number;
                    } | undefined;
                }, {
                    display_name: string;
                    slug: string;
                    images: {
                        url: string;
                        width: number;
                        height: number;
                    }[];
                    primary_color_hex?: string | undefined;
                    manufacturer_sku?: string | undefined;
                    front_image?: {
                        url: string;
                        width: number;
                        height: number;
                    } | undefined;
                    back_image?: {
                        url: string;
                        width: number;
                        height: number;
                    } | undefined;
                }>, "many">;
                power_sources: z.ZodArray<z.ZodEnum<["battery", "hardwired", "mechanical_harvesting", "wireless", "ethernet"]>, "many">;
            }, "strip", z.ZodTypeAny, {
                display_name: string;
                device_model_id: string;
                manufacturer: {
                    display_name: string;
                    manufacturer_id: string;
                    integration: "stable" | "beta" | "planned" | "unsupported" | "inquire";
                    integration_support_level: "stable" | "beta" | "planned" | "unsupported" | "inquire";
                    is_connect_webview_supported: boolean;
                    requires_seam_support_to_add_account: boolean;
                    annotations: {
                        message: string;
                        annotation_code: "subscription_required";
                    }[];
                    logo?: {
                        url: string;
                        width: number;
                        height: number;
                    } | undefined;
                };
                is_device_supported: boolean;
                description: string;
                main_connection_type: "unknown" | "wifi" | "zwave" | "zigbee";
                hardware: {
                    has_physical_key?: boolean | undefined;
                };
                aesthetic_variants: {
                    display_name: string;
                    slug: string;
                    images: {
                        url: string;
                        width: number;
                        height: number;
                    }[];
                    primary_color_hex?: string | undefined;
                    manufacturer_sku?: string | undefined;
                    front_image?: {
                        url: string;
                        width: number;
                        height: number;
                    } | undefined;
                    back_image?: {
                        url: string;
                        width: number;
                        height: number;
                    } | undefined;
                }[];
                power_sources: ("battery" | "hardwired" | "mechanical_harvesting" | "wireless" | "ethernet")[];
                product_url?: string | undefined;
            }, {
                display_name: string;
                device_model_id: string;
                manufacturer: {
                    display_name: string;
                    manufacturer_id: string;
                    integration: "stable" | "beta" | "planned" | "unsupported" | "inquire";
                    integration_support_level: "stable" | "beta" | "planned" | "unsupported" | "inquire";
                    is_connect_webview_supported: boolean;
                    requires_seam_support_to_add_account: boolean;
                    annotations: {
                        message: string;
                        annotation_code: "subscription_required";
                    }[];
                    logo?: {
                        url: string;
                        width: number;
                        height: number;
                    } | undefined;
                };
                is_device_supported: boolean;
                description: string;
                main_connection_type: "unknown" | "wifi" | "zwave" | "zigbee";
                hardware: {
                    has_physical_key?: boolean | undefined;
                };
                aesthetic_variants: {
                    display_name: string;
                    slug: string;
                    images: {
                        url: string;
                        width: number;
                        height: number;
                    }[];
                    primary_color_hex?: string | undefined;
                    manufacturer_sku?: string | undefined;
                    front_image?: {
                        url: string;
                        width: number;
                        height: number;
                    } | undefined;
                    back_image?: {
                        url: string;
                        width: number;
                        height: number;
                    } | undefined;
                }[];
                power_sources: ("battery" | "hardwired" | "mechanical_harvesting" | "wireless" | "ethernet")[];
                product_url?: string | undefined;
            }>, z.ZodDiscriminatedUnion<"main_category", [z.ZodObject<{
                main_category: z.ZodLiteral<"smartlock">;
                physical_properties: z.ZodObject<{
                    lock_type: z.ZodEnum<["deadbolt", "lever", "mortise", "lockbox", "cylinder", "padlock", "locker", "unknown"]>;
                    has_physical_key: z.ZodBoolean;
                    has_camera: z.ZodBoolean;
                }, "strip", z.ZodTypeAny, {
                    lock_type: "unknown" | "deadbolt" | "lever" | "mortise" | "lockbox" | "cylinder" | "padlock" | "locker";
                    has_physical_key: boolean;
                    has_camera: boolean;
                }, {
                    lock_type: "unknown" | "deadbolt" | "lever" | "mortise" | "lockbox" | "cylinder" | "padlock" | "locker";
                    has_physical_key: boolean;
                    has_camera: boolean;
                }>;
                software_features: z.ZodObject<{
                    can_remotely_unlock: z.ZodBoolean;
                    can_program_access_codes: z.ZodBoolean;
                    can_program_access_schedules: z.ZodBoolean;
                    can_program_access_codes_offline: z.ZodBoolean;
                }, "strip", z.ZodTypeAny, {
                    can_remotely_unlock: boolean;
                    can_program_access_codes: boolean;
                    can_program_access_schedules: boolean;
                    can_program_access_codes_offline: boolean;
                }, {
                    can_remotely_unlock: boolean;
                    can_program_access_codes: boolean;
                    can_program_access_schedules: boolean;
                    can_program_access_codes_offline: boolean;
                }>;
                can_remotely_unlock: z.ZodOptional<z.ZodLiteral<true>>;
                can_remotely_lock: z.ZodOptional<z.ZodLiteral<true>>;
                can_program_offline_access_codes: z.ZodOptional<z.ZodLiteral<true>>;
                can_program_online_access_codes: z.ZodOptional<z.ZodLiteral<true>>;
            }, "strip", z.ZodTypeAny, {
                main_category: "smartlock";
                physical_properties: {
                    lock_type: "unknown" | "deadbolt" | "lever" | "mortise" | "lockbox" | "cylinder" | "padlock" | "locker";
                    has_physical_key: boolean;
                    has_camera: boolean;
                };
                software_features: {
                    can_remotely_unlock: boolean;
                    can_program_access_codes: boolean;
                    can_program_access_schedules: boolean;
                    can_program_access_codes_offline: boolean;
                };
                can_remotely_unlock?: true | undefined;
                can_remotely_lock?: true | undefined;
                can_program_offline_access_codes?: true | undefined;
                can_program_online_access_codes?: true | undefined;
            }, {
                main_category: "smartlock";
                physical_properties: {
                    lock_type: "unknown" | "deadbolt" | "lever" | "mortise" | "lockbox" | "cylinder" | "padlock" | "locker";
                    has_physical_key: boolean;
                    has_camera: boolean;
                };
                software_features: {
                    can_remotely_unlock: boolean;
                    can_program_access_codes: boolean;
                    can_program_access_schedules: boolean;
                    can_program_access_codes_offline: boolean;
                };
                can_remotely_unlock?: true | undefined;
                can_remotely_lock?: true | undefined;
                can_program_offline_access_codes?: true | undefined;
                can_program_online_access_codes?: true | undefined;
            }>, z.ZodObject<{
                main_category: z.ZodLiteral<"sensor">;
                physical_properties: z.ZodObject<{
                    has_noise_sensor: z.ZodBoolean;
                    has_humidity_sensor: z.ZodBoolean;
                    has_temperature_sensor: z.ZodBoolean;
                    has_occupancy_detection: z.ZodBoolean;
                }, "strip", z.ZodTypeAny, {
                    has_noise_sensor: boolean;
                    has_humidity_sensor: boolean;
                    has_temperature_sensor: boolean;
                    has_occupancy_detection: boolean;
                }, {
                    has_noise_sensor: boolean;
                    has_humidity_sensor: boolean;
                    has_temperature_sensor: boolean;
                    has_occupancy_detection: boolean;
                }>;
            }, "strip", z.ZodTypeAny, {
                main_category: "sensor";
                physical_properties: {
                    has_noise_sensor: boolean;
                    has_humidity_sensor: boolean;
                    has_temperature_sensor: boolean;
                    has_occupancy_detection: boolean;
                };
            }, {
                main_category: "sensor";
                physical_properties: {
                    has_noise_sensor: boolean;
                    has_humidity_sensor: boolean;
                    has_temperature_sensor: boolean;
                    has_occupancy_detection: boolean;
                };
            }>, z.ZodObject<{
                main_category: z.ZodLiteral<"thermostat">;
                physical_properties: z.ZodObject<{
                    available_modes: z.ZodArray<z.ZodEnum<["heat", "cool", "fan", "eco"]>, "many">;
                    is_heat_pump_compatible: z.ZodBoolean;
                    has_occupancy_detection: z.ZodBoolean;
                    supports_demand_response: z.ZodBoolean;
                    has_humidity_sensor: z.ZodBoolean;
                    has_temperature_sensor: z.ZodBoolean;
                    supports_emergency_heating_mode: z.ZodBoolean;
                }, "strip", z.ZodTypeAny, {
                    has_humidity_sensor: boolean;
                    has_temperature_sensor: boolean;
                    has_occupancy_detection: boolean;
                    available_modes: ("heat" | "cool" | "fan" | "eco")[];
                    is_heat_pump_compatible: boolean;
                    supports_demand_response: boolean;
                    supports_emergency_heating_mode: boolean;
                }, {
                    has_humidity_sensor: boolean;
                    has_temperature_sensor: boolean;
                    has_occupancy_detection: boolean;
                    available_modes: ("heat" | "cool" | "fan" | "eco")[];
                    is_heat_pump_compatible: boolean;
                    supports_demand_response: boolean;
                    supports_emergency_heating_mode: boolean;
                }>;
                software_features: z.ZodObject<{
                    can_program_climate_schedules: z.ZodBoolean;
                }, "strip", z.ZodTypeAny, {
                    can_program_climate_schedules: boolean;
                }, {
                    can_program_climate_schedules: boolean;
                }>;
            }, "strip", z.ZodTypeAny, {
                main_category: "thermostat";
                physical_properties: {
                    has_humidity_sensor: boolean;
                    has_temperature_sensor: boolean;
                    has_occupancy_detection: boolean;
                    available_modes: ("heat" | "cool" | "fan" | "eco")[];
                    is_heat_pump_compatible: boolean;
                    supports_demand_response: boolean;
                    supports_emergency_heating_mode: boolean;
                };
                software_features: {
                    can_program_climate_schedules: boolean;
                };
            }, {
                main_category: "thermostat";
                physical_properties: {
                    has_humidity_sensor: boolean;
                    has_temperature_sensor: boolean;
                    has_occupancy_detection: boolean;
                    available_modes: ("heat" | "cool" | "fan" | "eco")[];
                    is_heat_pump_compatible: boolean;
                    supports_demand_response: boolean;
                    supports_emergency_heating_mode: boolean;
                };
                software_features: {
                    can_program_climate_schedules: boolean;
                };
            }>, z.ZodObject<{
                main_category: z.ZodLiteral<"relay">;
            }, "strip", z.ZodTypeAny, {
                main_category: "relay";
            }, {
                main_category: "relay";
            }>, z.ZodObject<{
                main_category: z.ZodLiteral<"intercom">;
                physical_properties: z.ZodObject<{
                    has_camera: z.ZodBoolean;
                    has_rfid_reader: z.ZodDefault<z.ZodBoolean>;
                    has_nfc_reader: z.ZodDefault<z.ZodBoolean>;
                    has_wiegand_interface: z.ZodDefault<z.ZodBoolean>;
                }, "strip", z.ZodTypeAny, {
                    has_camera: boolean;
                    has_rfid_reader: boolean;
                    has_nfc_reader: boolean;
                    has_wiegand_interface: boolean;
                }, {
                    has_camera: boolean;
                    has_rfid_reader?: boolean | undefined;
                    has_nfc_reader?: boolean | undefined;
                    has_wiegand_interface?: boolean | undefined;
                }>;
                software_features: z.ZodObject<{
                    can_remotely_unlock: z.ZodBoolean;
                    can_program_access_codes: z.ZodBoolean;
                    can_unlock_with_face_recognition: z.ZodDefault<z.ZodBoolean>;
                    supports_onvif: z.ZodDefault<z.ZodBoolean>;
                }, "strip", z.ZodTypeAny, {
                    can_remotely_unlock: boolean;
                    can_program_access_codes: boolean;
                    can_unlock_with_face_recognition: boolean;
                    supports_onvif: boolean;
                }, {
                    can_remotely_unlock: boolean;
                    can_program_access_codes: boolean;
                    can_unlock_with_face_recognition?: boolean | undefined;
                    supports_onvif?: boolean | undefined;
                }>;
            }, "strip", z.ZodTypeAny, {
                main_category: "intercom";
                physical_properties: {
                    has_camera: boolean;
                    has_rfid_reader: boolean;
                    has_nfc_reader: boolean;
                    has_wiegand_interface: boolean;
                };
                software_features: {
                    can_remotely_unlock: boolean;
                    can_program_access_codes: boolean;
                    can_unlock_with_face_recognition: boolean;
                    supports_onvif: boolean;
                };
            }, {
                main_category: "intercom";
                physical_properties: {
                    has_camera: boolean;
                    has_rfid_reader?: boolean | undefined;
                    has_nfc_reader?: boolean | undefined;
                    has_wiegand_interface?: boolean | undefined;
                };
                software_features: {
                    can_remotely_unlock: boolean;
                    can_program_access_codes: boolean;
                    can_unlock_with_face_recognition?: boolean | undefined;
                    supports_onvif?: boolean | undefined;
                };
            }>, z.ZodObject<{
                main_category: z.ZodLiteral<"accessory">;
            }, "strip", z.ZodTypeAny, {
                main_category: "accessory";
            }, {
                main_category: "accessory";
            }>]>>;
        }, "strip", z.ZodTypeAny, {
            device_model: ({
                display_name: string;
                device_model_id: string;
                manufacturer: {
                    display_name: string;
                    manufacturer_id: string;
                    integration: "stable" | "beta" | "planned" | "unsupported" | "inquire";
                    integration_support_level: "stable" | "beta" | "planned" | "unsupported" | "inquire";
                    is_connect_webview_supported: boolean;
                    requires_seam_support_to_add_account: boolean;
                    annotations: {
                        message: string;
                        annotation_code: "subscription_required";
                    }[];
                    logo?: {
                        url: string;
                        width: number;
                        height: number;
                    } | undefined;
                };
                is_device_supported: boolean;
                description: string;
                main_connection_type: "unknown" | "wifi" | "zwave" | "zigbee";
                hardware: {
                    has_physical_key?: boolean | undefined;
                };
                aesthetic_variants: {
                    display_name: string;
                    slug: string;
                    images: {
                        url: string;
                        width: number;
                        height: number;
                    }[];
                    primary_color_hex?: string | undefined;
                    manufacturer_sku?: string | undefined;
                    front_image?: {
                        url: string;
                        width: number;
                        height: number;
                    } | undefined;
                    back_image?: {
                        url: string;
                        width: number;
                        height: number;
                    } | undefined;
                }[];
                power_sources: ("battery" | "hardwired" | "mechanical_harvesting" | "wireless" | "ethernet")[];
                product_url?: string | undefined;
            } & {
                main_category: "smartlock";
                physical_properties: {
                    lock_type: "unknown" | "deadbolt" | "lever" | "mortise" | "lockbox" | "cylinder" | "padlock" | "locker";
                    has_physical_key: boolean;
                    has_camera: boolean;
                };
                software_features: {
                    can_remotely_unlock: boolean;
                    can_program_access_codes: boolean;
                    can_program_access_schedules: boolean;
                    can_program_access_codes_offline: boolean;
                };
                can_remotely_unlock?: true | undefined;
                can_remotely_lock?: true | undefined;
                can_program_offline_access_codes?: true | undefined;
                can_program_online_access_codes?: true | undefined;
            }) | ({
                display_name: string;
                device_model_id: string;
                manufacturer: {
                    display_name: string;
                    manufacturer_id: string;
                    integration: "stable" | "beta" | "planned" | "unsupported" | "inquire";
                    integration_support_level: "stable" | "beta" | "planned" | "unsupported" | "inquire";
                    is_connect_webview_supported: boolean;
                    requires_seam_support_to_add_account: boolean;
                    annotations: {
                        message: string;
                        annotation_code: "subscription_required";
                    }[];
                    logo?: {
                        url: string;
                        width: number;
                        height: number;
                    } | undefined;
                };
                is_device_supported: boolean;
                description: string;
                main_connection_type: "unknown" | "wifi" | "zwave" | "zigbee";
                hardware: {
                    has_physical_key?: boolean | undefined;
                };
                aesthetic_variants: {
                    display_name: string;
                    slug: string;
                    images: {
                        url: string;
                        width: number;
                        height: number;
                    }[];
                    primary_color_hex?: string | undefined;
                    manufacturer_sku?: string | undefined;
                    front_image?: {
                        url: string;
                        width: number;
                        height: number;
                    } | undefined;
                    back_image?: {
                        url: string;
                        width: number;
                        height: number;
                    } | undefined;
                }[];
                power_sources: ("battery" | "hardwired" | "mechanical_harvesting" | "wireless" | "ethernet")[];
                product_url?: string | undefined;
            } & {
                main_category: "sensor";
                physical_properties: {
                    has_noise_sensor: boolean;
                    has_humidity_sensor: boolean;
                    has_temperature_sensor: boolean;
                    has_occupancy_detection: boolean;
                };
            }) | ({
                display_name: string;
                device_model_id: string;
                manufacturer: {
                    display_name: string;
                    manufacturer_id: string;
                    integration: "stable" | "beta" | "planned" | "unsupported" | "inquire";
                    integration_support_level: "stable" | "beta" | "planned" | "unsupported" | "inquire";
                    is_connect_webview_supported: boolean;
                    requires_seam_support_to_add_account: boolean;
                    annotations: {
                        message: string;
                        annotation_code: "subscription_required";
                    }[];
                    logo?: {
                        url: string;
                        width: number;
                        height: number;
                    } | undefined;
                };
                is_device_supported: boolean;
                description: string;
                main_connection_type: "unknown" | "wifi" | "zwave" | "zigbee";
                hardware: {
                    has_physical_key?: boolean | undefined;
                };
                aesthetic_variants: {
                    display_name: string;
                    slug: string;
                    images: {
                        url: string;
                        width: number;
                        height: number;
                    }[];
                    primary_color_hex?: string | undefined;
                    manufacturer_sku?: string | undefined;
                    front_image?: {
                        url: string;
                        width: number;
                        height: number;
                    } | undefined;
                    back_image?: {
                        url: string;
                        width: number;
                        height: number;
                    } | undefined;
                }[];
                power_sources: ("battery" | "hardwired" | "mechanical_harvesting" | "wireless" | "ethernet")[];
                product_url?: string | undefined;
            } & {
                main_category: "thermostat";
                physical_properties: {
                    has_humidity_sensor: boolean;
                    has_temperature_sensor: boolean;
                    has_occupancy_detection: boolean;
                    available_modes: ("heat" | "cool" | "fan" | "eco")[];
                    is_heat_pump_compatible: boolean;
                    supports_demand_response: boolean;
                    supports_emergency_heating_mode: boolean;
                };
                software_features: {
                    can_program_climate_schedules: boolean;
                };
            }) | ({
                display_name: string;
                device_model_id: string;
                manufacturer: {
                    display_name: string;
                    manufacturer_id: string;
                    integration: "stable" | "beta" | "planned" | "unsupported" | "inquire";
                    integration_support_level: "stable" | "beta" | "planned" | "unsupported" | "inquire";
                    is_connect_webview_supported: boolean;
                    requires_seam_support_to_add_account: boolean;
                    annotations: {
                        message: string;
                        annotation_code: "subscription_required";
                    }[];
                    logo?: {
                        url: string;
                        width: number;
                        height: number;
                    } | undefined;
                };
                is_device_supported: boolean;
                description: string;
                main_connection_type: "unknown" | "wifi" | "zwave" | "zigbee";
                hardware: {
                    has_physical_key?: boolean | undefined;
                };
                aesthetic_variants: {
                    display_name: string;
                    slug: string;
                    images: {
                        url: string;
                        width: number;
                        height: number;
                    }[];
                    primary_color_hex?: string | undefined;
                    manufacturer_sku?: string | undefined;
                    front_image?: {
                        url: string;
                        width: number;
                        height: number;
                    } | undefined;
                    back_image?: {
                        url: string;
                        width: number;
                        height: number;
                    } | undefined;
                }[];
                power_sources: ("battery" | "hardwired" | "mechanical_harvesting" | "wireless" | "ethernet")[];
                product_url?: string | undefined;
            } & {
                main_category: "relay";
            }) | ({
                display_name: string;
                device_model_id: string;
                manufacturer: {
                    display_name: string;
                    manufacturer_id: string;
                    integration: "stable" | "beta" | "planned" | "unsupported" | "inquire";
                    integration_support_level: "stable" | "beta" | "planned" | "unsupported" | "inquire";
                    is_connect_webview_supported: boolean;
                    requires_seam_support_to_add_account: boolean;
                    annotations: {
                        message: string;
                        annotation_code: "subscription_required";
                    }[];
                    logo?: {
                        url: string;
                        width: number;
                        height: number;
                    } | undefined;
                };
                is_device_supported: boolean;
                description: string;
                main_connection_type: "unknown" | "wifi" | "zwave" | "zigbee";
                hardware: {
                    has_physical_key?: boolean | undefined;
                };
                aesthetic_variants: {
                    display_name: string;
                    slug: string;
                    images: {
                        url: string;
                        width: number;
                        height: number;
                    }[];
                    primary_color_hex?: string | undefined;
                    manufacturer_sku?: string | undefined;
                    front_image?: {
                        url: string;
                        width: number;
                        height: number;
                    } | undefined;
                    back_image?: {
                        url: string;
                        width: number;
                        height: number;
                    } | undefined;
                }[];
                power_sources: ("battery" | "hardwired" | "mechanical_harvesting" | "wireless" | "ethernet")[];
                product_url?: string | undefined;
            } & {
                main_category: "intercom";
                physical_properties: {
                    has_camera: boolean;
                    has_rfid_reader: boolean;
                    has_nfc_reader: boolean;
                    has_wiegand_interface: boolean;
                };
                software_features: {
                    can_remotely_unlock: boolean;
                    can_program_access_codes: boolean;
                    can_unlock_with_face_recognition: boolean;
                    supports_onvif: boolean;
                };
            }) | ({
                display_name: string;
                device_model_id: string;
                manufacturer: {
                    display_name: string;
                    manufacturer_id: string;
                    integration: "stable" | "beta" | "planned" | "unsupported" | "inquire";
                    integration_support_level: "stable" | "beta" | "planned" | "unsupported" | "inquire";
                    is_connect_webview_supported: boolean;
                    requires_seam_support_to_add_account: boolean;
                    annotations: {
                        message: string;
                        annotation_code: "subscription_required";
                    }[];
                    logo?: {
                        url: string;
                        width: number;
                        height: number;
                    } | undefined;
                };
                is_device_supported: boolean;
                description: string;
                main_connection_type: "unknown" | "wifi" | "zwave" | "zigbee";
                hardware: {
                    has_physical_key?: boolean | undefined;
                };
                aesthetic_variants: {
                    display_name: string;
                    slug: string;
                    images: {
                        url: string;
                        width: number;
                        height: number;
                    }[];
                    primary_color_hex?: string | undefined;
                    manufacturer_sku?: string | undefined;
                    front_image?: {
                        url: string;
                        width: number;
                        height: number;
                    } | undefined;
                    back_image?: {
                        url: string;
                        width: number;
                        height: number;
                    } | undefined;
                }[];
                power_sources: ("battery" | "hardwired" | "mechanical_harvesting" | "wireless" | "ethernet")[];
                product_url?: string | undefined;
            } & {
                main_category: "accessory";
            });
        }, {
            device_model: ({
                display_name: string;
                device_model_id: string;
                manufacturer: {
                    display_name: string;
                    manufacturer_id: string;
                    integration: "stable" | "beta" | "planned" | "unsupported" | "inquire";
                    integration_support_level: "stable" | "beta" | "planned" | "unsupported" | "inquire";
                    is_connect_webview_supported: boolean;
                    requires_seam_support_to_add_account: boolean;
                    annotations: {
                        message: string;
                        annotation_code: "subscription_required";
                    }[];
                    logo?: {
                        url: string;
                        width: number;
                        height: number;
                    } | undefined;
                };
                is_device_supported: boolean;
                description: string;
                main_connection_type: "unknown" | "wifi" | "zwave" | "zigbee";
                hardware: {
                    has_physical_key?: boolean | undefined;
                };
                aesthetic_variants: {
                    display_name: string;
                    slug: string;
                    images: {
                        url: string;
                        width: number;
                        height: number;
                    }[];
                    primary_color_hex?: string | undefined;
                    manufacturer_sku?: string | undefined;
                    front_image?: {
                        url: string;
                        width: number;
                        height: number;
                    } | undefined;
                    back_image?: {
                        url: string;
                        width: number;
                        height: number;
                    } | undefined;
                }[];
                power_sources: ("battery" | "hardwired" | "mechanical_harvesting" | "wireless" | "ethernet")[];
                product_url?: string | undefined;
            } & {
                main_category: "smartlock";
                physical_properties: {
                    lock_type: "unknown" | "deadbolt" | "lever" | "mortise" | "lockbox" | "cylinder" | "padlock" | "locker";
                    has_physical_key: boolean;
                    has_camera: boolean;
                };
                software_features: {
                    can_remotely_unlock: boolean;
                    can_program_access_codes: boolean;
                    can_program_access_schedules: boolean;
                    can_program_access_codes_offline: boolean;
                };
                can_remotely_unlock?: true | undefined;
                can_remotely_lock?: true | undefined;
                can_program_offline_access_codes?: true | undefined;
                can_program_online_access_codes?: true | undefined;
            }) | ({
                display_name: string;
                device_model_id: string;
                manufacturer: {
                    display_name: string;
                    manufacturer_id: string;
                    integration: "stable" | "beta" | "planned" | "unsupported" | "inquire";
                    integration_support_level: "stable" | "beta" | "planned" | "unsupported" | "inquire";
                    is_connect_webview_supported: boolean;
                    requires_seam_support_to_add_account: boolean;
                    annotations: {
                        message: string;
                        annotation_code: "subscription_required";
                    }[];
                    logo?: {
                        url: string;
                        width: number;
                        height: number;
                    } | undefined;
                };
                is_device_supported: boolean;
                description: string;
                main_connection_type: "unknown" | "wifi" | "zwave" | "zigbee";
                hardware: {
                    has_physical_key?: boolean | undefined;
                };
                aesthetic_variants: {
                    display_name: string;
                    slug: string;
                    images: {
                        url: string;
                        width: number;
                        height: number;
                    }[];
                    primary_color_hex?: string | undefined;
                    manufacturer_sku?: string | undefined;
                    front_image?: {
                        url: string;
                        width: number;
                        height: number;
                    } | undefined;
                    back_image?: {
                        url: string;
                        width: number;
                        height: number;
                    } | undefined;
                }[];
                power_sources: ("battery" | "hardwired" | "mechanical_harvesting" | "wireless" | "ethernet")[];
                product_url?: string | undefined;
            } & {
                main_category: "sensor";
                physical_properties: {
                    has_noise_sensor: boolean;
                    has_humidity_sensor: boolean;
                    has_temperature_sensor: boolean;
                    has_occupancy_detection: boolean;
                };
            }) | ({
                display_name: string;
                device_model_id: string;
                manufacturer: {
                    display_name: string;
                    manufacturer_id: string;
                    integration: "stable" | "beta" | "planned" | "unsupported" | "inquire";
                    integration_support_level: "stable" | "beta" | "planned" | "unsupported" | "inquire";
                    is_connect_webview_supported: boolean;
                    requires_seam_support_to_add_account: boolean;
                    annotations: {
                        message: string;
                        annotation_code: "subscription_required";
                    }[];
                    logo?: {
                        url: string;
                        width: number;
                        height: number;
                    } | undefined;
                };
                is_device_supported: boolean;
                description: string;
                main_connection_type: "unknown" | "wifi" | "zwave" | "zigbee";
                hardware: {
                    has_physical_key?: boolean | undefined;
                };
                aesthetic_variants: {
                    display_name: string;
                    slug: string;
                    images: {
                        url: string;
                        width: number;
                        height: number;
                    }[];
                    primary_color_hex?: string | undefined;
                    manufacturer_sku?: string | undefined;
                    front_image?: {
                        url: string;
                        width: number;
                        height: number;
                    } | undefined;
                    back_image?: {
                        url: string;
                        width: number;
                        height: number;
                    } | undefined;
                }[];
                power_sources: ("battery" | "hardwired" | "mechanical_harvesting" | "wireless" | "ethernet")[];
                product_url?: string | undefined;
            } & {
                main_category: "thermostat";
                physical_properties: {
                    has_humidity_sensor: boolean;
                    has_temperature_sensor: boolean;
                    has_occupancy_detection: boolean;
                    available_modes: ("heat" | "cool" | "fan" | "eco")[];
                    is_heat_pump_compatible: boolean;
                    supports_demand_response: boolean;
                    supports_emergency_heating_mode: boolean;
                };
                software_features: {
                    can_program_climate_schedules: boolean;
                };
            }) | ({
                display_name: string;
                device_model_id: string;
                manufacturer: {
                    display_name: string;
                    manufacturer_id: string;
                    integration: "stable" | "beta" | "planned" | "unsupported" | "inquire";
                    integration_support_level: "stable" | "beta" | "planned" | "unsupported" | "inquire";
                    is_connect_webview_supported: boolean;
                    requires_seam_support_to_add_account: boolean;
                    annotations: {
                        message: string;
                        annotation_code: "subscription_required";
                    }[];
                    logo?: {
                        url: string;
                        width: number;
                        height: number;
                    } | undefined;
                };
                is_device_supported: boolean;
                description: string;
                main_connection_type: "unknown" | "wifi" | "zwave" | "zigbee";
                hardware: {
                    has_physical_key?: boolean | undefined;
                };
                aesthetic_variants: {
                    display_name: string;
                    slug: string;
                    images: {
                        url: string;
                        width: number;
                        height: number;
                    }[];
                    primary_color_hex?: string | undefined;
                    manufacturer_sku?: string | undefined;
                    front_image?: {
                        url: string;
                        width: number;
                        height: number;
                    } | undefined;
                    back_image?: {
                        url: string;
                        width: number;
                        height: number;
                    } | undefined;
                }[];
                power_sources: ("battery" | "hardwired" | "mechanical_harvesting" | "wireless" | "ethernet")[];
                product_url?: string | undefined;
            } & {
                main_category: "relay";
            }) | ({
                display_name: string;
                device_model_id: string;
                manufacturer: {
                    display_name: string;
                    manufacturer_id: string;
                    integration: "stable" | "beta" | "planned" | "unsupported" | "inquire";
                    integration_support_level: "stable" | "beta" | "planned" | "unsupported" | "inquire";
                    is_connect_webview_supported: boolean;
                    requires_seam_support_to_add_account: boolean;
                    annotations: {
                        message: string;
                        annotation_code: "subscription_required";
                    }[];
                    logo?: {
                        url: string;
                        width: number;
                        height: number;
                    } | undefined;
                };
                is_device_supported: boolean;
                description: string;
                main_connection_type: "unknown" | "wifi" | "zwave" | "zigbee";
                hardware: {
                    has_physical_key?: boolean | undefined;
                };
                aesthetic_variants: {
                    display_name: string;
                    slug: string;
                    images: {
                        url: string;
                        width: number;
                        height: number;
                    }[];
                    primary_color_hex?: string | undefined;
                    manufacturer_sku?: string | undefined;
                    front_image?: {
                        url: string;
                        width: number;
                        height: number;
                    } | undefined;
                    back_image?: {
                        url: string;
                        width: number;
                        height: number;
                    } | undefined;
                }[];
                power_sources: ("battery" | "hardwired" | "mechanical_harvesting" | "wireless" | "ethernet")[];
                product_url?: string | undefined;
            } & {
                main_category: "intercom";
                physical_properties: {
                    has_camera: boolean;
                    has_rfid_reader?: boolean | undefined;
                    has_nfc_reader?: boolean | undefined;
                    has_wiegand_interface?: boolean | undefined;
                };
                software_features: {
                    can_remotely_unlock: boolean;
                    can_program_access_codes: boolean;
                    can_unlock_with_face_recognition?: boolean | undefined;
                    supports_onvif?: boolean | undefined;
                };
            }) | ({
                display_name: string;
                device_model_id: string;
                manufacturer: {
                    display_name: string;
                    manufacturer_id: string;
                    integration: "stable" | "beta" | "planned" | "unsupported" | "inquire";
                    integration_support_level: "stable" | "beta" | "planned" | "unsupported" | "inquire";
                    is_connect_webview_supported: boolean;
                    requires_seam_support_to_add_account: boolean;
                    annotations: {
                        message: string;
                        annotation_code: "subscription_required";
                    }[];
                    logo?: {
                        url: string;
                        width: number;
                        height: number;
                    } | undefined;
                };
                is_device_supported: boolean;
                description: string;
                main_connection_type: "unknown" | "wifi" | "zwave" | "zigbee";
                hardware: {
                    has_physical_key?: boolean | undefined;
                };
                aesthetic_variants: {
                    display_name: string;
                    slug: string;
                    images: {
                        url: string;
                        width: number;
                        height: number;
                    }[];
                    primary_color_hex?: string | undefined;
                    manufacturer_sku?: string | undefined;
                    front_image?: {
                        url: string;
                        width: number;
                        height: number;
                    } | undefined;
                    back_image?: {
                        url: string;
                        width: number;
                        height: number;
                    } | undefined;
                }[];
                power_sources: ("battery" | "hardwired" | "mechanical_harvesting" | "wireless" | "ethernet")[];
                product_url?: string | undefined;
            } & {
                main_category: "accessory";
            });
        }>;
    };
    readonly '/api/v1/device_models/list': {
        readonly auth: "publishable_key";
        readonly methods: readonly ["GET", "OPTIONS"];
        readonly queryParams: z.ZodObject<{
            main_category: z.ZodOptional<z.ZodEnum<["smartlock", "sensor", "thermostat", "relay", "intercom", "accessory"]>>;
            manufacturer_id: z.ZodOptional<z.ZodString>;
            manufacturer_ids: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            /** @deprecated */
            integration_status: z.ZodOptional<z.ZodEnum<["stable", "beta", "planned", "unsupported", "inquire"]>>;
            integration_support_levels: z.ZodOptional<z.ZodArray<z.ZodEnum<["stable", "beta", "planned", "unsupported", "inquire"]>, "many">>;
            text_search: z.ZodOptional<z.ZodString>;
            include_if: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            exclude_if: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, "strip", z.ZodTypeAny, {
            main_category?: "thermostat" | "smartlock" | "sensor" | "relay" | "intercom" | "accessory" | undefined;
            manufacturer_id?: string | undefined;
            manufacturer_ids?: string[] | undefined;
            integration_status?: "stable" | "beta" | "planned" | "unsupported" | "inquire" | undefined;
            integration_support_levels?: ("stable" | "beta" | "planned" | "unsupported" | "inquire")[] | undefined;
            text_search?: string | undefined;
            include_if?: string[] | undefined;
            exclude_if?: string[] | undefined;
        }, {
            main_category?: "thermostat" | "smartlock" | "sensor" | "relay" | "intercom" | "accessory" | undefined;
            manufacturer_id?: string | undefined;
            manufacturer_ids?: string[] | undefined;
            integration_status?: "stable" | "beta" | "planned" | "unsupported" | "inquire" | undefined;
            integration_support_levels?: ("stable" | "beta" | "planned" | "unsupported" | "inquire")[] | undefined;
            text_search?: string | undefined;
            include_if?: string[] | undefined;
            exclude_if?: string[] | undefined;
        }>;
        readonly jsonResponse: z.ZodObject<{
            device_models: z.ZodArray<z.ZodIntersection<z.ZodObject<{
                device_model_id: z.ZodString;
                manufacturer: z.ZodObject<Omit<{
                    manufacturer_id: z.ZodString;
                    display_name: z.ZodString;
                    logo: z.ZodOptional<z.ZodObject<{
                        url: z.ZodString;
                        width: z.ZodNumber;
                        height: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        url: string;
                        width: number;
                        height: number;
                    }, {
                        url: string;
                        width: number;
                        height: number;
                    }>>;
                    integration: z.ZodEnum<["stable", "beta", "planned", "unsupported", "inquire"]>;
                    integration_support_level: z.ZodEnum<["stable", "beta", "planned", "unsupported", "inquire"]>;
                    is_connect_webview_supported: z.ZodBoolean;
                    requires_seam_support_to_add_account: z.ZodBoolean;
                    device_model_count: z.ZodNumber;
                    annotations: z.ZodArray<z.ZodObject<{
                        annotation_code: z.ZodEnum<["subscription_required"]>;
                        message: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        message: string;
                        annotation_code: "subscription_required";
                    }, {
                        message: string;
                        annotation_code: "subscription_required";
                    }>, "many">;
                }, "device_model_count">, "strip", z.ZodTypeAny, {
                    display_name: string;
                    manufacturer_id: string;
                    integration: "stable" | "beta" | "planned" | "unsupported" | "inquire";
                    integration_support_level: "stable" | "beta" | "planned" | "unsupported" | "inquire";
                    is_connect_webview_supported: boolean;
                    requires_seam_support_to_add_account: boolean;
                    annotations: {
                        message: string;
                        annotation_code: "subscription_required";
                    }[];
                    logo?: {
                        url: string;
                        width: number;
                        height: number;
                    } | undefined;
                }, {
                    display_name: string;
                    manufacturer_id: string;
                    integration: "stable" | "beta" | "planned" | "unsupported" | "inquire";
                    integration_support_level: "stable" | "beta" | "planned" | "unsupported" | "inquire";
                    is_connect_webview_supported: boolean;
                    requires_seam_support_to_add_account: boolean;
                    annotations: {
                        message: string;
                        annotation_code: "subscription_required";
                    }[];
                    logo?: {
                        url: string;
                        width: number;
                        height: number;
                    } | undefined;
                }>;
                is_device_supported: z.ZodBoolean;
                display_name: z.ZodString;
                description: z.ZodString;
                product_url: z.ZodOptional<z.ZodString>;
                main_connection_type: z.ZodEnum<["wifi", "zwave", "zigbee", "unknown"]>;
                hardware: z.ZodObject<{
                    has_physical_key: z.ZodOptional<z.ZodBoolean>;
                }, "strip", z.ZodTypeAny, {
                    has_physical_key?: boolean | undefined;
                }, {
                    has_physical_key?: boolean | undefined;
                }>;
                aesthetic_variants: z.ZodArray<z.ZodObject<{
                    slug: z.ZodString;
                    display_name: z.ZodString;
                    primary_color_hex: z.ZodOptional<z.ZodString>;
                    manufacturer_sku: z.ZodOptional<z.ZodString>;
                    front_image: z.ZodOptional<z.ZodObject<{
                        url: z.ZodString;
                        width: z.ZodNumber;
                        height: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        url: string;
                        width: number;
                        height: number;
                    }, {
                        url: string;
                        width: number;
                        height: number;
                    }>>;
                    back_image: z.ZodOptional<z.ZodObject<{
                        url: z.ZodString;
                        width: z.ZodNumber;
                        height: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        url: string;
                        width: number;
                        height: number;
                    }, {
                        url: string;
                        width: number;
                        height: number;
                    }>>;
                    images: z.ZodArray<z.ZodObject<{
                        url: z.ZodString;
                        width: z.ZodNumber;
                        height: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        url: string;
                        width: number;
                        height: number;
                    }, {
                        url: string;
                        width: number;
                        height: number;
                    }>, "many">;
                }, "strip", z.ZodTypeAny, {
                    display_name: string;
                    slug: string;
                    images: {
                        url: string;
                        width: number;
                        height: number;
                    }[];
                    primary_color_hex?: string | undefined;
                    manufacturer_sku?: string | undefined;
                    front_image?: {
                        url: string;
                        width: number;
                        height: number;
                    } | undefined;
                    back_image?: {
                        url: string;
                        width: number;
                        height: number;
                    } | undefined;
                }, {
                    display_name: string;
                    slug: string;
                    images: {
                        url: string;
                        width: number;
                        height: number;
                    }[];
                    primary_color_hex?: string | undefined;
                    manufacturer_sku?: string | undefined;
                    front_image?: {
                        url: string;
                        width: number;
                        height: number;
                    } | undefined;
                    back_image?: {
                        url: string;
                        width: number;
                        height: number;
                    } | undefined;
                }>, "many">;
                power_sources: z.ZodArray<z.ZodEnum<["battery", "hardwired", "mechanical_harvesting", "wireless", "ethernet"]>, "many">;
            }, "strip", z.ZodTypeAny, {
                display_name: string;
                device_model_id: string;
                manufacturer: {
                    display_name: string;
                    manufacturer_id: string;
                    integration: "stable" | "beta" | "planned" | "unsupported" | "inquire";
                    integration_support_level: "stable" | "beta" | "planned" | "unsupported" | "inquire";
                    is_connect_webview_supported: boolean;
                    requires_seam_support_to_add_account: boolean;
                    annotations: {
                        message: string;
                        annotation_code: "subscription_required";
                    }[];
                    logo?: {
                        url: string;
                        width: number;
                        height: number;
                    } | undefined;
                };
                is_device_supported: boolean;
                description: string;
                main_connection_type: "unknown" | "wifi" | "zwave" | "zigbee";
                hardware: {
                    has_physical_key?: boolean | undefined;
                };
                aesthetic_variants: {
                    display_name: string;
                    slug: string;
                    images: {
                        url: string;
                        width: number;
                        height: number;
                    }[];
                    primary_color_hex?: string | undefined;
                    manufacturer_sku?: string | undefined;
                    front_image?: {
                        url: string;
                        width: number;
                        height: number;
                    } | undefined;
                    back_image?: {
                        url: string;
                        width: number;
                        height: number;
                    } | undefined;
                }[];
                power_sources: ("battery" | "hardwired" | "mechanical_harvesting" | "wireless" | "ethernet")[];
                product_url?: string | undefined;
            }, {
                display_name: string;
                device_model_id: string;
                manufacturer: {
                    display_name: string;
                    manufacturer_id: string;
                    integration: "stable" | "beta" | "planned" | "unsupported" | "inquire";
                    integration_support_level: "stable" | "beta" | "planned" | "unsupported" | "inquire";
                    is_connect_webview_supported: boolean;
                    requires_seam_support_to_add_account: boolean;
                    annotations: {
                        message: string;
                        annotation_code: "subscription_required";
                    }[];
                    logo?: {
                        url: string;
                        width: number;
                        height: number;
                    } | undefined;
                };
                is_device_supported: boolean;
                description: string;
                main_connection_type: "unknown" | "wifi" | "zwave" | "zigbee";
                hardware: {
                    has_physical_key?: boolean | undefined;
                };
                aesthetic_variants: {
                    display_name: string;
                    slug: string;
                    images: {
                        url: string;
                        width: number;
                        height: number;
                    }[];
                    primary_color_hex?: string | undefined;
                    manufacturer_sku?: string | undefined;
                    front_image?: {
                        url: string;
                        width: number;
                        height: number;
                    } | undefined;
                    back_image?: {
                        url: string;
                        width: number;
                        height: number;
                    } | undefined;
                }[];
                power_sources: ("battery" | "hardwired" | "mechanical_harvesting" | "wireless" | "ethernet")[];
                product_url?: string | undefined;
            }>, z.ZodDiscriminatedUnion<"main_category", [z.ZodObject<{
                main_category: z.ZodLiteral<"smartlock">;
                physical_properties: z.ZodObject<{
                    lock_type: z.ZodEnum<["deadbolt", "lever", "mortise", "lockbox", "cylinder", "padlock", "locker", "unknown"]>;
                    has_physical_key: z.ZodBoolean;
                    has_camera: z.ZodBoolean;
                }, "strip", z.ZodTypeAny, {
                    lock_type: "unknown" | "deadbolt" | "lever" | "mortise" | "lockbox" | "cylinder" | "padlock" | "locker";
                    has_physical_key: boolean;
                    has_camera: boolean;
                }, {
                    lock_type: "unknown" | "deadbolt" | "lever" | "mortise" | "lockbox" | "cylinder" | "padlock" | "locker";
                    has_physical_key: boolean;
                    has_camera: boolean;
                }>;
                software_features: z.ZodObject<{
                    can_remotely_unlock: z.ZodBoolean;
                    can_program_access_codes: z.ZodBoolean;
                    can_program_access_schedules: z.ZodBoolean;
                    can_program_access_codes_offline: z.ZodBoolean;
                }, "strip", z.ZodTypeAny, {
                    can_remotely_unlock: boolean;
                    can_program_access_codes: boolean;
                    can_program_access_schedules: boolean;
                    can_program_access_codes_offline: boolean;
                }, {
                    can_remotely_unlock: boolean;
                    can_program_access_codes: boolean;
                    can_program_access_schedules: boolean;
                    can_program_access_codes_offline: boolean;
                }>;
                can_remotely_unlock: z.ZodOptional<z.ZodLiteral<true>>;
                can_remotely_lock: z.ZodOptional<z.ZodLiteral<true>>;
                can_program_offline_access_codes: z.ZodOptional<z.ZodLiteral<true>>;
                can_program_online_access_codes: z.ZodOptional<z.ZodLiteral<true>>;
            }, "strip", z.ZodTypeAny, {
                main_category: "smartlock";
                physical_properties: {
                    lock_type: "unknown" | "deadbolt" | "lever" | "mortise" | "lockbox" | "cylinder" | "padlock" | "locker";
                    has_physical_key: boolean;
                    has_camera: boolean;
                };
                software_features: {
                    can_remotely_unlock: boolean;
                    can_program_access_codes: boolean;
                    can_program_access_schedules: boolean;
                    can_program_access_codes_offline: boolean;
                };
                can_remotely_unlock?: true | undefined;
                can_remotely_lock?: true | undefined;
                can_program_offline_access_codes?: true | undefined;
                can_program_online_access_codes?: true | undefined;
            }, {
                main_category: "smartlock";
                physical_properties: {
                    lock_type: "unknown" | "deadbolt" | "lever" | "mortise" | "lockbox" | "cylinder" | "padlock" | "locker";
                    has_physical_key: boolean;
                    has_camera: boolean;
                };
                software_features: {
                    can_remotely_unlock: boolean;
                    can_program_access_codes: boolean;
                    can_program_access_schedules: boolean;
                    can_program_access_codes_offline: boolean;
                };
                can_remotely_unlock?: true | undefined;
                can_remotely_lock?: true | undefined;
                can_program_offline_access_codes?: true | undefined;
                can_program_online_access_codes?: true | undefined;
            }>, z.ZodObject<{
                main_category: z.ZodLiteral<"sensor">;
                physical_properties: z.ZodObject<{
                    has_noise_sensor: z.ZodBoolean;
                    has_humidity_sensor: z.ZodBoolean;
                    has_temperature_sensor: z.ZodBoolean;
                    has_occupancy_detection: z.ZodBoolean;
                }, "strip", z.ZodTypeAny, {
                    has_noise_sensor: boolean;
                    has_humidity_sensor: boolean;
                    has_temperature_sensor: boolean;
                    has_occupancy_detection: boolean;
                }, {
                    has_noise_sensor: boolean;
                    has_humidity_sensor: boolean;
                    has_temperature_sensor: boolean;
                    has_occupancy_detection: boolean;
                }>;
            }, "strip", z.ZodTypeAny, {
                main_category: "sensor";
                physical_properties: {
                    has_noise_sensor: boolean;
                    has_humidity_sensor: boolean;
                    has_temperature_sensor: boolean;
                    has_occupancy_detection: boolean;
                };
            }, {
                main_category: "sensor";
                physical_properties: {
                    has_noise_sensor: boolean;
                    has_humidity_sensor: boolean;
                    has_temperature_sensor: boolean;
                    has_occupancy_detection: boolean;
                };
            }>, z.ZodObject<{
                main_category: z.ZodLiteral<"thermostat">;
                physical_properties: z.ZodObject<{
                    available_modes: z.ZodArray<z.ZodEnum<["heat", "cool", "fan", "eco"]>, "many">;
                    is_heat_pump_compatible: z.ZodBoolean;
                    has_occupancy_detection: z.ZodBoolean;
                    supports_demand_response: z.ZodBoolean;
                    has_humidity_sensor: z.ZodBoolean;
                    has_temperature_sensor: z.ZodBoolean;
                    supports_emergency_heating_mode: z.ZodBoolean;
                }, "strip", z.ZodTypeAny, {
                    has_humidity_sensor: boolean;
                    has_temperature_sensor: boolean;
                    has_occupancy_detection: boolean;
                    available_modes: ("heat" | "cool" | "fan" | "eco")[];
                    is_heat_pump_compatible: boolean;
                    supports_demand_response: boolean;
                    supports_emergency_heating_mode: boolean;
                }, {
                    has_humidity_sensor: boolean;
                    has_temperature_sensor: boolean;
                    has_occupancy_detection: boolean;
                    available_modes: ("heat" | "cool" | "fan" | "eco")[];
                    is_heat_pump_compatible: boolean;
                    supports_demand_response: boolean;
                    supports_emergency_heating_mode: boolean;
                }>;
                software_features: z.ZodObject<{
                    can_program_climate_schedules: z.ZodBoolean;
                }, "strip", z.ZodTypeAny, {
                    can_program_climate_schedules: boolean;
                }, {
                    can_program_climate_schedules: boolean;
                }>;
            }, "strip", z.ZodTypeAny, {
                main_category: "thermostat";
                physical_properties: {
                    has_humidity_sensor: boolean;
                    has_temperature_sensor: boolean;
                    has_occupancy_detection: boolean;
                    available_modes: ("heat" | "cool" | "fan" | "eco")[];
                    is_heat_pump_compatible: boolean;
                    supports_demand_response: boolean;
                    supports_emergency_heating_mode: boolean;
                };
                software_features: {
                    can_program_climate_schedules: boolean;
                };
            }, {
                main_category: "thermostat";
                physical_properties: {
                    has_humidity_sensor: boolean;
                    has_temperature_sensor: boolean;
                    has_occupancy_detection: boolean;
                    available_modes: ("heat" | "cool" | "fan" | "eco")[];
                    is_heat_pump_compatible: boolean;
                    supports_demand_response: boolean;
                    supports_emergency_heating_mode: boolean;
                };
                software_features: {
                    can_program_climate_schedules: boolean;
                };
            }>, z.ZodObject<{
                main_category: z.ZodLiteral<"relay">;
            }, "strip", z.ZodTypeAny, {
                main_category: "relay";
            }, {
                main_category: "relay";
            }>, z.ZodObject<{
                main_category: z.ZodLiteral<"intercom">;
                physical_properties: z.ZodObject<{
                    has_camera: z.ZodBoolean;
                    has_rfid_reader: z.ZodDefault<z.ZodBoolean>;
                    has_nfc_reader: z.ZodDefault<z.ZodBoolean>;
                    has_wiegand_interface: z.ZodDefault<z.ZodBoolean>;
                }, "strip", z.ZodTypeAny, {
                    has_camera: boolean;
                    has_rfid_reader: boolean;
                    has_nfc_reader: boolean;
                    has_wiegand_interface: boolean;
                }, {
                    has_camera: boolean;
                    has_rfid_reader?: boolean | undefined;
                    has_nfc_reader?: boolean | undefined;
                    has_wiegand_interface?: boolean | undefined;
                }>;
                software_features: z.ZodObject<{
                    can_remotely_unlock: z.ZodBoolean;
                    can_program_access_codes: z.ZodBoolean;
                    can_unlock_with_face_recognition: z.ZodDefault<z.ZodBoolean>;
                    supports_onvif: z.ZodDefault<z.ZodBoolean>;
                }, "strip", z.ZodTypeAny, {
                    can_remotely_unlock: boolean;
                    can_program_access_codes: boolean;
                    can_unlock_with_face_recognition: boolean;
                    supports_onvif: boolean;
                }, {
                    can_remotely_unlock: boolean;
                    can_program_access_codes: boolean;
                    can_unlock_with_face_recognition?: boolean | undefined;
                    supports_onvif?: boolean | undefined;
                }>;
            }, "strip", z.ZodTypeAny, {
                main_category: "intercom";
                physical_properties: {
                    has_camera: boolean;
                    has_rfid_reader: boolean;
                    has_nfc_reader: boolean;
                    has_wiegand_interface: boolean;
                };
                software_features: {
                    can_remotely_unlock: boolean;
                    can_program_access_codes: boolean;
                    can_unlock_with_face_recognition: boolean;
                    supports_onvif: boolean;
                };
            }, {
                main_category: "intercom";
                physical_properties: {
                    has_camera: boolean;
                    has_rfid_reader?: boolean | undefined;
                    has_nfc_reader?: boolean | undefined;
                    has_wiegand_interface?: boolean | undefined;
                };
                software_features: {
                    can_remotely_unlock: boolean;
                    can_program_access_codes: boolean;
                    can_unlock_with_face_recognition?: boolean | undefined;
                    supports_onvif?: boolean | undefined;
                };
            }>, z.ZodObject<{
                main_category: z.ZodLiteral<"accessory">;
            }, "strip", z.ZodTypeAny, {
                main_category: "accessory";
            }, {
                main_category: "accessory";
            }>]>>, "many">;
        }, "strip", z.ZodTypeAny, {
            device_models: ({
                display_name: string;
                device_model_id: string;
                manufacturer: {
                    display_name: string;
                    manufacturer_id: string;
                    integration: "stable" | "beta" | "planned" | "unsupported" | "inquire";
                    integration_support_level: "stable" | "beta" | "planned" | "unsupported" | "inquire";
                    is_connect_webview_supported: boolean;
                    requires_seam_support_to_add_account: boolean;
                    annotations: {
                        message: string;
                        annotation_code: "subscription_required";
                    }[];
                    logo?: {
                        url: string;
                        width: number;
                        height: number;
                    } | undefined;
                };
                is_device_supported: boolean;
                description: string;
                main_connection_type: "unknown" | "wifi" | "zwave" | "zigbee";
                hardware: {
                    has_physical_key?: boolean | undefined;
                };
                aesthetic_variants: {
                    display_name: string;
                    slug: string;
                    images: {
                        url: string;
                        width: number;
                        height: number;
                    }[];
                    primary_color_hex?: string | undefined;
                    manufacturer_sku?: string | undefined;
                    front_image?: {
                        url: string;
                        width: number;
                        height: number;
                    } | undefined;
                    back_image?: {
                        url: string;
                        width: number;
                        height: number;
                    } | undefined;
                }[];
                power_sources: ("battery" | "hardwired" | "mechanical_harvesting" | "wireless" | "ethernet")[];
                product_url?: string | undefined;
            } & ({
                main_category: "smartlock";
                physical_properties: {
                    lock_type: "unknown" | "deadbolt" | "lever" | "mortise" | "lockbox" | "cylinder" | "padlock" | "locker";
                    has_physical_key: boolean;
                    has_camera: boolean;
                };
                software_features: {
                    can_remotely_unlock: boolean;
                    can_program_access_codes: boolean;
                    can_program_access_schedules: boolean;
                    can_program_access_codes_offline: boolean;
                };
                can_remotely_unlock?: true | undefined;
                can_remotely_lock?: true | undefined;
                can_program_offline_access_codes?: true | undefined;
                can_program_online_access_codes?: true | undefined;
            } | {
                main_category: "sensor";
                physical_properties: {
                    has_noise_sensor: boolean;
                    has_humidity_sensor: boolean;
                    has_temperature_sensor: boolean;
                    has_occupancy_detection: boolean;
                };
            } | {
                main_category: "thermostat";
                physical_properties: {
                    has_humidity_sensor: boolean;
                    has_temperature_sensor: boolean;
                    has_occupancy_detection: boolean;
                    available_modes: ("heat" | "cool" | "fan" | "eco")[];
                    is_heat_pump_compatible: boolean;
                    supports_demand_response: boolean;
                    supports_emergency_heating_mode: boolean;
                };
                software_features: {
                    can_program_climate_schedules: boolean;
                };
            } | {
                main_category: "relay";
            } | {
                main_category: "intercom";
                physical_properties: {
                    has_camera: boolean;
                    has_rfid_reader: boolean;
                    has_nfc_reader: boolean;
                    has_wiegand_interface: boolean;
                };
                software_features: {
                    can_remotely_unlock: boolean;
                    can_program_access_codes: boolean;
                    can_unlock_with_face_recognition: boolean;
                    supports_onvif: boolean;
                };
            } | {
                main_category: "accessory";
            }))[];
        }, {
            device_models: ({
                display_name: string;
                device_model_id: string;
                manufacturer: {
                    display_name: string;
                    manufacturer_id: string;
                    integration: "stable" | "beta" | "planned" | "unsupported" | "inquire";
                    integration_support_level: "stable" | "beta" | "planned" | "unsupported" | "inquire";
                    is_connect_webview_supported: boolean;
                    requires_seam_support_to_add_account: boolean;
                    annotations: {
                        message: string;
                        annotation_code: "subscription_required";
                    }[];
                    logo?: {
                        url: string;
                        width: number;
                        height: number;
                    } | undefined;
                };
                is_device_supported: boolean;
                description: string;
                main_connection_type: "unknown" | "wifi" | "zwave" | "zigbee";
                hardware: {
                    has_physical_key?: boolean | undefined;
                };
                aesthetic_variants: {
                    display_name: string;
                    slug: string;
                    images: {
                        url: string;
                        width: number;
                        height: number;
                    }[];
                    primary_color_hex?: string | undefined;
                    manufacturer_sku?: string | undefined;
                    front_image?: {
                        url: string;
                        width: number;
                        height: number;
                    } | undefined;
                    back_image?: {
                        url: string;
                        width: number;
                        height: number;
                    } | undefined;
                }[];
                power_sources: ("battery" | "hardwired" | "mechanical_harvesting" | "wireless" | "ethernet")[];
                product_url?: string | undefined;
            } & ({
                main_category: "smartlock";
                physical_properties: {
                    lock_type: "unknown" | "deadbolt" | "lever" | "mortise" | "lockbox" | "cylinder" | "padlock" | "locker";
                    has_physical_key: boolean;
                    has_camera: boolean;
                };
                software_features: {
                    can_remotely_unlock: boolean;
                    can_program_access_codes: boolean;
                    can_program_access_schedules: boolean;
                    can_program_access_codes_offline: boolean;
                };
                can_remotely_unlock?: true | undefined;
                can_remotely_lock?: true | undefined;
                can_program_offline_access_codes?: true | undefined;
                can_program_online_access_codes?: true | undefined;
            } | {
                main_category: "sensor";
                physical_properties: {
                    has_noise_sensor: boolean;
                    has_humidity_sensor: boolean;
                    has_temperature_sensor: boolean;
                    has_occupancy_detection: boolean;
                };
            } | {
                main_category: "thermostat";
                physical_properties: {
                    has_humidity_sensor: boolean;
                    has_temperature_sensor: boolean;
                    has_occupancy_detection: boolean;
                    available_modes: ("heat" | "cool" | "fan" | "eco")[];
                    is_heat_pump_compatible: boolean;
                    supports_demand_response: boolean;
                    supports_emergency_heating_mode: boolean;
                };
                software_features: {
                    can_program_climate_schedules: boolean;
                };
            } | {
                main_category: "relay";
            } | {
                main_category: "intercom";
                physical_properties: {
                    has_camera: boolean;
                    has_rfid_reader?: boolean | undefined;
                    has_nfc_reader?: boolean | undefined;
                    has_wiegand_interface?: boolean | undefined;
                };
                software_features: {
                    can_remotely_unlock: boolean;
                    can_program_access_codes: boolean;
                    can_unlock_with_face_recognition?: boolean | undefined;
                    supports_onvif?: boolean | undefined;
                };
            } | {
                main_category: "accessory";
            }))[];
        }>;
    };
    readonly '/api/v1/manufacturers/get': {
        readonly auth: "publishable_key";
        readonly methods: readonly ["GET", "OPTIONS"];
        readonly queryParams: z.ZodObject<{
            manufacturer_id: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            manufacturer_id: string;
        }, {
            manufacturer_id: string;
        }>;
        readonly jsonResponse: z.ZodObject<{
            manufacturer: z.ZodObject<{
                manufacturer_id: z.ZodString;
                display_name: z.ZodString;
                logo: z.ZodOptional<z.ZodObject<{
                    url: z.ZodString;
                    width: z.ZodNumber;
                    height: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    url: string;
                    width: number;
                    height: number;
                }, {
                    url: string;
                    width: number;
                    height: number;
                }>>;
                integration: z.ZodEnum<["stable", "beta", "planned", "unsupported", "inquire"]>;
                integration_support_level: z.ZodEnum<["stable", "beta", "planned", "unsupported", "inquire"]>;
                is_connect_webview_supported: z.ZodBoolean;
                requires_seam_support_to_add_account: z.ZodBoolean;
                device_model_count: z.ZodNumber;
                annotations: z.ZodArray<z.ZodObject<{
                    annotation_code: z.ZodEnum<["subscription_required"]>;
                    message: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    message: string;
                    annotation_code: "subscription_required";
                }, {
                    message: string;
                    annotation_code: "subscription_required";
                }>, "many">;
            }, "strip", z.ZodTypeAny, {
                display_name: string;
                manufacturer_id: string;
                integration: "stable" | "beta" | "planned" | "unsupported" | "inquire";
                integration_support_level: "stable" | "beta" | "planned" | "unsupported" | "inquire";
                is_connect_webview_supported: boolean;
                requires_seam_support_to_add_account: boolean;
                device_model_count: number;
                annotations: {
                    message: string;
                    annotation_code: "subscription_required";
                }[];
                logo?: {
                    url: string;
                    width: number;
                    height: number;
                } | undefined;
            }, {
                display_name: string;
                manufacturer_id: string;
                integration: "stable" | "beta" | "planned" | "unsupported" | "inquire";
                integration_support_level: "stable" | "beta" | "planned" | "unsupported" | "inquire";
                is_connect_webview_supported: boolean;
                requires_seam_support_to_add_account: boolean;
                device_model_count: number;
                annotations: {
                    message: string;
                    annotation_code: "subscription_required";
                }[];
                logo?: {
                    url: string;
                    width: number;
                    height: number;
                } | undefined;
            }>;
        }, "strip", z.ZodTypeAny, {
            manufacturer: {
                display_name: string;
                manufacturer_id: string;
                integration: "stable" | "beta" | "planned" | "unsupported" | "inquire";
                integration_support_level: "stable" | "beta" | "planned" | "unsupported" | "inquire";
                is_connect_webview_supported: boolean;
                requires_seam_support_to_add_account: boolean;
                device_model_count: number;
                annotations: {
                    message: string;
                    annotation_code: "subscription_required";
                }[];
                logo?: {
                    url: string;
                    width: number;
                    height: number;
                } | undefined;
            };
        }, {
            manufacturer: {
                display_name: string;
                manufacturer_id: string;
                integration: "stable" | "beta" | "planned" | "unsupported" | "inquire";
                integration_support_level: "stable" | "beta" | "planned" | "unsupported" | "inquire";
                is_connect_webview_supported: boolean;
                requires_seam_support_to_add_account: boolean;
                device_model_count: number;
                annotations: {
                    message: string;
                    annotation_code: "subscription_required";
                }[];
                logo?: {
                    url: string;
                    width: number;
                    height: number;
                } | undefined;
            };
        }>;
    };
    readonly '/api/v1/manufacturers/list': {
        readonly auth: "publishable_key";
        readonly methods: readonly ["GET", "OPTIONS"];
        readonly queryParams: z.ZodObject<{
            /** @deprecated */
            integration_status: z.ZodOptional<z.ZodEnum<["stable", "beta", "planned", "unsupported", "inquire"]>>;
            integration_support_levels: z.ZodOptional<z.ZodArray<z.ZodEnum<["stable", "beta", "planned", "unsupported", "inquire"]>, "many">>;
            liqe_query: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            integration_status?: "stable" | "beta" | "planned" | "unsupported" | "inquire" | undefined;
            integration_support_levels?: ("stable" | "beta" | "planned" | "unsupported" | "inquire")[] | undefined;
            liqe_query?: string | undefined;
        }, {
            integration_status?: "stable" | "beta" | "planned" | "unsupported" | "inquire" | undefined;
            integration_support_levels?: ("stable" | "beta" | "planned" | "unsupported" | "inquire")[] | undefined;
            liqe_query?: string | undefined;
        }>;
        readonly jsonResponse: z.ZodObject<{
            manufacturers: z.ZodArray<z.ZodObject<{
                manufacturer_id: z.ZodString;
                display_name: z.ZodString;
                logo: z.ZodOptional<z.ZodObject<{
                    url: z.ZodString;
                    width: z.ZodNumber;
                    height: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    url: string;
                    width: number;
                    height: number;
                }, {
                    url: string;
                    width: number;
                    height: number;
                }>>;
                integration: z.ZodEnum<["stable", "beta", "planned", "unsupported", "inquire"]>;
                integration_support_level: z.ZodEnum<["stable", "beta", "planned", "unsupported", "inquire"]>;
                is_connect_webview_supported: z.ZodBoolean;
                requires_seam_support_to_add_account: z.ZodBoolean;
                device_model_count: z.ZodNumber;
                annotations: z.ZodArray<z.ZodObject<{
                    annotation_code: z.ZodEnum<["subscription_required"]>;
                    message: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    message: string;
                    annotation_code: "subscription_required";
                }, {
                    message: string;
                    annotation_code: "subscription_required";
                }>, "many">;
            }, "strip", z.ZodTypeAny, {
                display_name: string;
                manufacturer_id: string;
                integration: "stable" | "beta" | "planned" | "unsupported" | "inquire";
                integration_support_level: "stable" | "beta" | "planned" | "unsupported" | "inquire";
                is_connect_webview_supported: boolean;
                requires_seam_support_to_add_account: boolean;
                device_model_count: number;
                annotations: {
                    message: string;
                    annotation_code: "subscription_required";
                }[];
                logo?: {
                    url: string;
                    width: number;
                    height: number;
                } | undefined;
            }, {
                display_name: string;
                manufacturer_id: string;
                integration: "stable" | "beta" | "planned" | "unsupported" | "inquire";
                integration_support_level: "stable" | "beta" | "planned" | "unsupported" | "inquire";
                is_connect_webview_supported: boolean;
                requires_seam_support_to_add_account: boolean;
                device_model_count: number;
                annotations: {
                    message: string;
                    annotation_code: "subscription_required";
                }[];
                logo?: {
                    url: string;
                    width: number;
                    height: number;
                } | undefined;
            }>, "many">;
        }, "strip", z.ZodTypeAny, {
            manufacturers: {
                display_name: string;
                manufacturer_id: string;
                integration: "stable" | "beta" | "planned" | "unsupported" | "inquire";
                integration_support_level: "stable" | "beta" | "planned" | "unsupported" | "inquire";
                is_connect_webview_supported: boolean;
                requires_seam_support_to_add_account: boolean;
                device_model_count: number;
                annotations: {
                    message: string;
                    annotation_code: "subscription_required";
                }[];
                logo?: {
                    url: string;
                    width: number;
                    height: number;
                } | undefined;
            }[];
        }, {
            manufacturers: {
                display_name: string;
                manufacturer_id: string;
                integration: "stable" | "beta" | "planned" | "unsupported" | "inquire";
                integration_support_level: "stable" | "beta" | "planned" | "unsupported" | "inquire";
                is_connect_webview_supported: boolean;
                requires_seam_support_to_add_account: boolean;
                device_model_count: number;
                annotations: {
                    message: string;
                    annotation_code: "subscription_required";
                }[];
                logo?: {
                    url: string;
                    width: number;
                    height: number;
                } | undefined;
            }[];
        }>;
    };
};

interface Routes {
    '/v1/device_models/get': {
        route: '/v1/device_models/get';
        method: 'GET' | 'OPTIONS';
        queryParams: {
            device_model_id: string;
        };
        jsonBody: {};
        commonParams: {};
        formData: {};
        jsonResponse: {
            device_model: {
                device_model_id: string;
                manufacturer: {
                    manufacturer_id: string;
                    display_name: string;
                    logo?: {
                        url: string;
                        width: number;
                        height: number;
                    } | undefined;
                    integration: 'stable' | 'beta' | 'planned' | 'unsupported' | 'inquire';
                    integration_support_level: 'stable' | 'beta' | 'planned' | 'unsupported' | 'inquire';
                    is_connect_webview_supported: boolean;
                    requires_seam_support_to_add_account: boolean;
                    annotations: Array<{
                        annotation_code: 'subscription_required';
                        message: string;
                    }>;
                };
                is_device_supported: boolean;
                display_name: string;
                description: string;
                product_url?: string | undefined;
                main_connection_type: 'wifi' | 'zwave' | 'zigbee' | 'unknown';
                hardware: {
                    has_physical_key?: boolean | undefined;
                };
                aesthetic_variants: Array<{
                    slug: string;
                    display_name: string;
                    primary_color_hex?: string | undefined;
                    manufacturer_sku?: string | undefined;
                    front_image?: {
                        url: string;
                        width: number;
                        height: number;
                    } | undefined;
                    back_image?: {
                        url: string;
                        width: number;
                        height: number;
                    } | undefined;
                    images: Array<{
                        url: string;
                        width: number;
                        height: number;
                    }>;
                }>;
                power_sources: Array<'battery' | 'hardwired' | 'mechanical_harvesting' | 'wireless' | 'ethernet'>;
            } & ({
                main_category: 'smartlock';
                physical_properties: {
                    lock_type: 'deadbolt' | 'lever' | 'mortise' | 'lockbox' | 'cylinder' | 'padlock' | 'locker' | 'unknown';
                    has_physical_key: boolean;
                    has_camera: boolean;
                };
                software_features: {
                    can_remotely_unlock: boolean;
                    can_program_access_codes: boolean;
                    can_program_access_schedules: boolean;
                    can_program_access_codes_offline: boolean;
                };
                can_remotely_lock?: true | undefined;
                can_remotely_unlock?: true | undefined;
                can_program_offline_access_codes?: true | undefined;
                can_program_online_access_codes?: true | undefined;
            } | {
                main_category: 'sensor';
                physical_properties: {
                    has_noise_sensor: boolean;
                    has_humidity_sensor: boolean;
                    has_temperature_sensor: boolean;
                    has_occupancy_detection: boolean;
                };
            } | {
                main_category: 'thermostat';
                physical_properties: {
                    available_modes: Array<'heat' | 'cool' | 'fan' | 'eco'>;
                    is_heat_pump_compatible: boolean;
                    has_occupancy_detection: boolean;
                    supports_demand_response: boolean;
                    has_humidity_sensor: boolean;
                    has_temperature_sensor: boolean;
                    supports_emergency_heating_mode: boolean;
                };
                software_features: {
                    can_program_climate_schedules: boolean;
                };
            } | {
                main_category: 'relay';
            } | {
                main_category: 'intercom';
                physical_properties: {
                    has_camera: boolean;
                    has_rfid_reader?: boolean;
                    has_nfc_reader?: boolean;
                    has_wiegand_interface?: boolean;
                };
                software_features: {
                    can_remotely_unlock: boolean;
                    can_program_access_codes: boolean;
                    can_unlock_with_face_recognition?: boolean;
                    supports_onvif?: boolean;
                };
            } | {
                main_category: 'accessory';
            });
        };
    };
    '/v1/device_models/list': {
        route: '/v1/device_models/list';
        method: 'GET' | 'OPTIONS';
        queryParams: {
            main_category?: ('smartlock' | 'sensor' | 'thermostat' | 'relay' | 'intercom' | 'accessory') | undefined;
            manufacturer_id?: string | undefined;
            manufacturer_ids?: string[] | undefined;
            integration_status?: ('stable' | 'beta' | 'planned' | 'unsupported' | 'inquire') | undefined;
            integration_support_levels?: Array<'stable' | 'beta' | 'planned' | 'unsupported' | 'inquire'> | undefined;
            text_search?: string | undefined;
            include_if?: string[] | undefined;
            exclude_if?: string[] | undefined;
        };
        jsonBody: {};
        commonParams: {};
        formData: {};
        jsonResponse: {
            device_models: Array<{
                device_model_id: string;
                manufacturer: {
                    manufacturer_id: string;
                    display_name: string;
                    logo?: {
                        url: string;
                        width: number;
                        height: number;
                    } | undefined;
                    integration: 'stable' | 'beta' | 'planned' | 'unsupported' | 'inquire';
                    integration_support_level: 'stable' | 'beta' | 'planned' | 'unsupported' | 'inquire';
                    is_connect_webview_supported: boolean;
                    requires_seam_support_to_add_account: boolean;
                    annotations: Array<{
                        annotation_code: 'subscription_required';
                        message: string;
                    }>;
                };
                is_device_supported: boolean;
                display_name: string;
                description: string;
                product_url?: string | undefined;
                main_connection_type: 'wifi' | 'zwave' | 'zigbee' | 'unknown';
                hardware: {
                    has_physical_key?: boolean | undefined;
                };
                aesthetic_variants: Array<{
                    slug: string;
                    display_name: string;
                    primary_color_hex?: string | undefined;
                    manufacturer_sku?: string | undefined;
                    front_image?: {
                        url: string;
                        width: number;
                        height: number;
                    } | undefined;
                    back_image?: {
                        url: string;
                        width: number;
                        height: number;
                    } | undefined;
                    images: Array<{
                        url: string;
                        width: number;
                        height: number;
                    }>;
                }>;
                power_sources: Array<'battery' | 'hardwired' | 'mechanical_harvesting' | 'wireless' | 'ethernet'>;
            } & ({
                main_category: 'smartlock';
                physical_properties: {
                    lock_type: 'deadbolt' | 'lever' | 'mortise' | 'lockbox' | 'cylinder' | 'padlock' | 'locker' | 'unknown';
                    has_physical_key: boolean;
                    has_camera: boolean;
                };
                software_features: {
                    can_remotely_unlock: boolean;
                    can_program_access_codes: boolean;
                    can_program_access_schedules: boolean;
                    can_program_access_codes_offline: boolean;
                };
                can_remotely_lock?: true | undefined;
                can_remotely_unlock?: true | undefined;
                can_program_offline_access_codes?: true | undefined;
                can_program_online_access_codes?: true | undefined;
            } | {
                main_category: 'sensor';
                physical_properties: {
                    has_noise_sensor: boolean;
                    has_humidity_sensor: boolean;
                    has_temperature_sensor: boolean;
                    has_occupancy_detection: boolean;
                };
            } | {
                main_category: 'thermostat';
                physical_properties: {
                    available_modes: Array<'heat' | 'cool' | 'fan' | 'eco'>;
                    is_heat_pump_compatible: boolean;
                    has_occupancy_detection: boolean;
                    supports_demand_response: boolean;
                    has_humidity_sensor: boolean;
                    has_temperature_sensor: boolean;
                    supports_emergency_heating_mode: boolean;
                };
                software_features: {
                    can_program_climate_schedules: boolean;
                };
            } | {
                main_category: 'relay';
            } | {
                main_category: 'intercom';
                physical_properties: {
                    has_camera: boolean;
                    has_rfid_reader?: boolean;
                    has_nfc_reader?: boolean;
                    has_wiegand_interface?: boolean;
                };
                software_features: {
                    can_remotely_unlock: boolean;
                    can_program_access_codes: boolean;
                    can_unlock_with_face_recognition?: boolean;
                    supports_onvif?: boolean;
                };
            } | {
                main_category: 'accessory';
            })>;
        };
    };
    '/v1/manufacturers/get': {
        route: '/v1/manufacturers/get';
        method: 'GET' | 'OPTIONS';
        queryParams: {
            manufacturer_id: string;
        };
        jsonBody: {};
        commonParams: {};
        formData: {};
        jsonResponse: {
            manufacturer: {
                manufacturer_id: string;
                display_name: string;
                logo?: {
                    url: string;
                    width: number;
                    height: number;
                } | undefined;
                integration: 'stable' | 'beta' | 'planned' | 'unsupported' | 'inquire';
                integration_support_level: 'stable' | 'beta' | 'planned' | 'unsupported' | 'inquire';
                is_connect_webview_supported: boolean;
                requires_seam_support_to_add_account: boolean;
                device_model_count: number;
                annotations: Array<{
                    annotation_code: 'subscription_required';
                    message: string;
                }>;
            };
        };
    };
    '/v1/manufacturers/list': {
        route: '/v1/manufacturers/list';
        method: 'GET' | 'OPTIONS';
        queryParams: {
            integration_status?: ('stable' | 'beta' | 'planned' | 'unsupported' | 'inquire') | undefined;
            integration_support_levels?: Array<'stable' | 'beta' | 'planned' | 'unsupported' | 'inquire'> | undefined;
            liqe_query?: string | undefined;
        };
        jsonBody: {};
        commonParams: {};
        formData: {};
        jsonResponse: {
            manufacturers: Array<{
                manufacturer_id: string;
                display_name: string;
                logo?: {
                    url: string;
                    width: number;
                    height: number;
                } | undefined;
                integration: 'stable' | 'beta' | 'planned' | 'unsupported' | 'inquire';
                integration_support_level: 'stable' | 'beta' | 'planned' | 'unsupported' | 'inquire';
                is_connect_webview_supported: boolean;
                requires_seam_support_to_add_account: boolean;
                device_model_count: number;
                annotations: Array<{
                    annotation_code: 'subscription_required';
                    message: string;
                }>;
            }>;
        };
    };
}
type RouteResponse<Path extends keyof Routes> = Routes[Path]['jsonResponse'];
type RouteRequestBody<Path extends keyof Routes> = Routes[Path]['jsonBody'] & Routes[Path]['commonParams'];
type RouteRequestParams<Path extends keyof Routes> = Routes[Path]['queryParams'] & Routes[Path]['commonParams'];

export { type DeviceCategory, type DeviceConnectionType, type DeviceModel, type ImageReference, type Manufacturer, type ManufacturerAnnotation, type ManufacturerAnnotationCode, type ManufacturerIntegrationSupportLevel, type RouteRequestBody, type RouteRequestParams, type RouteResponse, type Routes, routes, index as schemas };
