{"version":3,"sources":["../src/lib/seam/devicedb/models/index.ts","../src/lib/seam/devicedb/models/device-capability.ts","../src/lib/seam/devicedb/models/device-model.ts","../src/lib/seam/devicedb/models/hardware.ts","../src/lib/seam/devicedb/models/image-reference.ts","../src/lib/seam/devicedb/models/manufacturer.ts","../src/lib/seam/devicedb/route-specs.ts"],"names":["z"],"mappings":";;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACAA,SAAS,SAA0B;AAE5B,IAAM,0BAA0B,EACpC,OAAO;AAAA,EACN,qBAAqB,EAAE,QAAQ;AAAA,EAC/B,mBAAmB,EAAE,QAAQ;AAAA,EAC7B,kCAAkC,EAAE,QAAQ;AAAA,EAC5C,iCAAiC,EAAE,QAAQ;AAC7C,CAAC,EACA,QAAQ;AAEX,IAAM,oCAGF;AAAA,EACF,mBAAmB,EAAE,QAAQ,IAAI;AAAA,EACjC,qBAAqB,EAAE,QAAQ,IAAI;AAAA,EACnC,kCAAkC,EAAE,QAAQ,IAAI;AAAA,EAChD,iCAAiC,EAAE,QAAQ,IAAI;AACjD;AAEO,IAAM,gCAAgC,EAC1C,OAAO,iCAAiC,EACxC,QAAQ;;;ACvBX,SAAS,KAAAA,UAAS;;;ACAlB,SAAS,KAAAA,UAAS;AAEX,IAAM,WAAWA,GACrB,OAAO;AAAA,EACN,kBAAkBA,GAAE,QAAQ;AAC9B,CAAC,EACA,QAAQ;;;ACNX,SAAS,KAAAA,UAAS;AAEX,IAAM,kBAAkBA,GAAE,OAAO;AAAA,EACtC,KAAKA,GAAE,OAAO,EAAE,IAAI;AAAA,EACpB,OAAOA,GAAE,OAAO;AAAA,EAChB,QAAQA,GAAE,OAAO;AACnB,CAAC;;;ACND,SAAS,KAAAA,UAAS;AAIX,IAAM,yCAAyCA,GAAE,KAAK;AAAA,EAC3D;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF,CAAC;AAMM,IAAM,+BAA+BA,GAAE,KAAK,CAAC,uBAAuB,CAAC;AAMrE,IAAM,0BAA0BA,GAAE,OAAO;AAAA,EAC9C,iBAAiB;AAAA,EACjB,SAASA,GAAE,OAAO,EAAE,KAAK,EAAE,SAAS;AACtC,CAAC;AAIM,IAAM,eAAeA,GAAE,OAAO;AAAA,EACnC,iBAAiBA,GAAE,OAAO,EAAE,KAAK;AAAA,EACjC,cAAcA,GAAE,OAAO;AAAA,EACvB,MAAM,gBAAgB,SAAS;AAAA;AAAA,EAE/B,aAAa;AAAA,EACb,2BAA2B;AAAA,EAC3B,8BAA8BA,GAAE,QAAQ;AAAA,EACxC,sCAAsCA,GAAE,QAAQ;AAAA,EAChD,oBAAoBA,GAAE,OAAO;AAAA,EAC7B,aAAaA,GAAE,MAAM,uBAAuB;AAC9C,CAAC;;;AHjCM,IAAM,kBAAkBA,GAAE,KAAK;AAAA,EACpC;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF,CAAC;AAIM,IAAM,yBAAyBA,GAAE,KAAK;AAAA,EAC3C;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF,CAAC;AAID,IAAM,YAAYA,GACf,OAAO;AAAA,EACN,eAAeA,GAAE,QAAQ,gBAAgB,KAAK,SAAS;AAAA,EACvD,qBAAqBA,GAAE,OAAO;AAAA,IAC5B,WAAWA,GAAE,KAAK;AAAA,MAChB;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACF,CAAC;AAAA,IACD,kBAAkBA,GAAE,QAAQ;AAAA,IAC5B,YAAYA,GAAE,QAAQ;AAAA,EACxB,CAAC;AAAA,EACD,mBAAmBA,GAAE,OAAO;AAAA,IAC1B,qBAAqBA,GAAE,QAAQ;AAAA,IAC/B,0BAA0BA,GAAE,QAAQ;AAAA,IACpC,8BAA8BA,GAAE,QAAQ;AAAA,IACxC,kCAAkCA,GAAE,QAAQ;AAAA,EAC9C,CAAC;AACH,CAAC,EACA;AAAA,EACC,8BAA8B,KAAK;AAAA,IACjC,mBAAmB;AAAA,IACnB,qBAAqB;AAAA,IACrB,kCAAkC;AAAA,IAClC,iCAAiC;AAAA,EACnC,CAAC;AACH;AAEF,IAAM,SAASA,GAAE,OAAO;AAAA,EACtB,eAAeA,GAAE,QAAQ,gBAAgB,KAAK,MAAM;AAAA,EACpD,qBAAqBA,GAAE,OAAO;AAAA,IAC5B,kBAAkBA,GAAE,QAAQ;AAAA,IAC5B,qBAAqBA,GAAE,QAAQ;AAAA,IAC/B,wBAAwBA,GAAE,QAAQ;AAAA,IAClC,yBAAyBA,GAAE,QAAQ;AAAA,EACrC,CAAC;AACH,CAAC;AAEM,IAAM,aAAaA,GAAE,OAAO;AAAA,EACjC,eAAeA,GAAE,QAAQ,gBAAgB,KAAK,UAAU;AAAA,EACxD,qBAAqBA,GAAE,OAAO;AAAA,IAC5B,iBAAiBA,GAAE,KAAK,CAAC,QAAQ,QAAQ,OAAO,KAAK,CAAC,EAAE,MAAM;AAAA,IAC9D,yBAAyBA,GAAE,QAAQ;AAAA,IACnC,yBAAyBA,GAAE,QAAQ;AAAA,IACnC,0BAA0BA,GAAE,QAAQ;AAAA,IACpC,qBAAqBA,GAAE,QAAQ;AAAA,IAC/B,wBAAwBA,GAAE,QAAQ;AAAA,IAClC,iCAAiCA,GAAE,QAAQ;AAAA,EAC7C,CAAC;AAAA,EACD,mBAAmBA,GAAE,OAAO;AAAA,IAC1B,+BAA+BA,GAAE,QAAQ;AAAA,EAC3C,CAAC;AACH,CAAC;AAID,IAAM,QAAQA,GAAE,OAAO;AAAA,EACrB,eAAeA,GAAE,QAAQ,gBAAgB,KAAK,KAAK;AACrD,CAAC;AAED,IAAM,WAAWA,GAAE,OAAO;AAAA,EACxB,eAAeA,GAAE,QAAQ,gBAAgB,KAAK,QAAQ;AAAA,EACtD,qBAAqBA,GAAE,OAAO;AAAA,IAC5B,YAAYA,GAAE,QAAQ;AAAA,IACtB,iBAAiBA,GAAE,QAAQ,EAAE,QAAQ,KAAK;AAAA,IAC1C,gBAAgBA,GAAE,QAAQ,EAAE,QAAQ,KAAK;AAAA,IACzC,uBAAuBA,GAAE,QAAQ,EAAE,QAAQ,KAAK;AAAA,EAClD,CAAC;AAAA,EACD,mBAAmBA,GAAE,OAAO;AAAA,IAC1B,qBAAqBA,GAAE,QAAQ;AAAA,IAC/B,0BAA0BA,GAAE,QAAQ;AAAA,IACpC,kCAAkCA,GAAE,QAAQ,EAAE,QAAQ,KAAK;AAAA,IAC3D,gBAAgBA,GAAE,QAAQ,EAAE,QAAQ,KAAK;AAAA,EAC3C,CAAC;AACH,CAAC;AAED,IAAM,YAAYA,GAAE,OAAO;AAAA,EACzB,eAAeA,GAAE,QAAQ,gBAAgB,KAAK,SAAS;AACzD,CAAC;AAEM,IAAM,4CAA4CA,GAAE;AAAA,EACzD;AAAA,EACA,CAAC,WAAW,QAAQ,YAAY,OAAO,UAAU,SAAS;AAC5D;AAEO,IAAM,uBAAuBA,GAAE,OAAO;AAAA,EAC3C,iBAAiBA,GAAE,OAAO,EAAE,KAAK;AAAA,EACjC,cAAc,aAAa,KAAK;AAAA,IAC9B,oBAAoB;AAAA,EACtB,CAAC;AAAA,EACD,qBAAqBA,GAAE,QAAQ;AAAA,EAC/B,cAAcA,GAAE,OAAO;AAAA,EACvB,aAAaA,GAAE,OAAO;AAAA,EACtB,aAAaA,GAAE,OAAO,EAAE,SAAS;AAAA,EACjC,sBAAsB;AAAA,EACtB;AAAA,EACA,oBAAoBA,GACjB,OAAO;AAAA,IACN,MAAMA,GAAE,OAAO;AAAA,IACf,cAAcA,GAAE,OAAO;AAAA,IACvB,mBAAmBA,GAAE,OAAO,EAAE,SAAS;AAAA,IACvC,kBAAkBA,GAAE,OAAO,EAAE,SAAS;AAAA,IACtC,aAAa,gBAAgB,SAAS;AAAA,IACtC,YAAY,gBAAgB,SAAS;AAAA,IACrC,QAAQ,gBAAgB,MAAM;AAAA,EAChC,CAAC,EACA,MAAM;AAAA,EACT,eAAeA,GACZ,KAAK;AAAA,IACJ;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF,CAAC,EACA,MAAM;AACX,CAAC;AAIM,IAAM,kBAAkB,qBAAqB;AAAA,EAClD;AACF;;;AI1JA,SAAS,KAAAA,UAAS;AAIlB,IAAM,WAAWA,GAAE,OAAO,EAAE,MAAM,yBAAyB;AAEpD,IAAM,SAAS;AAAA,EACpB,6BAA6B;AAAA,IAC3B,MAAM;AAAA,IACN,SAAS,CAAC,OAAO,SAAS;AAAA,IAC1B,aAAaA,GAAE,OAAO;AAAA,MACpB,iBAAiBA,GAAE,OAAO,EAAE,KAAK;AAAA,IACnC,CAAC;AAAA,IACD,cAAcA,GAAE,OAAO;AAAA,MACrB,cAAsB;AAAA,IACxB,CAAC;AAAA,EACH;AAAA,EACA,8BAA8B;AAAA,IAC5B,MAAM;AAAA,IACN,SAAS,CAAC,OAAO,SAAS;AAAA,IAC1B,aAAaA,GAAE,OAAO;AAAA,MACpB,eAAuB,gBAAgB,SAAS;AAAA,MAChD,iBAAiBA,GAAE,OAAO,EAAE,KAAK,EAAE,SAAS;AAAA,MAC5C,kBAAkBA,GAAE,OAAO,EAAE,KAAK,EAAE,MAAM,EAAE,SAAS;AAAA;AAAA,MAErD,oBAA4B,aAAa,MAAM,YAAY,SAAS;AAAA,MACpE,4BAA4BA,GACzB,MAAc,sCAAsC,EACpD,SAAS;AAAA,MACZ,aAAaA,GAAE,OAAO,EAAE,SAAS;AAAA,MACjC,YAAYA,GAAE,MAAM,QAAQ,EAAE,SAAS;AAAA,MACvC,YAAYA,GAAE,MAAM,QAAQ,EAAE,SAAS;AAAA,IACzC,CAAC;AAAA,IACD,cAAcA,GAAE,OAAO;AAAA,MACrB,eAAuB,gBAAgB,MAAM;AAAA,IAC/C,CAAC;AAAA,EACH;AAAA,EACA,6BAA6B;AAAA,IAC3B,MAAM;AAAA,IACN,SAAS,CAAC,OAAO,SAAS;AAAA,IAC1B,aAAaA,GAAE,OAAO;AAAA,MACpB,iBAAiBA,GAAE,OAAO,EAAE,KAAK;AAAA,IACnC,CAAC;AAAA,IACD,cAAcA,GAAE,OAAO;AAAA,MACrB;AAAA,IACF,CAAC;AAAA,EACH;AAAA,EACA,8BAA8B;AAAA,IAC5B,MAAM;AAAA,IACN,SAAS,CAAC,OAAO,SAAS;AAAA,IAC1B,aAAaA,GAAE,OAAO;AAAA;AAAA,MAEpB,oBAA4B,aAAa,MAAM,YAAY,SAAS;AAAA,MACpE,4BAA4BA,GACzB,MAAc,sCAAsC,EACpD,SAAS;AAAA,MACZ,YAAYA,GAAE,OAAO,EAAE,SAAS;AAAA,IAClC,CAAC;AAAA,IACD,cAAcA,GAAE,OAAO;AAAA,MACrB,eAAuB,aAAa,MAAM;AAAA,IAC5C,CAAC;AAAA,EACH;AACF","sourcesContent":["export { device_capability_flags } from './device-capability.js'\nexport * from './device-model.js'\nexport * from './image-reference.js'\nexport * from './manufacturer.js'\n","import { z, type ZodLiteral } from 'zod'\n\nexport const device_capability_flags = z\n  .object({\n    can_remotely_unlock: z.boolean(),\n    can_remotely_lock: z.boolean(),\n    can_program_offline_access_codes: z.boolean(),\n    can_program_online_access_codes: z.boolean(),\n  })\n  .partial()\n\nconst device_model_capability_flags_map: Record<\n  keyof z.infer<typeof device_capability_flags>,\n  ZodLiteral<true>\n> = {\n  can_remotely_lock: z.literal(true),\n  can_remotely_unlock: z.literal(true),\n  can_program_offline_access_codes: z.literal(true),\n  can_program_online_access_codes: z.literal(true),\n}\n\nexport const device_model_capability_flags = z\n  .object(device_model_capability_flags_map)\n  .partial()\n","import { z } from 'zod'\n\nimport { device_model_capability_flags } from './device-capability.js'\nimport { hardware } from './hardware.js'\nimport { image_reference } from './image-reference.js'\nimport { manufacturer } from './manufacturer.js'\n\nexport const device_category = z.enum([\n  'smartlock',\n  'sensor',\n  'thermostat',\n  'relay',\n  'intercom',\n  'accessory',\n])\n\nexport type DeviceCategory = z.infer<typeof device_category>\n\nexport const device_connection_type = z.enum([\n  'wifi',\n  'zwave',\n  'zigbee',\n  'unknown',\n])\n\nexport type DeviceConnectionType = z.infer<typeof device_connection_type>\n\nconst smartlock = z\n  .object({\n    main_category: z.literal(device_category.enum.smartlock),\n    physical_properties: z.object({\n      lock_type: z.enum([\n        'deadbolt',\n        'lever',\n        'mortise',\n        'lockbox',\n        'cylinder',\n        'padlock',\n        'locker',\n        'unknown',\n      ]),\n      has_physical_key: z.boolean(),\n      has_camera: z.boolean(),\n    }),\n    software_features: z.object({\n      can_remotely_unlock: z.boolean(),\n      can_program_access_codes: z.boolean(),\n      can_program_access_schedules: z.boolean(),\n      can_program_access_codes_offline: z.boolean(),\n    }),\n  })\n  .merge(\n    device_model_capability_flags.pick({\n      can_remotely_lock: true,\n      can_remotely_unlock: true,\n      can_program_offline_access_codes: true,\n      can_program_online_access_codes: true,\n    }),\n  )\n\nconst sensor = z.object({\n  main_category: z.literal(device_category.enum.sensor),\n  physical_properties: z.object({\n    has_noise_sensor: z.boolean(),\n    has_humidity_sensor: z.boolean(),\n    has_temperature_sensor: z.boolean(),\n    has_occupancy_detection: z.boolean(),\n  }),\n})\n\nexport const thermostat = z.object({\n  main_category: z.literal(device_category.enum.thermostat),\n  physical_properties: z.object({\n    available_modes: z.enum(['heat', 'cool', 'fan', 'eco']).array(),\n    is_heat_pump_compatible: z.boolean(),\n    has_occupancy_detection: z.boolean(),\n    supports_demand_response: z.boolean(),\n    has_humidity_sensor: z.boolean(),\n    has_temperature_sensor: z.boolean(),\n    supports_emergency_heating_mode: z.boolean(),\n  }),\n  software_features: z.object({\n    can_program_climate_schedules: z.boolean(),\n  }),\n})\n\nexport type ThermostatProperties = z.infer<typeof thermostat>\n\nconst relay = z.object({\n  main_category: z.literal(device_category.enum.relay),\n})\n\nconst intercom = z.object({\n  main_category: z.literal(device_category.enum.intercom),\n  physical_properties: z.object({\n    has_camera: z.boolean(),\n    has_rfid_reader: z.boolean().default(false),\n    has_nfc_reader: z.boolean().default(false),\n    has_wiegand_interface: z.boolean().default(false),\n  }),\n  software_features: z.object({\n    can_remotely_unlock: z.boolean(),\n    can_program_access_codes: z.boolean(),\n    can_unlock_with_face_recognition: z.boolean().default(false),\n    supports_onvif: z.boolean().default(false),\n  }),\n})\n\nconst accessory = z.object({\n  main_category: z.literal(device_category.enum.accessory),\n})\n\nexport const device_model_category_specific_properties = z.discriminatedUnion(\n  'main_category',\n  [smartlock, sensor, thermostat, relay, intercom, accessory],\n)\n\nexport const base_device_model_v1 = z.object({\n  device_model_id: z.string().uuid(),\n  manufacturer: manufacturer.omit({\n    device_model_count: true,\n  }),\n  is_device_supported: z.boolean(),\n  display_name: z.string(),\n  description: z.string(),\n  product_url: z.string().optional(),\n  main_connection_type: device_connection_type,\n  hardware,\n  aesthetic_variants: z\n    .object({\n      slug: z.string(),\n      display_name: z.string(),\n      primary_color_hex: z.string().optional(),\n      manufacturer_sku: z.string().optional(),\n      front_image: image_reference.optional(),\n      back_image: image_reference.optional(),\n      images: image_reference.array(),\n    })\n    .array(),\n  power_sources: z\n    .enum([\n      'battery',\n      'hardwired',\n      'mechanical_harvesting',\n      'wireless',\n      'ethernet',\n    ])\n    .array(),\n})\n\nexport type BaseDeviceModel = z.infer<typeof base_device_model_v1>\n\nexport const device_model_v1 = base_device_model_v1.and(\n  device_model_category_specific_properties,\n)\n\nexport type DeviceModel = z.infer<typeof device_model_v1>\n","import { z } from 'zod'\n\nexport const hardware = z\n  .object({\n    has_physical_key: z.boolean(),\n  })\n  .partial()\n","import { z } from 'zod'\n\nexport const image_reference = z.object({\n  url: z.string().url(),\n  width: z.number(),\n  height: z.number(),\n})\n\nexport type ImageReference = z.infer<typeof image_reference>\n","import { z } from 'zod'\n\nimport { image_reference } from './image-reference.js'\n\nexport const manufacturer_integration_support_level = z.enum([\n  'stable',\n  'beta',\n  'planned',\n  'unsupported',\n  'inquire',\n])\n\nexport type ManufacturerIntegrationSupportLevel = z.infer<\n  typeof manufacturer_integration_support_level\n>\n\nexport const manufacturer_annotation_code = z.enum(['subscription_required'])\n\nexport type ManufacturerAnnotationCode = z.infer<\n  typeof manufacturer_annotation_code\n>\n\nexport const manufacturer_annotation = z.object({\n  annotation_code: manufacturer_annotation_code,\n  message: z.string().trim().nonempty(),\n})\n\nexport type ManufacturerAnnotation = z.infer<typeof manufacturer_annotation>\n\nexport const manufacturer = z.object({\n  manufacturer_id: z.string().uuid(),\n  display_name: z.string(),\n  logo: image_reference.optional(),\n  /** @deprecated */\n  integration: manufacturer_integration_support_level,\n  integration_support_level: manufacturer_integration_support_level,\n  is_connect_webview_supported: z.boolean(),\n  requires_seam_support_to_add_account: z.boolean(),\n  device_model_count: z.number(),\n  annotations: z.array(manufacturer_annotation),\n})\n\nexport type Manufacturer = z.infer<typeof manufacturer>\n","import { z } from 'zod'\n\nimport * as schemas from './models/index.js'\n\nconst dot_path = z.string().regex(/^([a-z])[a-z_.]*[a-z]+$/)\n\nexport const routes = {\n  '/api/v1/device_models/get': {\n    auth: 'publishable_key',\n    methods: ['GET', 'OPTIONS'],\n    queryParams: z.object({\n      device_model_id: z.string().uuid(),\n    }),\n    jsonResponse: z.object({\n      device_model: schemas.device_model_v1,\n    }),\n  },\n  '/api/v1/device_models/list': {\n    auth: 'publishable_key',\n    methods: ['GET', 'OPTIONS'],\n    queryParams: z.object({\n      main_category: schemas.device_category.optional(),\n      manufacturer_id: z.string().uuid().optional(),\n      manufacturer_ids: z.string().uuid().array().optional(),\n      /** @deprecated */\n      integration_status: schemas.manufacturer.shape.integration.optional(),\n      integration_support_levels: z\n        .array(schemas.manufacturer_integration_support_level)\n        .optional(),\n      text_search: z.string().optional(),\n      include_if: z.array(dot_path).optional(),\n      exclude_if: z.array(dot_path).optional(),\n    }),\n    jsonResponse: z.object({\n      device_models: schemas.device_model_v1.array(),\n    }),\n  },\n  '/api/v1/manufacturers/get': {\n    auth: 'publishable_key',\n    methods: ['GET', 'OPTIONS'],\n    queryParams: z.object({\n      manufacturer_id: z.string().uuid(),\n    }),\n    jsonResponse: z.object({\n      manufacturer: schemas.manufacturer,\n    }),\n  },\n  '/api/v1/manufacturers/list': {\n    auth: 'publishable_key',\n    methods: ['GET', 'OPTIONS'],\n    queryParams: z.object({\n      /** @deprecated */\n      integration_status: schemas.manufacturer.shape.integration.optional(),\n      integration_support_levels: z\n        .array(schemas.manufacturer_integration_support_level)\n        .optional(),\n      liqe_query: z.string().optional(),\n    }),\n    jsonResponse: z.object({\n      manufacturers: schemas.manufacturer.array(),\n    }),\n  },\n} as const\n"]}