import { z } from 'zod';
export declare const access_code_code_constraint: z.ZodObject<{
    constraint_type: z.ZodEnum<["no_zeros", "cannot_start_with_12", "no_triple_consecutive_ints", "cannot_specify_pin_code", "pin_code_matches_existing_set", "start_date_in_future", "no_ascending_or_descending_sequence", "at_least_three_unique_digits"]>;
}, "strip", z.ZodTypeAny, {
    constraint_type: "no_zeros" | "cannot_start_with_12" | "no_triple_consecutive_ints" | "cannot_specify_pin_code" | "pin_code_matches_existing_set" | "start_date_in_future" | "no_ascending_or_descending_sequence" | "at_least_three_unique_digits";
}, {
    constraint_type: "no_zeros" | "cannot_start_with_12" | "no_triple_consecutive_ints" | "cannot_specify_pin_code" | "pin_code_matches_existing_set" | "start_date_in_future" | "no_ascending_or_descending_sequence" | "at_least_three_unique_digits";
}>;
export declare const access_code_name_constraint: z.ZodObject<{
    constraint_type: z.ZodLiteral<"name_length">;
    min_length: z.ZodOptional<z.ZodNumber>;
    max_length: z.ZodOptional<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    constraint_type: "name_length";
    min_length?: number | undefined;
    max_length?: number | undefined;
}, {
    constraint_type: "name_length";
    min_length?: number | undefined;
    max_length?: number | undefined;
}>;
export declare const access_code_constraint: z.ZodUnion<[z.ZodObject<{
    constraint_type: z.ZodEnum<["no_zeros", "cannot_start_with_12", "no_triple_consecutive_ints", "cannot_specify_pin_code", "pin_code_matches_existing_set", "start_date_in_future", "no_ascending_or_descending_sequence", "at_least_three_unique_digits"]>;
}, "strip", z.ZodTypeAny, {
    constraint_type: "no_zeros" | "cannot_start_with_12" | "no_triple_consecutive_ints" | "cannot_specify_pin_code" | "pin_code_matches_existing_set" | "start_date_in_future" | "no_ascending_or_descending_sequence" | "at_least_three_unique_digits";
}, {
    constraint_type: "no_zeros" | "cannot_start_with_12" | "no_triple_consecutive_ints" | "cannot_specify_pin_code" | "pin_code_matches_existing_set" | "start_date_in_future" | "no_ascending_or_descending_sequence" | "at_least_three_unique_digits";
}>, z.ZodObject<{
    constraint_type: z.ZodLiteral<"name_length">;
    min_length: z.ZodOptional<z.ZodNumber>;
    max_length: z.ZodOptional<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    constraint_type: "name_length";
    min_length?: number | undefined;
    max_length?: number | undefined;
}, {
    constraint_type: "name_length";
    min_length?: number | undefined;
    max_length?: number | undefined;
}>]>;
export type AccessCodeConstraint = z.infer<typeof access_code_constraint>;
export declare const access_code_capability_properties: z.ZodObject<{
    _experimental_supported_code_from_access_codes_lengths: z.ZodOptional<z.ZodArray<z.ZodNumber, "many">>;
    code_constraints: z.ZodOptional<z.ZodArray<z.ZodUnion<[z.ZodObject<{
        constraint_type: z.ZodEnum<["no_zeros", "cannot_start_with_12", "no_triple_consecutive_ints", "cannot_specify_pin_code", "pin_code_matches_existing_set", "start_date_in_future", "no_ascending_or_descending_sequence", "at_least_three_unique_digits"]>;
    }, "strip", z.ZodTypeAny, {
        constraint_type: "no_zeros" | "cannot_start_with_12" | "no_triple_consecutive_ints" | "cannot_specify_pin_code" | "pin_code_matches_existing_set" | "start_date_in_future" | "no_ascending_or_descending_sequence" | "at_least_three_unique_digits";
    }, {
        constraint_type: "no_zeros" | "cannot_start_with_12" | "no_triple_consecutive_ints" | "cannot_specify_pin_code" | "pin_code_matches_existing_set" | "start_date_in_future" | "no_ascending_or_descending_sequence" | "at_least_three_unique_digits";
    }>, z.ZodObject<{
        constraint_type: z.ZodLiteral<"name_length">;
        min_length: z.ZodOptional<z.ZodNumber>;
        max_length: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        constraint_type: "name_length";
        min_length?: number | undefined;
        max_length?: number | undefined;
    }, {
        constraint_type: "name_length";
        min_length?: number | undefined;
        max_length?: number | undefined;
    }>]>, "many">>;
    supported_code_lengths: z.ZodOptional<z.ZodArray<z.ZodNumber, "many">>;
    max_active_codes_supported: z.ZodOptional<z.ZodNumber>;
    supports_backup_access_code_pool: z.ZodOptional<z.ZodBoolean>;
    has_native_entry_events: z.ZodOptional<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    _experimental_supported_code_from_access_codes_lengths?: number[] | undefined;
    code_constraints?: ({
        constraint_type: "no_zeros" | "cannot_start_with_12" | "no_triple_consecutive_ints" | "cannot_specify_pin_code" | "pin_code_matches_existing_set" | "start_date_in_future" | "no_ascending_or_descending_sequence" | "at_least_three_unique_digits";
    } | {
        constraint_type: "name_length";
        min_length?: number | undefined;
        max_length?: number | undefined;
    })[] | undefined;
    supported_code_lengths?: number[] | undefined;
    max_active_codes_supported?: number | undefined;
    supports_backup_access_code_pool?: boolean | undefined;
    has_native_entry_events?: boolean | undefined;
}, {
    _experimental_supported_code_from_access_codes_lengths?: number[] | undefined;
    code_constraints?: ({
        constraint_type: "no_zeros" | "cannot_start_with_12" | "no_triple_consecutive_ints" | "cannot_specify_pin_code" | "pin_code_matches_existing_set" | "start_date_in_future" | "no_ascending_or_descending_sequence" | "at_least_three_unique_digits";
    } | {
        constraint_type: "name_length";
        min_length?: number | undefined;
        max_length?: number | undefined;
    })[] | undefined;
    supported_code_lengths?: number[] | undefined;
    max_active_codes_supported?: number | undefined;
    supports_backup_access_code_pool?: boolean | undefined;
    has_native_entry_events?: boolean | undefined;
}>;
