import { createClient } from './client.js';
import { isSeamHttpMultiWorkspaceOptionsWithClient, isSeamHttpMultiWorkspaceOptionsWithConsoleSessionToken, isSeamHttpMultiWorkspaceOptionsWithPersonalAccessToken, SeamHttpMultiWorkspaceInvalidOptionsError, } from './options.js';
import { limitToSeamHttpRequestOptions, parseOptions } from './parse-options.js';
import { SeamHttpWorkspaces } from './routes/index.js';
export class SeamHttpMultiWorkspace {
    constructor(options) {
        const opts = parseOptions(options);
        this.client = 'client' in opts ? opts.client : createClient(opts);
        this.defaults = limitToSeamHttpRequestOptions(opts);
    }
    static fromClient(client, options = {}) {
        const constructorOptions = { ...options, client };
        if (!isSeamHttpMultiWorkspaceOptionsWithClient(constructorOptions)) {
            throw new SeamHttpMultiWorkspaceInvalidOptionsError('Missing client');
        }
        return new SeamHttpMultiWorkspace(constructorOptions);
    }
    static fromConsoleSessionToken(consoleSessionToken, options = {}) {
        const constructorOptions = { ...options, consoleSessionToken };
        if (!isSeamHttpMultiWorkspaceOptionsWithConsoleSessionToken(constructorOptions)) {
            throw new SeamHttpMultiWorkspaceInvalidOptionsError('Missing consoleSessionToken');
        }
        return new SeamHttpMultiWorkspace(constructorOptions);
    }
    static fromPersonalAccessToken(personalAccessToken, options = {}) {
        const constructorOptions = { ...options, personalAccessToken };
        if (!isSeamHttpMultiWorkspaceOptionsWithPersonalAccessToken(constructorOptions)) {
            throw new SeamHttpMultiWorkspaceInvalidOptionsError('Missing personalAccessToken');
        }
        return new SeamHttpMultiWorkspace(constructorOptions);
    }
    get workspaces() {
        return SeamHttpWorkspaces.fromClient(this.client, this.defaults);
    }
}
//# sourceMappingURL=seam-http-multi-workspace.js.map