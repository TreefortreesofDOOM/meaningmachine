export class SeamHttpApiError extends Error {
    constructor(error, statusCode, requestId) {
        const { type, message, data } = error;
        super(message);
        this.name = this.constructor.name;
        this.code = type;
        this.statusCode = statusCode;
        this.requestId = requestId;
        if (data != null)
            this.data = data;
    }
}
export const isSeamHttpApiError = (error) => {
    return error instanceof SeamHttpApiError;
};
export class SeamHttpUnauthorizedError extends SeamHttpApiError {
    constructor(requestId) {
        const type = 'unauthorized';
        const status = 401;
        super({ type, message: 'Unauthorized' }, status, requestId);
        this.name = this.constructor.name;
        this.code = type;
        this.statusCode = status;
        this.requestId = requestId;
    }
}
export const isSeamHttpUnauthorizedError = (error) => {
    return error instanceof SeamHttpUnauthorizedError;
};
export class SeamHttpInvalidInputError extends SeamHttpApiError {
    constructor(error, statusCode, requestId) {
        super(error, statusCode, requestId);
        this.name = this.constructor.name;
        this.code = 'invalid_input';
    }
}
export const isSeamHttpInvalidInputError = (error) => {
    return error instanceof SeamHttpInvalidInputError;
};
//# sourceMappingURL=seam-http-error.js.map