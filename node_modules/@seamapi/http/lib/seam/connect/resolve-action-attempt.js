export const resolveActionAttempt = async (actionAttempt, actionAttempts, { timeout = 5000, pollingInterval = 500 }) => {
    let timeoutRef;
    const timeoutPromise = new Promise((_resolve, reject) => {
        timeoutRef = globalThis.setTimeout(() => {
            reject(new SeamActionAttemptTimeoutError(actionAttempt, timeout));
        }, timeout);
    });
    try {
        return await Promise.race([
            pollActionAttempt(actionAttempt, actionAttempts, { pollingInterval }),
            timeoutPromise,
        ]);
    }
    finally {
        if (timeoutRef != null)
            globalThis.clearTimeout(timeoutRef);
    }
};
const pollActionAttempt = async (actionAttempt, actionAttempts, options) => {
    if (isSuccessfulActionAttempt(actionAttempt)) {
        return actionAttempt;
    }
    if (isFailedActionAttempt(actionAttempt)) {
        throw new SeamActionAttemptFailedError(actionAttempt);
    }
    await new Promise((resolve) => setTimeout(resolve, options.pollingInterval));
    const nextActionAttempt = await actionAttempts.get({
        action_attempt_id: actionAttempt.action_attempt_id,
    });
    return await pollActionAttempt(nextActionAttempt, actionAttempts, options);
};
export const isSeamActionAttemptError = (error) => {
    return error instanceof SeamActionAttemptError;
};
export class SeamActionAttemptError extends Error {
    constructor(message, actionAttempt) {
        super(message);
        this.name = this.constructor.name;
        this.actionAttempt = actionAttempt;
    }
}
export const isSeamActionAttemptFailedError = (error) => {
    return error instanceof SeamActionAttemptFailedError;
};
export class SeamActionAttemptFailedError extends SeamActionAttemptError {
    constructor(actionAttempt) {
        super(actionAttempt.error.message, actionAttempt);
        this.name = this.constructor.name;
        this.code = actionAttempt.error.type;
    }
}
export const isSeamActionAttemptTimeoutError = (error) => {
    return error instanceof SeamActionAttemptTimeoutError;
};
export class SeamActionAttemptTimeoutError extends SeamActionAttemptError {
    constructor(actionAttempt, timeout) {
        super(`Timed out waiting for action action attempt after ${timeout}ms`, actionAttempt);
        this.name = this.constructor.name;
    }
}
const isSuccessfulActionAttempt = (actionAttempt) => actionAttempt.status === 'success';
const isFailedActionAttempt = (actionAttempt) => actionAttempt.status === 'error';
//# sourceMappingURL=resolve-action-attempt.js.map