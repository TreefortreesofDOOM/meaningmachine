import { isSeamHttpRequestOption } from './parse-options.js';
export const isSeamHttpMultiWorkspaceOptionsWithClient = (options) => isSeamHttpOptionsWithClient(options);
export const isSeamHttpOptionsWithClient = (options) => {
    if (!('client' in options))
        return false;
    if (options.client == null)
        return false;
    const keys = Object.keys(options).filter((k) => k !== 'client');
    if (keys.filter((k) => !isSeamHttpRequestOption(k)).length > 0) {
        throw new SeamHttpInvalidOptionsError(`The client option cannot be used with any other option, but received: ${keys.join(', ')}`);
    }
    return true;
};
export const isSeamHttpOptionsWithApiKey = (options) => {
    if (!('apiKey' in options))
        return false;
    if (options.apiKey == null)
        return false;
    if ('clientSessionToken' in options && options.clientSessionToken != null) {
        throw new SeamHttpInvalidOptionsError('The clientSessionToken option cannot be used with the apiKey option');
    }
    if ('consoleSessionToken' in options && options.consoleSessionToken != null) {
        throw new SeamHttpInvalidOptionsError('The consoleSessionToken option cannot be used with the apiKey option');
    }
    if ('personalAccessToken' in options && options.personalAccessToken != null) {
        throw new SeamHttpInvalidOptionsError('The personalAccessToken option cannot be used with the apiKey option');
    }
    return true;
};
export const isSeamHttpOptionsWithClientSessionToken = (options) => {
    if (!('clientSessionToken' in options))
        return false;
    if (options.clientSessionToken == null)
        return false;
    if ('apiKey' in options && options.apiKey != null) {
        throw new SeamHttpInvalidOptionsError('The apiKey option cannot be used with the clientSessionToken option');
    }
    if ('consoleSessionToken' in options && options.consoleSessionToken != null) {
        throw new SeamHttpInvalidOptionsError('The consoleSessionToken option cannot be used with the clientSessionToken option');
    }
    if ('personalAccessToken' in options && options.personalAccessToken != null) {
        throw new SeamHttpInvalidOptionsError('The personalAccessToken option cannot be used with the clientSessionToken option');
    }
    return true;
};
export const isSeamHttpMultiWorkspaceOptionsWithConsoleSessionToken = (options) => {
    if (!('consoleSessionToken' in options))
        return false;
    if (options.consoleSessionToken == null)
        return false;
    if ('apiKey' in options && options.apiKey != null) {
        throw new SeamHttpInvalidOptionsError('The apiKey option cannot be used with the consoleSessionToken option');
    }
    if ('clientSessionToken' in options && options.clientSessionToken != null) {
        throw new SeamHttpInvalidOptionsError('The clientSessionToken option cannot be used with the consoleSessionToken option');
    }
    if ('personalAccessToken' in options && options.personalAccessToken != null) {
        throw new SeamHttpInvalidOptionsError('The personalAccessToken option cannot be used with the consoleSessionToken option');
    }
    return true;
};
export const isSeamHttpOptionsWithConsoleSessionToken = (options) => {
    if (!isSeamHttpMultiWorkspaceOptionsWithConsoleSessionToken(options)) {
        return false;
    }
    if (!('workspaceId' in options) || options.workspaceId == null) {
        throw new SeamHttpInvalidOptionsError('Must pass a workspaceId when using a consoleSessionToken');
    }
    return true;
};
export const isSeamHttpMultiWorkspaceOptionsWithPersonalAccessToken = (options) => {
    if (!('personalAccessToken' in options))
        return false;
    if (options.personalAccessToken == null)
        return false;
    if ('apiKey' in options && options.apiKey != null) {
        throw new SeamHttpInvalidOptionsError('The apiKey option cannot be used with the personalAccessToken option');
    }
    if ('clientSessionToken' in options && options.clientSessionToken != null) {
        throw new SeamHttpInvalidOptionsError('The clientSessionToken option cannot be used with the personalAccessToken option');
    }
    if ('consoleSessionToken' in options && options.consoleSessionToken != null) {
        throw new SeamHttpInvalidOptionsError('The consoleSessionToken option cannot be used with the personalAccessToken option');
    }
    return true;
};
export const isSeamHttpOptionsWithPersonalAccessToken = (options) => {
    if (!isSeamHttpMultiWorkspaceOptionsWithPersonalAccessToken(options)) {
        return false;
    }
    if (!('workspaceId' in options) || options.workspaceId == null) {
        throw new SeamHttpInvalidOptionsError('Must pass a workspaceId when using a personalAccessToken');
    }
    return true;
};
export class SeamHttpInvalidOptionsError extends Error {
    constructor(message) {
        super(`SeamHttp received invalid options: ${message}`);
        this.name = this.constructor.name;
    }
}
export class SeamHttpMultiWorkspaceInvalidOptionsError extends SeamHttpInvalidOptionsError {
}
//# sourceMappingURL=options.js.map