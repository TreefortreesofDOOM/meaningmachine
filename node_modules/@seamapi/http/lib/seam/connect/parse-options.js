import { seamApiLtsVersion } from '../../../lib/lts-version.js';
import version from '../../../lib/version.js';
import { getAuthHeaders } from './auth.js';
import { isSeamHttpMultiWorkspaceOptionsWithClient, isSeamHttpOptionsWithClient, isSeamHttpOptionsWithClientSessionToken, } from './options.js';
export const defaultEndpoint = 'https://connect.getseam.com';
export const sdkHeaders = {
    'seam-sdk-name': 'seamapi/javascript-http',
    'seam-sdk-version': version,
    'seam-lts-version': seamApiLtsVersion,
};
export const parseOptions = (apiKeyOrOptions) => {
    const options = getNormalizedOptions(apiKeyOrOptions);
    if (isSeamHttpOptionsWithClient(options))
        return options;
    if (isSeamHttpMultiWorkspaceOptionsWithClient(options))
        return options;
    return {
        ...options,
        axiosOptions: {
            baseURL: options.endpoint ?? getEndpointFromEnv() ?? defaultEndpoint,
            withCredentials: isSeamHttpOptionsWithClientSessionToken(options),
            ...options.axiosOptions,
            headers: {
                ...getAuthHeaders(options),
                ...options.axiosOptions?.headers,
                ...sdkHeaders,
            },
        },
        axiosRetryOptions: {
            ...options.axiosRetryOptions,
        },
    };
};
const getNormalizedOptions = (apiKeyOrOptions) => {
    const options = typeof apiKeyOrOptions === 'string'
        ? { apiKey: apiKeyOrOptions }
        : apiKeyOrOptions;
    const requestOptions = {
        waitForActionAttempt: options.waitForActionAttempt ?? false,
    };
    if (isSeamHttpOptionsWithClient(options)) {
        return {
            ...options,
            ...requestOptions,
        };
    }
    const apiKey = 'apiKey' in options ? options.apiKey : getApiKeyFromEnv(options);
    return {
        ...options,
        ...(apiKey != null ? { apiKey } : {}),
        ...requestOptions,
    };
};
const getApiKeyFromEnv = (options) => {
    if ('clientSessionToken' in options && options.clientSessionToken != null) {
        return null;
    }
    if ('consoleSessionToken' in options && options.consoleSessionToken != null) {
        return null;
    }
    if ('personalAccessToken' in options && options.personalAccessToken != null) {
        return null;
    }
    return globalThis.process?.env?.SEAM_API_KEY;
};
const getEndpointFromEnv = () => {
    if (globalThis.process?.env?.SEAM_API_URL != null) {
        // eslint-disable-next-line no-console
        console.warn('Using the SEAM_API_URL environment variable is deprecated. Support will be remove in a later major version. Use SEAM_ENDPOINT instead.');
    }
    if (globalThis.process?.env?.SEAM_API_URL != null &&
        globalThis.process?.env?.SEAM_ENDPOINT != null) {
        // eslint-disable-next-line no-console
        console.warn('Detected both the SEAM_API_URL and SEAM_ENDPOINT environment variables. Using SEAM_ENDPOINT.');
    }
    return (globalThis.process?.env?.SEAM_ENDPOINT ??
        globalThis.process?.env?.SEAM_API_URL);
};
export const limitToSeamHttpRequestOptions = (options) => {
    return Object.keys(options)
        .filter(isSeamHttpRequestOption)
        .reduce((obj, key) => ({
        ...obj,
        [key]: options[key],
    }), {});
};
export const isSeamHttpRequestOption = (key) => {
    const keys = {
        waitForActionAttempt: true,
    };
    return Object.keys(keys).includes(key);
};
//# sourceMappingURL=parse-options.js.map