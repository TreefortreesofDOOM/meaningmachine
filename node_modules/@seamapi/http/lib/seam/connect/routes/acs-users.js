/*
 * Automatically generated by generate-routes.ts.
 * Do not edit this file or add other files to this directory.
 */
import { getAuthHeadersForClientSessionToken, warnOnInsecureuserIdentifierKey, } from '../../../../lib/seam/connect/auth.js';
import { createClient } from '../../../../lib/seam/connect/client.js';
import { isSeamHttpOptionsWithApiKey, isSeamHttpOptionsWithClient, isSeamHttpOptionsWithClientSessionToken, isSeamHttpOptionsWithConsoleSessionToken, isSeamHttpOptionsWithPersonalAccessToken, SeamHttpInvalidOptionsError, } from '../../../../lib/seam/connect/options.js';
import { limitToSeamHttpRequestOptions, parseOptions, } from '../../../../lib/seam/connect/parse-options.js';
import { SeamHttpRequest } from '../../../../lib/seam/connect/seam-http-request.js';
import { SeamHttpClientSessions } from './client-sessions.js';
export class SeamHttpAcsUsers {
    constructor(apiKeyOrOptions = {}) {
        const options = parseOptions(apiKeyOrOptions);
        this.client = 'client' in options ? options.client : createClient(options);
        this.defaults = limitToSeamHttpRequestOptions(options);
    }
    static fromClient(client, options = {}) {
        const constructorOptions = { ...options, client };
        if (!isSeamHttpOptionsWithClient(constructorOptions)) {
            throw new SeamHttpInvalidOptionsError('Missing client');
        }
        return new SeamHttpAcsUsers(constructorOptions);
    }
    static fromApiKey(apiKey, options = {}) {
        const constructorOptions = { ...options, apiKey };
        if (!isSeamHttpOptionsWithApiKey(constructorOptions)) {
            throw new SeamHttpInvalidOptionsError('Missing apiKey');
        }
        return new SeamHttpAcsUsers(constructorOptions);
    }
    static fromClientSessionToken(clientSessionToken, options = {}) {
        const constructorOptions = { ...options, clientSessionToken };
        if (!isSeamHttpOptionsWithClientSessionToken(constructorOptions)) {
            throw new SeamHttpInvalidOptionsError('Missing clientSessionToken');
        }
        return new SeamHttpAcsUsers(constructorOptions);
    }
    static async fromPublishableKey(publishableKey, userIdentifierKey, options = {}) {
        warnOnInsecureuserIdentifierKey(userIdentifierKey);
        const clientOptions = parseOptions({ ...options, publishableKey });
        if (isSeamHttpOptionsWithClient(clientOptions)) {
            throw new SeamHttpInvalidOptionsError('The client option cannot be used with SeamHttp.fromPublishableKey');
        }
        const client = createClient(clientOptions);
        const clientSessions = SeamHttpClientSessions.fromClient(client);
        const { token } = await clientSessions.getOrCreate({
            user_identifier_key: userIdentifierKey,
        });
        return SeamHttpAcsUsers.fromClientSessionToken(token, options);
    }
    static fromConsoleSessionToken(consoleSessionToken, workspaceId, options = {}) {
        const constructorOptions = { ...options, consoleSessionToken, workspaceId };
        if (!isSeamHttpOptionsWithConsoleSessionToken(constructorOptions)) {
            throw new SeamHttpInvalidOptionsError('Missing consoleSessionToken or workspaceId');
        }
        return new SeamHttpAcsUsers(constructorOptions);
    }
    static fromPersonalAccessToken(personalAccessToken, workspaceId, options = {}) {
        const constructorOptions = { ...options, personalAccessToken, workspaceId };
        if (!isSeamHttpOptionsWithPersonalAccessToken(constructorOptions)) {
            throw new SeamHttpInvalidOptionsError('Missing personalAccessToken or workspaceId');
        }
        return new SeamHttpAcsUsers(constructorOptions);
    }
    async updateClientSessionToken(clientSessionToken) {
        const { headers } = this.client.defaults;
        const authHeaders = getAuthHeadersForClientSessionToken({
            clientSessionToken,
        });
        for (const key of Object.keys(authHeaders)) {
            if (headers[key] == null) {
                throw new Error('Cannot update a clientSessionToken on a client created without a clientSessionToken');
            }
        }
        this.client.defaults.headers = { ...headers, ...authHeaders };
        const clientSessions = SeamHttpClientSessions.fromClient(this.client);
        await clientSessions.get();
    }
    addToAccessGroup(body) {
        return new SeamHttpRequest(this, {
            path: '/acs/users/add_to_access_group',
            method: 'post',
            body,
            responseKey: undefined,
        });
    }
    create(body) {
        return new SeamHttpRequest(this, {
            path: '/acs/users/create',
            method: 'post',
            body,
            responseKey: 'acs_user',
        });
    }
    delete(body) {
        return new SeamHttpRequest(this, {
            path: '/acs/users/delete',
            method: 'post',
            body,
            responseKey: undefined,
        });
    }
    get(body) {
        return new SeamHttpRequest(this, {
            path: '/acs/users/get',
            method: 'post',
            body,
            responseKey: 'acs_user',
        });
    }
    list(body) {
        return new SeamHttpRequest(this, {
            path: '/acs/users/list',
            method: 'post',
            body,
            responseKey: 'acs_users',
        });
    }
    listAccessibleEntrances(body) {
        return new SeamHttpRequest(this, {
            path: '/acs/users/list_accessible_entrances',
            method: 'post',
            body,
            responseKey: 'acs_entrances',
        });
    }
    removeFromAccessGroup(body) {
        return new SeamHttpRequest(this, {
            path: '/acs/users/remove_from_access_group',
            method: 'post',
            body,
            responseKey: undefined,
        });
    }
    revokeAccessToAllEntrances(body) {
        return new SeamHttpRequest(this, {
            path: '/acs/users/revoke_access_to_all_entrances',
            method: 'post',
            body,
            responseKey: undefined,
        });
    }
    suspend(body) {
        return new SeamHttpRequest(this, {
            path: '/acs/users/suspend',
            method: 'post',
            body,
            responseKey: undefined,
        });
    }
    unsuspend(body) {
        return new SeamHttpRequest(this, {
            path: '/acs/users/unsuspend',
            method: 'post',
            body,
            responseKey: undefined,
        });
    }
    update(body) {
        return new SeamHttpRequest(this, {
            path: '/acs/users/update',
            method: 'post',
            body,
            responseKey: undefined,
        });
    }
}
//# sourceMappingURL=acs-users.js.map