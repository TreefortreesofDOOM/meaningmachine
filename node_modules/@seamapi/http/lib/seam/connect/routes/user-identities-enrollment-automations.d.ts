import type { RouteRequestBody, RouteResponse } from '@seamapi/types/connect';
import type { SetNonNullable } from 'type-fest';
import { type Client } from '../../../../lib/seam/connect/client.js';
import { type SeamHttpFromPublishableKeyOptions, type SeamHttpOptions, type SeamHttpOptionsWithApiKey, type SeamHttpOptionsWithClient, type SeamHttpOptionsWithClientSessionToken, type SeamHttpOptionsWithConsoleSessionToken, type SeamHttpOptionsWithPersonalAccessToken, type SeamHttpRequestOptions } from '../../../../lib/seam/connect/options.js';
import { SeamHttpRequest } from '../../../../lib/seam/connect/seam-http-request.js';
export declare class SeamHttpUserIdentitiesEnrollmentAutomations {
    client: Client;
    readonly defaults: Required<SeamHttpRequestOptions>;
    constructor(apiKeyOrOptions?: string | SeamHttpOptions);
    static fromClient(client: SeamHttpOptionsWithClient['client'], options?: Omit<SeamHttpOptionsWithClient, 'client'>): SeamHttpUserIdentitiesEnrollmentAutomations;
    static fromApiKey(apiKey: SeamHttpOptionsWithApiKey['apiKey'], options?: Omit<SeamHttpOptionsWithApiKey, 'apiKey'>): SeamHttpUserIdentitiesEnrollmentAutomations;
    static fromClientSessionToken(clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken'], options?: Omit<SeamHttpOptionsWithClientSessionToken, 'clientSessionToken'>): SeamHttpUserIdentitiesEnrollmentAutomations;
    static fromPublishableKey(publishableKey: string, userIdentifierKey: string, options?: SeamHttpFromPublishableKeyOptions): Promise<SeamHttpUserIdentitiesEnrollmentAutomations>;
    static fromConsoleSessionToken(consoleSessionToken: SeamHttpOptionsWithConsoleSessionToken['consoleSessionToken'], workspaceId: SeamHttpOptionsWithConsoleSessionToken['workspaceId'], options?: Omit<SeamHttpOptionsWithConsoleSessionToken, 'consoleSessionToken' | 'workspaceId'>): SeamHttpUserIdentitiesEnrollmentAutomations;
    static fromPersonalAccessToken(personalAccessToken: SeamHttpOptionsWithPersonalAccessToken['personalAccessToken'], workspaceId: SeamHttpOptionsWithPersonalAccessToken['workspaceId'], options?: Omit<SeamHttpOptionsWithPersonalAccessToken, 'personalAccessToken' | 'workspaceId'>): SeamHttpUserIdentitiesEnrollmentAutomations;
    updateClientSessionToken(clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken']): Promise<void>;
    delete(body?: UserIdentitiesEnrollmentAutomationsDeleteBody): SeamHttpRequest<void, undefined>;
    get(body?: UserIdentitiesEnrollmentAutomationsGetParams): SeamHttpRequest<UserIdentitiesEnrollmentAutomationsGetResponse, 'enrollment_automation'>;
    launch(body?: UserIdentitiesEnrollmentAutomationsLaunchBody): SeamHttpRequest<UserIdentitiesEnrollmentAutomationsLaunchResponse, 'enrollment_automation'>;
    list(body?: UserIdentitiesEnrollmentAutomationsListParams): SeamHttpRequest<UserIdentitiesEnrollmentAutomationsListResponse, 'enrollment_automations'>;
}
export type UserIdentitiesEnrollmentAutomationsDeleteBody = RouteRequestBody<'/user_identities/enrollment_automations/delete'>;
export type UserIdentitiesEnrollmentAutomationsDeleteResponse = SetNonNullable<Required<RouteResponse<'/user_identities/enrollment_automations/delete'>>>;
export type UserIdentitiesEnrollmentAutomationsDeleteOptions = never;
export type UserIdentitiesEnrollmentAutomationsGetParams = RouteRequestBody<'/user_identities/enrollment_automations/get'>;
export type UserIdentitiesEnrollmentAutomationsGetResponse = SetNonNullable<Required<RouteResponse<'/user_identities/enrollment_automations/get'>>>;
export type UserIdentitiesEnrollmentAutomationsGetOptions = never;
export type UserIdentitiesEnrollmentAutomationsLaunchBody = RouteRequestBody<'/user_identities/enrollment_automations/launch'>;
export type UserIdentitiesEnrollmentAutomationsLaunchResponse = SetNonNullable<Required<RouteResponse<'/user_identities/enrollment_automations/launch'>>>;
export type UserIdentitiesEnrollmentAutomationsLaunchOptions = never;
export type UserIdentitiesEnrollmentAutomationsListParams = RouteRequestBody<'/user_identities/enrollment_automations/list'>;
export type UserIdentitiesEnrollmentAutomationsListResponse = SetNonNullable<Required<RouteResponse<'/user_identities/enrollment_automations/list'>>>;
export type UserIdentitiesEnrollmentAutomationsListOptions = never;
