import type { RouteRequestBody, RouteResponse } from '@seamapi/types/connect';
import type { SetNonNullable } from 'type-fest';
import { type Client } from '../../../../lib/seam/connect/client.js';
import { type SeamHttpFromPublishableKeyOptions, type SeamHttpOptions, type SeamHttpOptionsWithApiKey, type SeamHttpOptionsWithClient, type SeamHttpOptionsWithClientSessionToken, type SeamHttpOptionsWithConsoleSessionToken, type SeamHttpOptionsWithPersonalAccessToken, type SeamHttpRequestOptions } from '../../../../lib/seam/connect/options.js';
import { SeamHttpRequest } from '../../../../lib/seam/connect/seam-http-request.js';
import { SeamHttpUserIdentitiesEnrollmentAutomations } from './user-identities-enrollment-automations.js';
export declare class SeamHttpUserIdentities {
    client: Client;
    readonly defaults: Required<SeamHttpRequestOptions>;
    constructor(apiKeyOrOptions?: string | SeamHttpOptions);
    static fromClient(client: SeamHttpOptionsWithClient['client'], options?: Omit<SeamHttpOptionsWithClient, 'client'>): SeamHttpUserIdentities;
    static fromApiKey(apiKey: SeamHttpOptionsWithApiKey['apiKey'], options?: Omit<SeamHttpOptionsWithApiKey, 'apiKey'>): SeamHttpUserIdentities;
    static fromClientSessionToken(clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken'], options?: Omit<SeamHttpOptionsWithClientSessionToken, 'clientSessionToken'>): SeamHttpUserIdentities;
    static fromPublishableKey(publishableKey: string, userIdentifierKey: string, options?: SeamHttpFromPublishableKeyOptions): Promise<SeamHttpUserIdentities>;
    static fromConsoleSessionToken(consoleSessionToken: SeamHttpOptionsWithConsoleSessionToken['consoleSessionToken'], workspaceId: SeamHttpOptionsWithConsoleSessionToken['workspaceId'], options?: Omit<SeamHttpOptionsWithConsoleSessionToken, 'consoleSessionToken' | 'workspaceId'>): SeamHttpUserIdentities;
    static fromPersonalAccessToken(personalAccessToken: SeamHttpOptionsWithPersonalAccessToken['personalAccessToken'], workspaceId: SeamHttpOptionsWithPersonalAccessToken['workspaceId'], options?: Omit<SeamHttpOptionsWithPersonalAccessToken, 'personalAccessToken' | 'workspaceId'>): SeamHttpUserIdentities;
    updateClientSessionToken(clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken']): Promise<void>;
    get enrollmentAutomations(): SeamHttpUserIdentitiesEnrollmentAutomations;
    addAcsUser(body?: UserIdentitiesAddAcsUserBody): SeamHttpRequest<void, undefined>;
    create(body?: UserIdentitiesCreateBody): SeamHttpRequest<UserIdentitiesCreateResponse, 'user_identity'>;
    delete(body?: UserIdentitiesDeleteBody): SeamHttpRequest<void, undefined>;
    get(body?: UserIdentitiesGetParams): SeamHttpRequest<UserIdentitiesGetResponse, 'user_identity'>;
    grantAccessToDevice(body?: UserIdentitiesGrantAccessToDeviceBody): SeamHttpRequest<void, undefined>;
    list(body?: UserIdentitiesListParams): SeamHttpRequest<UserIdentitiesListResponse, 'user_identities'>;
    listAccessibleDevices(body?: UserIdentitiesListAccessibleDevicesParams): SeamHttpRequest<UserIdentitiesListAccessibleDevicesResponse, 'accessible_devices'>;
    listAcsSystems(body?: UserIdentitiesListAcsSystemsParams): SeamHttpRequest<UserIdentitiesListAcsSystemsResponse, 'acs_systems'>;
    listAcsUsers(body?: UserIdentitiesListAcsUsersParams): SeamHttpRequest<UserIdentitiesListAcsUsersResponse, 'acs_users'>;
    removeAcsUser(body?: UserIdentitiesRemoveAcsUserBody): SeamHttpRequest<void, undefined>;
    revokeAccessToDevice(body?: UserIdentitiesRevokeAccessToDeviceBody): SeamHttpRequest<void, undefined>;
    update(body?: UserIdentitiesUpdateBody): SeamHttpRequest<void, undefined>;
}
export type UserIdentitiesAddAcsUserBody = RouteRequestBody<'/user_identities/add_acs_user'>;
export type UserIdentitiesAddAcsUserResponse = SetNonNullable<Required<RouteResponse<'/user_identities/add_acs_user'>>>;
export type UserIdentitiesAddAcsUserOptions = never;
export type UserIdentitiesCreateBody = RouteRequestBody<'/user_identities/create'>;
export type UserIdentitiesCreateResponse = SetNonNullable<Required<RouteResponse<'/user_identities/create'>>>;
export type UserIdentitiesCreateOptions = never;
export type UserIdentitiesDeleteBody = RouteRequestBody<'/user_identities/delete'>;
export type UserIdentitiesDeleteResponse = SetNonNullable<Required<RouteResponse<'/user_identities/delete'>>>;
export type UserIdentitiesDeleteOptions = never;
export type UserIdentitiesGetParams = RouteRequestBody<'/user_identities/get'>;
export type UserIdentitiesGetResponse = SetNonNullable<Required<RouteResponse<'/user_identities/get'>>>;
export type UserIdentitiesGetOptions = never;
export type UserIdentitiesGrantAccessToDeviceBody = RouteRequestBody<'/user_identities/grant_access_to_device'>;
export type UserIdentitiesGrantAccessToDeviceResponse = SetNonNullable<Required<RouteResponse<'/user_identities/grant_access_to_device'>>>;
export type UserIdentitiesGrantAccessToDeviceOptions = never;
export type UserIdentitiesListParams = RouteRequestBody<'/user_identities/list'>;
export type UserIdentitiesListResponse = SetNonNullable<Required<RouteResponse<'/user_identities/list'>>>;
export type UserIdentitiesListOptions = never;
export type UserIdentitiesListAccessibleDevicesParams = RouteRequestBody<'/user_identities/list_accessible_devices'>;
export type UserIdentitiesListAccessibleDevicesResponse = SetNonNullable<Required<RouteResponse<'/user_identities/list_accessible_devices'>>>;
export type UserIdentitiesListAccessibleDevicesOptions = never;
export type UserIdentitiesListAcsSystemsParams = RouteRequestBody<'/user_identities/list_acs_systems'>;
export type UserIdentitiesListAcsSystemsResponse = SetNonNullable<Required<RouteResponse<'/user_identities/list_acs_systems'>>>;
export type UserIdentitiesListAcsSystemsOptions = never;
export type UserIdentitiesListAcsUsersParams = RouteRequestBody<'/user_identities/list_acs_users'>;
export type UserIdentitiesListAcsUsersResponse = SetNonNullable<Required<RouteResponse<'/user_identities/list_acs_users'>>>;
export type UserIdentitiesListAcsUsersOptions = never;
export type UserIdentitiesRemoveAcsUserBody = RouteRequestBody<'/user_identities/remove_acs_user'>;
export type UserIdentitiesRemoveAcsUserResponse = SetNonNullable<Required<RouteResponse<'/user_identities/remove_acs_user'>>>;
export type UserIdentitiesRemoveAcsUserOptions = never;
export type UserIdentitiesRevokeAccessToDeviceBody = RouteRequestBody<'/user_identities/revoke_access_to_device'>;
export type UserIdentitiesRevokeAccessToDeviceResponse = SetNonNullable<Required<RouteResponse<'/user_identities/revoke_access_to_device'>>>;
export type UserIdentitiesRevokeAccessToDeviceOptions = never;
export type UserIdentitiesUpdateBody = RouteRequestBody<'/user_identities/update'>;
export type UserIdentitiesUpdateResponse = SetNonNullable<Required<RouteResponse<'/user_identities/update'>>>;
export type UserIdentitiesUpdateOptions = never;
