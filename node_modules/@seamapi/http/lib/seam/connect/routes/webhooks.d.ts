import type { RouteRequestBody, RouteResponse } from '@seamapi/types/connect';
import type { SetNonNullable } from 'type-fest';
import { type Client } from '../../../../lib/seam/connect/client.js';
import { type SeamHttpFromPublishableKeyOptions, type SeamHttpOptions, type SeamHttpOptionsWithApiKey, type SeamHttpOptionsWithClient, type SeamHttpOptionsWithClientSessionToken, type SeamHttpOptionsWithConsoleSessionToken, type SeamHttpOptionsWithPersonalAccessToken, type SeamHttpRequestOptions } from '../../../../lib/seam/connect/options.js';
import { SeamHttpRequest } from '../../../../lib/seam/connect/seam-http-request.js';
export declare class SeamHttpWebhooks {
    client: Client;
    readonly defaults: Required<SeamHttpRequestOptions>;
    constructor(apiKeyOrOptions?: string | SeamHttpOptions);
    static fromClient(client: SeamHttpOptionsWithClient['client'], options?: Omit<SeamHttpOptionsWithClient, 'client'>): SeamHttpWebhooks;
    static fromApiKey(apiKey: SeamHttpOptionsWithApiKey['apiKey'], options?: Omit<SeamHttpOptionsWithApiKey, 'apiKey'>): SeamHttpWebhooks;
    static fromClientSessionToken(clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken'], options?: Omit<SeamHttpOptionsWithClientSessionToken, 'clientSessionToken'>): SeamHttpWebhooks;
    static fromPublishableKey(publishableKey: string, userIdentifierKey: string, options?: SeamHttpFromPublishableKeyOptions): Promise<SeamHttpWebhooks>;
    static fromConsoleSessionToken(consoleSessionToken: SeamHttpOptionsWithConsoleSessionToken['consoleSessionToken'], workspaceId: SeamHttpOptionsWithConsoleSessionToken['workspaceId'], options?: Omit<SeamHttpOptionsWithConsoleSessionToken, 'consoleSessionToken' | 'workspaceId'>): SeamHttpWebhooks;
    static fromPersonalAccessToken(personalAccessToken: SeamHttpOptionsWithPersonalAccessToken['personalAccessToken'], workspaceId: SeamHttpOptionsWithPersonalAccessToken['workspaceId'], options?: Omit<SeamHttpOptionsWithPersonalAccessToken, 'personalAccessToken' | 'workspaceId'>): SeamHttpWebhooks;
    updateClientSessionToken(clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken']): Promise<void>;
    create(body?: WebhooksCreateBody): SeamHttpRequest<WebhooksCreateResponse, 'webhook'>;
    delete(body?: WebhooksDeleteBody): SeamHttpRequest<void, undefined>;
    get(body?: WebhooksGetParams): SeamHttpRequest<WebhooksGetResponse, 'webhook'>;
    list(body?: WebhooksListParams): SeamHttpRequest<WebhooksListResponse, 'webhooks'>;
    update(body?: WebhooksUpdateBody): SeamHttpRequest<void, undefined>;
}
export type WebhooksCreateBody = RouteRequestBody<'/webhooks/create'>;
export type WebhooksCreateResponse = SetNonNullable<Required<RouteResponse<'/webhooks/create'>>>;
export type WebhooksCreateOptions = never;
export type WebhooksDeleteBody = RouteRequestBody<'/webhooks/delete'>;
export type WebhooksDeleteResponse = SetNonNullable<Required<RouteResponse<'/webhooks/delete'>>>;
export type WebhooksDeleteOptions = never;
export type WebhooksGetParams = RouteRequestBody<'/webhooks/get'>;
export type WebhooksGetResponse = SetNonNullable<Required<RouteResponse<'/webhooks/get'>>>;
export type WebhooksGetOptions = never;
export type WebhooksListParams = RouteRequestBody<'/webhooks/list'>;
export type WebhooksListResponse = SetNonNullable<Required<RouteResponse<'/webhooks/list'>>>;
export type WebhooksListOptions = never;
export type WebhooksUpdateBody = RouteRequestBody<'/webhooks/update'>;
export type WebhooksUpdateResponse = SetNonNullable<Required<RouteResponse<'/webhooks/update'>>>;
export type WebhooksUpdateOptions = never;
