import type { RouteRequestBody, RouteResponse } from '@seamapi/types/connect';
import type { SetNonNullable } from 'type-fest';
import { type Client } from '../../../../lib/seam/connect/client.js';
import { type SeamHttpFromPublishableKeyOptions, type SeamHttpOptions, type SeamHttpOptionsWithApiKey, type SeamHttpOptionsWithClient, type SeamHttpOptionsWithClientSessionToken, type SeamHttpOptionsWithConsoleSessionToken, type SeamHttpOptionsWithPersonalAccessToken, type SeamHttpRequestOptions } from '../../../../lib/seam/connect/options.js';
import { SeamHttpRequest } from '../../../../lib/seam/connect/seam-http-request.js';
export declare class SeamHttpAcsUsers {
    client: Client;
    readonly defaults: Required<SeamHttpRequestOptions>;
    constructor(apiKeyOrOptions?: string | SeamHttpOptions);
    static fromClient(client: SeamHttpOptionsWithClient['client'], options?: Omit<SeamHttpOptionsWithClient, 'client'>): SeamHttpAcsUsers;
    static fromApiKey(apiKey: SeamHttpOptionsWithApiKey['apiKey'], options?: Omit<SeamHttpOptionsWithApiKey, 'apiKey'>): SeamHttpAcsUsers;
    static fromClientSessionToken(clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken'], options?: Omit<SeamHttpOptionsWithClientSessionToken, 'clientSessionToken'>): SeamHttpAcsUsers;
    static fromPublishableKey(publishableKey: string, userIdentifierKey: string, options?: SeamHttpFromPublishableKeyOptions): Promise<SeamHttpAcsUsers>;
    static fromConsoleSessionToken(consoleSessionToken: SeamHttpOptionsWithConsoleSessionToken['consoleSessionToken'], workspaceId: SeamHttpOptionsWithConsoleSessionToken['workspaceId'], options?: Omit<SeamHttpOptionsWithConsoleSessionToken, 'consoleSessionToken' | 'workspaceId'>): SeamHttpAcsUsers;
    static fromPersonalAccessToken(personalAccessToken: SeamHttpOptionsWithPersonalAccessToken['personalAccessToken'], workspaceId: SeamHttpOptionsWithPersonalAccessToken['workspaceId'], options?: Omit<SeamHttpOptionsWithPersonalAccessToken, 'personalAccessToken' | 'workspaceId'>): SeamHttpAcsUsers;
    updateClientSessionToken(clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken']): Promise<void>;
    addToAccessGroup(body?: AcsUsersAddToAccessGroupBody): SeamHttpRequest<void, undefined>;
    create(body?: AcsUsersCreateBody): SeamHttpRequest<AcsUsersCreateResponse, 'acs_user'>;
    delete(body?: AcsUsersDeleteBody): SeamHttpRequest<void, undefined>;
    get(body?: AcsUsersGetParams): SeamHttpRequest<AcsUsersGetResponse, 'acs_user'>;
    list(body?: AcsUsersListParams): SeamHttpRequest<AcsUsersListResponse, 'acs_users'>;
    listAccessibleEntrances(body?: AcsUsersListAccessibleEntrancesParams): SeamHttpRequest<AcsUsersListAccessibleEntrancesResponse, 'acs_entrances'>;
    removeFromAccessGroup(body?: AcsUsersRemoveFromAccessGroupBody): SeamHttpRequest<void, undefined>;
    revokeAccessToAllEntrances(body?: AcsUsersRevokeAccessToAllEntrancesBody): SeamHttpRequest<void, undefined>;
    suspend(body?: AcsUsersSuspendBody): SeamHttpRequest<void, undefined>;
    unsuspend(body?: AcsUsersUnsuspendBody): SeamHttpRequest<void, undefined>;
    update(body?: AcsUsersUpdateBody): SeamHttpRequest<void, undefined>;
}
export type AcsUsersAddToAccessGroupBody = RouteRequestBody<'/acs/users/add_to_access_group'>;
export type AcsUsersAddToAccessGroupResponse = SetNonNullable<Required<RouteResponse<'/acs/users/add_to_access_group'>>>;
export type AcsUsersAddToAccessGroupOptions = never;
export type AcsUsersCreateBody = RouteRequestBody<'/acs/users/create'>;
export type AcsUsersCreateResponse = SetNonNullable<Required<RouteResponse<'/acs/users/create'>>>;
export type AcsUsersCreateOptions = never;
export type AcsUsersDeleteBody = RouteRequestBody<'/acs/users/delete'>;
export type AcsUsersDeleteResponse = SetNonNullable<Required<RouteResponse<'/acs/users/delete'>>>;
export type AcsUsersDeleteOptions = never;
export type AcsUsersGetParams = RouteRequestBody<'/acs/users/get'>;
export type AcsUsersGetResponse = SetNonNullable<Required<RouteResponse<'/acs/users/get'>>>;
export type AcsUsersGetOptions = never;
export type AcsUsersListParams = RouteRequestBody<'/acs/users/list'>;
export type AcsUsersListResponse = SetNonNullable<Required<RouteResponse<'/acs/users/list'>>>;
export type AcsUsersListOptions = never;
export type AcsUsersListAccessibleEntrancesParams = RouteRequestBody<'/acs/users/list_accessible_entrances'>;
export type AcsUsersListAccessibleEntrancesResponse = SetNonNullable<Required<RouteResponse<'/acs/users/list_accessible_entrances'>>>;
export type AcsUsersListAccessibleEntrancesOptions = never;
export type AcsUsersRemoveFromAccessGroupBody = RouteRequestBody<'/acs/users/remove_from_access_group'>;
export type AcsUsersRemoveFromAccessGroupResponse = SetNonNullable<Required<RouteResponse<'/acs/users/remove_from_access_group'>>>;
export type AcsUsersRemoveFromAccessGroupOptions = never;
export type AcsUsersRevokeAccessToAllEntrancesBody = RouteRequestBody<'/acs/users/revoke_access_to_all_entrances'>;
export type AcsUsersRevokeAccessToAllEntrancesResponse = SetNonNullable<Required<RouteResponse<'/acs/users/revoke_access_to_all_entrances'>>>;
export type AcsUsersRevokeAccessToAllEntrancesOptions = never;
export type AcsUsersSuspendBody = RouteRequestBody<'/acs/users/suspend'>;
export type AcsUsersSuspendResponse = SetNonNullable<Required<RouteResponse<'/acs/users/suspend'>>>;
export type AcsUsersSuspendOptions = never;
export type AcsUsersUnsuspendBody = RouteRequestBody<'/acs/users/unsuspend'>;
export type AcsUsersUnsuspendResponse = SetNonNullable<Required<RouteResponse<'/acs/users/unsuspend'>>>;
export type AcsUsersUnsuspendOptions = never;
export type AcsUsersUpdateBody = RouteRequestBody<'/acs/users/update'>;
export type AcsUsersUpdateResponse = SetNonNullable<Required<RouteResponse<'/acs/users/update'>>>;
export type AcsUsersUpdateOptions = never;
