import type { RouteRequestBody, RouteResponse } from '@seamapi/types/connect';
import type { SetNonNullable } from 'type-fest';
import { type Client } from '../../../../lib/seam/connect/client.js';
import { type SeamHttpFromPublishableKeyOptions, type SeamHttpOptions, type SeamHttpOptionsWithApiKey, type SeamHttpOptionsWithClient, type SeamHttpOptionsWithClientSessionToken, type SeamHttpOptionsWithConsoleSessionToken, type SeamHttpOptionsWithPersonalAccessToken, type SeamHttpRequestOptions } from '../../../../lib/seam/connect/options.js';
import { SeamHttpRequest } from '../../../../lib/seam/connect/seam-http-request.js';
import { SeamHttpAccessCodesUnmanaged } from './access-codes-unmanaged.js';
export declare class SeamHttpAccessCodes {
    client: Client;
    readonly defaults: Required<SeamHttpRequestOptions>;
    constructor(apiKeyOrOptions?: string | SeamHttpOptions);
    static fromClient(client: SeamHttpOptionsWithClient['client'], options?: Omit<SeamHttpOptionsWithClient, 'client'>): SeamHttpAccessCodes;
    static fromApiKey(apiKey: SeamHttpOptionsWithApiKey['apiKey'], options?: Omit<SeamHttpOptionsWithApiKey, 'apiKey'>): SeamHttpAccessCodes;
    static fromClientSessionToken(clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken'], options?: Omit<SeamHttpOptionsWithClientSessionToken, 'clientSessionToken'>): SeamHttpAccessCodes;
    static fromPublishableKey(publishableKey: string, userIdentifierKey: string, options?: SeamHttpFromPublishableKeyOptions): Promise<SeamHttpAccessCodes>;
    static fromConsoleSessionToken(consoleSessionToken: SeamHttpOptionsWithConsoleSessionToken['consoleSessionToken'], workspaceId: SeamHttpOptionsWithConsoleSessionToken['workspaceId'], options?: Omit<SeamHttpOptionsWithConsoleSessionToken, 'consoleSessionToken' | 'workspaceId'>): SeamHttpAccessCodes;
    static fromPersonalAccessToken(personalAccessToken: SeamHttpOptionsWithPersonalAccessToken['personalAccessToken'], workspaceId: SeamHttpOptionsWithPersonalAccessToken['workspaceId'], options?: Omit<SeamHttpOptionsWithPersonalAccessToken, 'personalAccessToken' | 'workspaceId'>): SeamHttpAccessCodes;
    updateClientSessionToken(clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken']): Promise<void>;
    get unmanaged(): SeamHttpAccessCodesUnmanaged;
    create(body?: AccessCodesCreateBody): SeamHttpRequest<AccessCodesCreateResponse, 'access_code'>;
    createMultiple(body?: AccessCodesCreateMultipleBody): SeamHttpRequest<AccessCodesCreateMultipleResponse, 'access_codes'>;
    delete(body?: AccessCodesDeleteBody): SeamHttpRequest<void, undefined>;
    generateCode(body?: AccessCodesGenerateCodeBody): SeamHttpRequest<AccessCodesGenerateCodeResponse, 'generated_code'>;
    get(body?: AccessCodesGetParams): SeamHttpRequest<AccessCodesGetResponse, 'access_code'>;
    list(body?: AccessCodesListParams): SeamHttpRequest<AccessCodesListResponse, 'access_codes'>;
    pullBackupAccessCode(body?: AccessCodesPullBackupAccessCodeBody): SeamHttpRequest<AccessCodesPullBackupAccessCodeResponse, 'backup_access_code'>;
    update(body?: AccessCodesUpdateBody): SeamHttpRequest<void, undefined>;
}
export type AccessCodesCreateBody = RouteRequestBody<'/access_codes/create'>;
export type AccessCodesCreateResponse = SetNonNullable<Required<RouteResponse<'/access_codes/create'>>>;
export type AccessCodesCreateOptions = never;
export type AccessCodesCreateMultipleBody = RouteRequestBody<'/access_codes/create_multiple'>;
export type AccessCodesCreateMultipleResponse = SetNonNullable<Required<RouteResponse<'/access_codes/create_multiple'>>>;
export type AccessCodesCreateMultipleOptions = never;
export type AccessCodesDeleteBody = RouteRequestBody<'/access_codes/delete'>;
export type AccessCodesDeleteResponse = SetNonNullable<Required<RouteResponse<'/access_codes/delete'>>>;
export type AccessCodesDeleteOptions = never;
export type AccessCodesGenerateCodeBody = RouteRequestBody<'/access_codes/generate_code'>;
export type AccessCodesGenerateCodeResponse = SetNonNullable<Required<RouteResponse<'/access_codes/generate_code'>>>;
export type AccessCodesGenerateCodeOptions = never;
export type AccessCodesGetParams = RouteRequestBody<'/access_codes/get'>;
export type AccessCodesGetResponse = SetNonNullable<Required<RouteResponse<'/access_codes/get'>>>;
export type AccessCodesGetOptions = never;
export type AccessCodesListParams = RouteRequestBody<'/access_codes/list'>;
export type AccessCodesListResponse = SetNonNullable<Required<RouteResponse<'/access_codes/list'>>>;
export type AccessCodesListOptions = never;
export type AccessCodesPullBackupAccessCodeBody = RouteRequestBody<'/access_codes/pull_backup_access_code'>;
export type AccessCodesPullBackupAccessCodeResponse = SetNonNullable<Required<RouteResponse<'/access_codes/pull_backup_access_code'>>>;
export type AccessCodesPullBackupAccessCodeOptions = never;
export type AccessCodesUpdateBody = RouteRequestBody<'/access_codes/update'>;
export type AccessCodesUpdateResponse = SetNonNullable<Required<RouteResponse<'/access_codes/update'>>>;
export type AccessCodesUpdateOptions = never;
