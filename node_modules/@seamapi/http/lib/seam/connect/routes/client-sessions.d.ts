import type { RouteRequestBody, RouteResponse } from '@seamapi/types/connect';
import type { SetNonNullable } from 'type-fest';
import { type Client } from '../../../../lib/seam/connect/client.js';
import { type SeamHttpFromPublishableKeyOptions, type SeamHttpOptions, type SeamHttpOptionsWithApiKey, type SeamHttpOptionsWithClient, type SeamHttpOptionsWithClientSessionToken, type SeamHttpOptionsWithConsoleSessionToken, type SeamHttpOptionsWithPersonalAccessToken, type SeamHttpRequestOptions } from '../../../../lib/seam/connect/options.js';
import { SeamHttpRequest } from '../../../../lib/seam/connect/seam-http-request.js';
export declare class SeamHttpClientSessions {
    client: Client;
    readonly defaults: Required<SeamHttpRequestOptions>;
    constructor(apiKeyOrOptions?: string | SeamHttpOptions);
    static fromClient(client: SeamHttpOptionsWithClient['client'], options?: Omit<SeamHttpOptionsWithClient, 'client'>): SeamHttpClientSessions;
    static fromApiKey(apiKey: SeamHttpOptionsWithApiKey['apiKey'], options?: Omit<SeamHttpOptionsWithApiKey, 'apiKey'>): SeamHttpClientSessions;
    static fromClientSessionToken(clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken'], options?: Omit<SeamHttpOptionsWithClientSessionToken, 'clientSessionToken'>): SeamHttpClientSessions;
    static fromPublishableKey(publishableKey: string, userIdentifierKey: string, options?: SeamHttpFromPublishableKeyOptions): Promise<SeamHttpClientSessions>;
    static fromConsoleSessionToken(consoleSessionToken: SeamHttpOptionsWithConsoleSessionToken['consoleSessionToken'], workspaceId: SeamHttpOptionsWithConsoleSessionToken['workspaceId'], options?: Omit<SeamHttpOptionsWithConsoleSessionToken, 'consoleSessionToken' | 'workspaceId'>): SeamHttpClientSessions;
    static fromPersonalAccessToken(personalAccessToken: SeamHttpOptionsWithPersonalAccessToken['personalAccessToken'], workspaceId: SeamHttpOptionsWithPersonalAccessToken['workspaceId'], options?: Omit<SeamHttpOptionsWithPersonalAccessToken, 'personalAccessToken' | 'workspaceId'>): SeamHttpClientSessions;
    updateClientSessionToken(clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken']): Promise<void>;
    create(body?: ClientSessionsCreateBody): SeamHttpRequest<ClientSessionsCreateResponse, 'client_session'>;
    delete(body?: ClientSessionsDeleteBody): SeamHttpRequest<void, undefined>;
    get(body?: ClientSessionsGetParams): SeamHttpRequest<ClientSessionsGetResponse, 'client_session'>;
    getOrCreate(body?: ClientSessionsGetOrCreateBody): SeamHttpRequest<ClientSessionsGetOrCreateResponse, 'client_session'>;
    grantAccess(body?: ClientSessionsGrantAccessBody): SeamHttpRequest<ClientSessionsGrantAccessResponse, 'client_session'>;
    list(body?: ClientSessionsListParams): SeamHttpRequest<ClientSessionsListResponse, 'client_sessions'>;
    revoke(body?: ClientSessionsRevokeBody): SeamHttpRequest<void, undefined>;
}
export type ClientSessionsCreateBody = RouteRequestBody<'/client_sessions/create'>;
export type ClientSessionsCreateResponse = SetNonNullable<Required<RouteResponse<'/client_sessions/create'>>>;
export type ClientSessionsCreateOptions = never;
export type ClientSessionsDeleteBody = RouteRequestBody<'/client_sessions/delete'>;
export type ClientSessionsDeleteResponse = SetNonNullable<Required<RouteResponse<'/client_sessions/delete'>>>;
export type ClientSessionsDeleteOptions = never;
export type ClientSessionsGetParams = RouteRequestBody<'/client_sessions/get'>;
export type ClientSessionsGetResponse = SetNonNullable<Required<RouteResponse<'/client_sessions/get'>>>;
export type ClientSessionsGetOptions = never;
export type ClientSessionsGetOrCreateBody = RouteRequestBody<'/client_sessions/get_or_create'>;
export type ClientSessionsGetOrCreateResponse = SetNonNullable<Required<RouteResponse<'/client_sessions/get_or_create'>>>;
export type ClientSessionsGetOrCreateOptions = never;
export type ClientSessionsGrantAccessBody = RouteRequestBody<'/client_sessions/grant_access'>;
export type ClientSessionsGrantAccessResponse = SetNonNullable<Required<RouteResponse<'/client_sessions/grant_access'>>>;
export type ClientSessionsGrantAccessOptions = never;
export type ClientSessionsListParams = RouteRequestBody<'/client_sessions/list'>;
export type ClientSessionsListResponse = SetNonNullable<Required<RouteResponse<'/client_sessions/list'>>>;
export type ClientSessionsListOptions = never;
export type ClientSessionsRevokeBody = RouteRequestBody<'/client_sessions/revoke'>;
export type ClientSessionsRevokeResponse = SetNonNullable<Required<RouteResponse<'/client_sessions/revoke'>>>;
export type ClientSessionsRevokeOptions = never;
