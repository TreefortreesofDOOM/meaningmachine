import type { ActionAttempt, FailedActionAttempt, SuccessfulActionAttempt } from './action-attempt-types.js';
import type { SeamHttpActionAttempts } from './routes/index.js';
export interface ResolveActionAttemptOptions {
    timeout?: number;
    pollingInterval?: number;
}
export declare const resolveActionAttempt: <T extends ActionAttempt>(actionAttempt: T, actionAttempts: SeamHttpActionAttempts, { timeout, pollingInterval }: ResolveActionAttemptOptions) => Promise<SuccessfulActionAttempt<T>>;
export declare const isSeamActionAttemptError: <T extends ActionAttempt>(error: unknown) => error is SeamActionAttemptError<T>;
export declare class SeamActionAttemptError<T extends ActionAttempt> extends Error {
    actionAttempt: T;
    constructor(message: string, actionAttempt: T);
}
export declare const isSeamActionAttemptFailedError: <T extends ActionAttempt>(error: unknown) => error is SeamActionAttemptFailedError<T>;
export declare class SeamActionAttemptFailedError<T extends ActionAttempt> extends SeamActionAttemptError<T> {
    code: string;
    constructor(actionAttempt: FailedActionAttempt<T>);
}
export declare const isSeamActionAttemptTimeoutError: <T extends ActionAttempt>(error: unknown) => error is SeamActionAttemptTimeoutError<T>;
export declare class SeamActionAttemptTimeoutError<T extends ActionAttempt> extends SeamActionAttemptError<T> {
    constructor(actionAttempt: T, timeout: number);
}
