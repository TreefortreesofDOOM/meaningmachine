import { BaseAPIRequestFactory } from './baseapi';
import { Configuration } from '../configuration';
import { RequestContext, ResponseContext } from '../http/http';
import { GenerateIn } from '../models/GenerateIn';
import { GenerateOut } from '../models/GenerateOut';
import { ListResponseTemplateOut } from '../models/ListResponseTemplateOut';
import { OauthPayloadIn } from '../models/OauthPayloadIn';
import { OauthPayloadOut } from '../models/OauthPayloadOut';
import { Ordering } from '../models/Ordering';
import { TemplateIn } from '../models/TemplateIn';
import { TemplateOut } from '../models/TemplateOut';
import { TemplatePatch } from '../models/TemplatePatch';
import { TemplateUpdate } from '../models/TemplateUpdate';
import { TransformationSimulateIn } from '../models/TransformationSimulateIn';
import { TransformationSimulateOut } from '../models/TransformationSimulateOut';
export declare class TransformationTemplateApiRequestFactory extends BaseAPIRequestFactory {
    v1TransformationTemplateCreate(templateIn: TemplateIn, idempotencyKey?: string, _options?: Configuration): Promise<RequestContext>;
    v1TransformationTemplateDelete(transformationTemplateId: string, _options?: Configuration): Promise<RequestContext>;
    v1TransformationTemplateGenerate(generateIn: GenerateIn, idempotencyKey?: string, _options?: Configuration): Promise<RequestContext>;
    v1TransformationTemplateGet(transformationTemplateId: string, _options?: Configuration): Promise<RequestContext>;
    v1TransformationTemplateList(limit?: number, iterator?: string, order?: Ordering, _options?: Configuration): Promise<RequestContext>;
    v1TransformationTemplateOauthDiscord(oauthPayloadIn: OauthPayloadIn, idempotencyKey?: string, _options?: Configuration): Promise<RequestContext>;
    v1TransformationTemplateOauthSlack(oauthPayloadIn: OauthPayloadIn, idempotencyKey?: string, _options?: Configuration): Promise<RequestContext>;
    v1TransformationTemplatePatch(transformationTemplateId: string, templatePatch: TemplatePatch, _options?: Configuration): Promise<RequestContext>;
    v1TransformationTemplateSimulate(transformationSimulateIn: TransformationSimulateIn, idempotencyKey?: string, _options?: Configuration): Promise<RequestContext>;
    v1TransformationTemplateUpdate(transformationTemplateId: string, templateUpdate: TemplateUpdate, _options?: Configuration): Promise<RequestContext>;
}
export declare class TransformationTemplateApiResponseProcessor {
    v1TransformationTemplateCreate(response: ResponseContext): Promise<TemplateOut>;
    v1TransformationTemplateDelete(response: ResponseContext): Promise<void>;
    v1TransformationTemplateGenerate(response: ResponseContext): Promise<GenerateOut>;
    v1TransformationTemplateGet(response: ResponseContext): Promise<TemplateOut>;
    v1TransformationTemplateList(response: ResponseContext): Promise<ListResponseTemplateOut>;
    v1TransformationTemplateOauthDiscord(response: ResponseContext): Promise<OauthPayloadOut>;
    v1TransformationTemplateOauthSlack(response: ResponseContext): Promise<OauthPayloadOut>;
    v1TransformationTemplatePatch(response: ResponseContext): Promise<TemplateOut>;
    v1TransformationTemplateSimulate(response: ResponseContext): Promise<TransformationSimulateOut>;
    v1TransformationTemplateUpdate(response: ResponseContext): Promise<TemplateOut>;
}
