import { Configuration } from '../configuration';
import { Observable } from '../rxjsStub';
import { AggregateEventTypesOut } from '../models/AggregateEventTypesOut';
import { AppPortalAccessIn } from '../models/AppPortalAccessIn';
import { AppPortalAccessOut } from '../models/AppPortalAccessOut';
import { AppUsageStatsIn } from '../models/AppUsageStatsIn';
import { AppUsageStatsOut } from '../models/AppUsageStatsOut';
import { ApplicationIn } from '../models/ApplicationIn';
import { ApplicationOut } from '../models/ApplicationOut';
import { ApplicationPatch } from '../models/ApplicationPatch';
import { ApplicationStats } from '../models/ApplicationStats';
import { ApplicationTokenExpireIn } from '../models/ApplicationTokenExpireIn';
import { AttemptStatisticsResponse } from '../models/AttemptStatisticsResponse';
import { BackgroundTaskOut } from '../models/BackgroundTaskOut';
import { BackgroundTaskStatus } from '../models/BackgroundTaskStatus';
import { BackgroundTaskType } from '../models/BackgroundTaskType';
import { DashboardAccessOut } from '../models/DashboardAccessOut';
import { EndpointHeadersIn } from '../models/EndpointHeadersIn';
import { EndpointHeadersOut } from '../models/EndpointHeadersOut';
import { EndpointHeadersPatchIn } from '../models/EndpointHeadersPatchIn';
import { EndpointIn } from '../models/EndpointIn';
import { EndpointOut } from '../models/EndpointOut';
import { EndpointPatch } from '../models/EndpointPatch';
import { EndpointSecretOut } from '../models/EndpointSecretOut';
import { EndpointSecretRotateIn } from '../models/EndpointSecretRotateIn';
import { EndpointStats } from '../models/EndpointStats';
import { EndpointTransformationIn } from '../models/EndpointTransformationIn';
import { EndpointTransformationOut } from '../models/EndpointTransformationOut';
import { EndpointTransformationSimulateIn } from '../models/EndpointTransformationSimulateIn';
import { EndpointTransformationSimulateOut } from '../models/EndpointTransformationSimulateOut';
import { EndpointUpdate } from '../models/EndpointUpdate';
import { EnvironmentIn } from '../models/EnvironmentIn';
import { EnvironmentOut } from '../models/EnvironmentOut';
import { EnvironmentSettingsOut } from '../models/EnvironmentSettingsOut';
import { EventExampleIn } from '../models/EventExampleIn';
import { EventTypeExampleOut } from '../models/EventTypeExampleOut';
import { EventTypeImportOpenApiIn } from '../models/EventTypeImportOpenApiIn';
import { EventTypeImportOpenApiOut } from '../models/EventTypeImportOpenApiOut';
import { EventTypeIn } from '../models/EventTypeIn';
import { EventTypeOut } from '../models/EventTypeOut';
import { EventTypePatch } from '../models/EventTypePatch';
import { EventTypeSchemaIn } from '../models/EventTypeSchemaIn';
import { EventTypeUpdate } from '../models/EventTypeUpdate';
import { ExportEventTypeOut } from '../models/ExportEventTypeOut';
import { GenerateIn } from '../models/GenerateIn';
import { GenerateOut } from '../models/GenerateOut';
import { IntegrationIn } from '../models/IntegrationIn';
import { IntegrationKeyOut } from '../models/IntegrationKeyOut';
import { IntegrationOut } from '../models/IntegrationOut';
import { IntegrationUpdate } from '../models/IntegrationUpdate';
import { ListResponseApplicationOut } from '../models/ListResponseApplicationOut';
import { ListResponseApplicationStats } from '../models/ListResponseApplicationStats';
import { ListResponseBackgroundTaskOut } from '../models/ListResponseBackgroundTaskOut';
import { ListResponseEndpointMessageOut } from '../models/ListResponseEndpointMessageOut';
import { ListResponseEndpointOut } from '../models/ListResponseEndpointOut';
import { ListResponseEventTypeOut } from '../models/ListResponseEventTypeOut';
import { ListResponseIntegrationOut } from '../models/ListResponseIntegrationOut';
import { ListResponseMessageAttemptEndpointOut } from '../models/ListResponseMessageAttemptEndpointOut';
import { ListResponseMessageAttemptOut } from '../models/ListResponseMessageAttemptOut';
import { ListResponseMessageEndpointOut } from '../models/ListResponseMessageEndpointOut';
import { ListResponseMessageOut } from '../models/ListResponseMessageOut';
import { ListResponseTemplateOut } from '../models/ListResponseTemplateOut';
import { MessageAttemptHeadersOut } from '../models/MessageAttemptHeadersOut';
import { MessageAttemptOut } from '../models/MessageAttemptOut';
import { MessageBroadcastIn } from '../models/MessageBroadcastIn';
import { MessageBroadcastOut } from '../models/MessageBroadcastOut';
import { MessageIn } from '../models/MessageIn';
import { MessageOut } from '../models/MessageOut';
import { MessageRawPayloadOut } from '../models/MessageRawPayloadOut';
import { MessageStatus } from '../models/MessageStatus';
import { MessageStreamOut } from '../models/MessageStreamOut';
import { OauthPayloadIn } from '../models/OauthPayloadIn';
import { OauthPayloadOut } from '../models/OauthPayloadOut';
import { OneTimeTokenIn } from '../models/OneTimeTokenIn';
import { OneTimeTokenOut } from '../models/OneTimeTokenOut';
import { Ordering } from '../models/Ordering';
import { RecoverIn } from '../models/RecoverIn';
import { RecoverOut } from '../models/RecoverOut';
import { ReplayIn } from '../models/ReplayIn';
import { ReplayOut } from '../models/ReplayOut';
import { RetryScheduleInOut } from '../models/RetryScheduleInOut';
import { RotatedUrlOut } from '../models/RotatedUrlOut';
import { StatusCodeClass } from '../models/StatusCodeClass';
import { TemplateIn } from '../models/TemplateIn';
import { TemplateOut } from '../models/TemplateOut';
import { TemplatePatch } from '../models/TemplatePatch';
import { TemplateUpdate } from '../models/TemplateUpdate';
import { TransformationSimulateIn } from '../models/TransformationSimulateIn';
import { TransformationSimulateOut } from '../models/TransformationSimulateOut';
import { ApplicationApiRequestFactory, ApplicationApiResponseProcessor } from "../apis/ApplicationApi";
export declare class ObservableApplicationApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: ApplicationApiRequestFactory, responseProcessor?: ApplicationApiResponseProcessor);
    getAppUsageStatsApiV1AppStatsUsageGet(since: Date, until: Date, limit?: number, iterator?: string, _options?: Configuration): Observable<ListResponseApplicationStats>;
    v1ApplicationCreate(applicationIn: ApplicationIn, getIfExists?: boolean, idempotencyKey?: string, _options?: Configuration): Observable<ApplicationOut>;
    v1ApplicationDelete(appId: string, _options?: Configuration): Observable<void>;
    v1ApplicationGet(appId: string, _options?: Configuration): Observable<ApplicationOut>;
    v1ApplicationGetStats(since: Date, until: Date, appId: string, _options?: Configuration): Observable<ApplicationStats>;
    v1ApplicationList(limit?: number, iterator?: string, order?: Ordering, _options?: Configuration): Observable<ListResponseApplicationOut>;
    v1ApplicationPatch(appId: string, applicationPatch: ApplicationPatch, _options?: Configuration): Observable<ApplicationOut>;
    v1ApplicationUpdate(appId: string, applicationIn: ApplicationIn, _options?: Configuration): Observable<ApplicationOut>;
}
import { AuthenticationApiRequestFactory, AuthenticationApiResponseProcessor } from "../apis/AuthenticationApi";
export declare class ObservableAuthenticationApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: AuthenticationApiRequestFactory, responseProcessor?: AuthenticationApiResponseProcessor);
    v1AuthenticationAppPortalAccess(appId: string, appPortalAccessIn: AppPortalAccessIn, idempotencyKey?: string, _options?: Configuration): Observable<AppPortalAccessOut>;
    v1AuthenticationDashboardAccess(appId: string, idempotencyKey?: string, _options?: Configuration): Observable<DashboardAccessOut>;
    v1AuthenticationExchangeOneTimeToken(oneTimeTokenIn: OneTimeTokenIn, idempotencyKey?: string, _options?: Configuration): Observable<OneTimeTokenOut>;
    v1AuthenticationExpireAll(appId: string, applicationTokenExpireIn: ApplicationTokenExpireIn, idempotencyKey?: string, _options?: Configuration): Observable<void>;
    v1AuthenticationLogout(idempotencyKey?: string, _options?: Configuration): Observable<void>;
}
import { BackgroundTasksApiRequestFactory, BackgroundTasksApiResponseProcessor } from "../apis/BackgroundTasksApi";
export declare class ObservableBackgroundTasksApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: BackgroundTasksApiRequestFactory, responseProcessor?: BackgroundTasksApiResponseProcessor);
    getBackgroundTask(taskId: string, _options?: Configuration): Observable<BackgroundTaskOut>;
    listBackgroundTasks(status?: BackgroundTaskStatus, task?: BackgroundTaskType, limit?: number, iterator?: string, order?: Ordering, _options?: Configuration): Observable<ListResponseBackgroundTaskOut>;
}
import { BroadcastApiRequestFactory, BroadcastApiResponseProcessor } from "../apis/BroadcastApi";
export declare class ObservableBroadcastApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: BroadcastApiRequestFactory, responseProcessor?: BroadcastApiResponseProcessor);
    createBroadcastMessage(messageBroadcastIn: MessageBroadcastIn, idempotencyKey?: string, _options?: Configuration): Observable<MessageBroadcastOut>;
}
import { EndpointApiRequestFactory, EndpointApiResponseProcessor } from "../apis/EndpointApi";
export declare class ObservableEndpointApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: EndpointApiRequestFactory, responseProcessor?: EndpointApiResponseProcessor);
    v1EndpointCreate(appId: string, endpointIn: EndpointIn, idempotencyKey?: string, _options?: Configuration): Observable<EndpointOut>;
    v1EndpointDelete(appId: string, endpointId: string, _options?: Configuration): Observable<void>;
    v1EndpointGet(appId: string, endpointId: string, _options?: Configuration): Observable<EndpointOut>;
    v1EndpointGetHeaders(appId: string, endpointId: string, _options?: Configuration): Observable<EndpointHeadersOut>;
    v1EndpointGetSecret(appId: string, endpointId: string, _options?: Configuration): Observable<EndpointSecretOut>;
    v1EndpointGetStats(appId: string, endpointId: string, since?: Date, until?: Date, _options?: Configuration): Observable<EndpointStats>;
    v1EndpointList(appId: string, limit?: number, iterator?: string, order?: Ordering, _options?: Configuration): Observable<ListResponseEndpointOut>;
    v1EndpointPatch(appId: string, endpointId: string, endpointPatch: EndpointPatch, _options?: Configuration): Observable<EndpointOut>;
    v1EndpointPatchHeaders(appId: string, endpointId: string, endpointHeadersPatchIn: EndpointHeadersPatchIn, _options?: Configuration): Observable<void>;
    v1EndpointRecover(appId: string, endpointId: string, recoverIn: RecoverIn, idempotencyKey?: string, _options?: Configuration): Observable<RecoverOut>;
    v1EndpointReplay(appId: string, endpointId: string, replayIn: ReplayIn, idempotencyKey?: string, _options?: Configuration): Observable<ReplayOut>;
    v1EndpointRotateSecret(appId: string, endpointId: string, endpointSecretRotateIn: EndpointSecretRotateIn, idempotencyKey?: string, _options?: Configuration): Observable<void>;
    v1EndpointSendExample(appId: string, endpointId: string, eventExampleIn: EventExampleIn, idempotencyKey?: string, _options?: Configuration): Observable<MessageOut>;
    v1EndpointTransformationGet(appId: string, endpointId: string, _options?: Configuration): Observable<EndpointTransformationOut>;
    v1EndpointTransformationPartialUpdate(appId: string, endpointId: string, endpointTransformationIn: EndpointTransformationIn, _options?: Configuration): Observable<void>;
    v1EndpointTransformationSimulate(appId: string, endpointId: string, endpointTransformationSimulateIn: EndpointTransformationSimulateIn, idempotencyKey?: string, _options?: Configuration): Observable<EndpointTransformationSimulateOut>;
    v1EndpointUpdate(appId: string, endpointId: string, endpointUpdate: EndpointUpdate, _options?: Configuration): Observable<EndpointOut>;
    v1EndpointUpdateHeaders(appId: string, endpointId: string, endpointHeadersIn: EndpointHeadersIn, _options?: Configuration): Observable<void>;
}
import { EnvironmentApiRequestFactory, EnvironmentApiResponseProcessor } from "../apis/EnvironmentApi";
export declare class ObservableEnvironmentApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: EnvironmentApiRequestFactory, responseProcessor?: EnvironmentApiResponseProcessor);
    v1EnvironmentExport(idempotencyKey?: string, _options?: Configuration): Observable<EnvironmentOut>;
    v1EnvironmentExportGet(_options?: Configuration): Observable<EnvironmentOut>;
    v1EnvironmentImport(environmentIn: EnvironmentIn, idempotencyKey?: string, _options?: Configuration): Observable<void>;
}
import { EnvironmentSettingsApiRequestFactory, EnvironmentSettingsApiResponseProcessor } from "../apis/EnvironmentSettingsApi";
export declare class ObservableEnvironmentSettingsApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: EnvironmentSettingsApiRequestFactory, responseProcessor?: EnvironmentSettingsApiResponseProcessor);
    v1EnvironmentGetSettings(_options?: Configuration): Observable<EnvironmentSettingsOut>;
}
import { EventTypeApiRequestFactory, EventTypeApiResponseProcessor } from "../apis/EventTypeApi";
export declare class ObservableEventTypeApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: EventTypeApiRequestFactory, responseProcessor?: EventTypeApiResponseProcessor);
    v1EventTypeCreate(eventTypeIn: EventTypeIn, idempotencyKey?: string, _options?: Configuration): Observable<EventTypeOut>;
    v1EventTypeDelete(eventTypeName: string, expunge?: boolean, _options?: Configuration): Observable<void>;
    v1EventTypeExportOpenapi(idempotencyKey?: string, _options?: Configuration): Observable<ExportEventTypeOut>;
    v1EventTypeGenerateExample(eventTypeSchemaIn: EventTypeSchemaIn, idempotencyKey?: string, _options?: Configuration): Observable<EventTypeExampleOut>;
    v1EventTypeGet(eventTypeName: string, _options?: Configuration): Observable<EventTypeOut>;
    v1EventTypeGetRetrySchedule(eventTypeName: string, _options?: Configuration): Observable<RetryScheduleInOut>;
    v1EventTypeImportOpenapi(eventTypeImportOpenApiIn: EventTypeImportOpenApiIn, idempotencyKey?: string, _options?: Configuration): Observable<EventTypeImportOpenApiOut>;
    v1EventTypeList(limit?: number, iterator?: string, order?: Ordering, includeArchived?: boolean, withContent?: boolean, _options?: Configuration): Observable<ListResponseEventTypeOut>;
    v1EventTypePatch(eventTypeName: string, eventTypePatch: EventTypePatch, _options?: Configuration): Observable<EventTypeOut>;
    v1EventTypeUpdate(eventTypeName: string, eventTypeUpdate: EventTypeUpdate, _options?: Configuration): Observable<EventTypeOut>;
    v1EventTypeUpdateRetrySchedule(eventTypeName: string, retryScheduleInOut: RetryScheduleInOut, _options?: Configuration): Observable<RetryScheduleInOut>;
}
import { HealthApiRequestFactory, HealthApiResponseProcessor } from "../apis/HealthApi";
export declare class ObservableHealthApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: HealthApiRequestFactory, responseProcessor?: HealthApiResponseProcessor);
    v1HealthGet(_options?: Configuration): Observable<void>;
}
import { InboundApiRequestFactory, InboundApiResponseProcessor } from "../apis/InboundApi";
export declare class ObservableInboundApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: InboundApiRequestFactory, responseProcessor?: InboundApiResponseProcessor);
    v1InboundMsg(appId: string, inboundToken: string, body: string, eventType?: string, idempotencyKey?: string, _options?: Configuration): Observable<MessageOut>;
    v1InboundRotateUrl(appId: string, idempotencyKey?: string, _options?: Configuration): Observable<RotatedUrlOut>;
}
import { IntegrationApiRequestFactory, IntegrationApiResponseProcessor } from "../apis/IntegrationApi";
export declare class ObservableIntegrationApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: IntegrationApiRequestFactory, responseProcessor?: IntegrationApiResponseProcessor);
    v1IntegrationCreate(appId: string, integrationIn: IntegrationIn, idempotencyKey?: string, _options?: Configuration): Observable<IntegrationOut>;
    v1IntegrationDelete(appId: string, integId: string, _options?: Configuration): Observable<void>;
    v1IntegrationGet(appId: string, integId: string, _options?: Configuration): Observable<IntegrationOut>;
    v1IntegrationGetKey(appId: string, integId: string, _options?: Configuration): Observable<IntegrationKeyOut>;
    v1IntegrationList(appId: string, limit?: number, iterator?: string, _options?: Configuration): Observable<ListResponseIntegrationOut>;
    v1IntegrationRotateKey(appId: string, integId: string, idempotencyKey?: string, _options?: Configuration): Observable<IntegrationKeyOut>;
    v1IntegrationUpdate(appId: string, integId: string, integrationUpdate: IntegrationUpdate, _options?: Configuration): Observable<IntegrationOut>;
}
import { MessageApiRequestFactory, MessageApiResponseProcessor } from "../apis/MessageApi";
export declare class ObservableMessageApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: MessageApiRequestFactory, responseProcessor?: MessageApiResponseProcessor);
    createMessageAttemptForEndpoint(appId: string, endpointId: string, messageIn: MessageIn, idempotencyKey?: string, _options?: Configuration): Observable<MessageAttemptOut>;
    v1MessageCreate(appId: string, messageIn: MessageIn, withContent?: boolean, idempotencyKey?: string, _options?: Configuration): Observable<MessageOut>;
    v1MessageExpungeContent(appId: string, msgId: string, _options?: Configuration): Observable<void>;
    v1MessageGet(appId: string, msgId: string, withContent?: boolean, _options?: Configuration): Observable<MessageOut>;
    v1MessageGetRawPayload(appId: string, msgId: string, _options?: Configuration): Observable<MessageRawPayloadOut>;
    v1MessageList(appId: string, limit?: number, iterator?: string, channel?: string, before?: Date, after?: Date, withContent?: boolean, tag?: string, eventTypes?: Array<string>, _options?: Configuration): Observable<ListResponseMessageOut>;
    v1MessageStream(appId: string, limit?: number, iterator?: string, eventTypes?: Array<string>, channels?: Array<string>, _options?: Configuration): Observable<MessageStreamOut>;
}
import { MessageAttemptApiRequestFactory, MessageAttemptApiResponseProcessor } from "../apis/MessageAttemptApi";
export declare class ObservableMessageAttemptApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: MessageAttemptApiRequestFactory, responseProcessor?: MessageAttemptApiResponseProcessor);
    v1MessageAttemptExpungeContent(appId: string, msgId: string, attemptId: string, _options?: Configuration): Observable<void>;
    v1MessageAttemptGet(appId: string, msgId: string, attemptId: string, _options?: Configuration): Observable<MessageAttemptOut>;
    v1MessageAttemptGetHeaders(appId: string, msgId: string, attemptId: string, _options?: Configuration): Observable<MessageAttemptHeadersOut>;
    v1MessageAttemptListAttemptedDestinations(appId: string, msgId: string, limit?: number, iterator?: string, _options?: Configuration): Observable<ListResponseMessageEndpointOut>;
    v1MessageAttemptListAttemptedMessages(appId: string, endpointId: string, limit?: number, iterator?: string, channel?: string, tag?: string, status?: MessageStatus, before?: Date, after?: Date, withContent?: boolean, eventTypes?: Array<string>, _options?: Configuration): Observable<ListResponseEndpointMessageOut>;
    v1MessageAttemptListByEndpoint(appId: string, endpointId: string, limit?: number, iterator?: string, status?: MessageStatus, statusCodeClass?: StatusCodeClass, channel?: string, tag?: string, before?: Date, after?: Date, withContent?: boolean, withMsg?: boolean, eventTypes?: Array<string>, _options?: Configuration): Observable<ListResponseMessageAttemptOut>;
    v1MessageAttemptListByEndpointDeprecated(appId: string, msgId: string, endpointId: string, limit?: number, iterator?: string, channel?: string, tag?: string, status?: MessageStatus, before?: Date, after?: Date, eventTypes?: Array<string>, _options?: Configuration): Observable<ListResponseMessageAttemptEndpointOut>;
    v1MessageAttemptListByMsg(appId: string, msgId: string, limit?: number, iterator?: string, status?: MessageStatus, statusCodeClass?: StatusCodeClass, channel?: string, tag?: string, endpointId?: string, before?: Date, after?: Date, withContent?: boolean, eventTypes?: Array<string>, _options?: Configuration): Observable<ListResponseMessageAttemptOut>;
    v1MessageAttemptListByMsgDeprecated(appId: string, msgId: string, limit?: number, iterator?: string, endpointId?: string, channel?: string, tag?: string, status?: MessageStatus, before?: Date, after?: Date, statusCodeClass?: StatusCodeClass, eventTypes?: Array<string>, _options?: Configuration): Observable<ListResponseMessageAttemptOut>;
    v1MessageAttemptResend(appId: string, msgId: string, endpointId: string, idempotencyKey?: string, _options?: Configuration): Observable<void>;
}
import { StatisticsApiRequestFactory, StatisticsApiResponseProcessor } from "../apis/StatisticsApi";
export declare class ObservableStatisticsApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: StatisticsApiRequestFactory, responseProcessor?: StatisticsApiResponseProcessor);
    v1StatisticsAggregateAppStats(appUsageStatsIn: AppUsageStatsIn, idempotencyKey?: string, _options?: Configuration): Observable<AppUsageStatsOut>;
    v1StatisticsAggregateEventTypes(_options?: Configuration): Observable<AggregateEventTypesOut>;
    v1StatsAppAttempts(appId: string, startDate?: Date, endDate?: Date, _options?: Configuration): Observable<AttemptStatisticsResponse>;
    v1StatsEndpointAttempts(appId: string, endpointId: string, startDate?: Date, endDate?: Date, _options?: Configuration): Observable<AttemptStatisticsResponse>;
}
import { TransformationTemplateApiRequestFactory, TransformationTemplateApiResponseProcessor } from "../apis/TransformationTemplateApi";
export declare class ObservableTransformationTemplateApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: TransformationTemplateApiRequestFactory, responseProcessor?: TransformationTemplateApiResponseProcessor);
    v1TransformationTemplateCreate(templateIn: TemplateIn, idempotencyKey?: string, _options?: Configuration): Observable<TemplateOut>;
    v1TransformationTemplateDelete(transformationTemplateId: string, _options?: Configuration): Observable<void>;
    v1TransformationTemplateGenerate(generateIn: GenerateIn, idempotencyKey?: string, _options?: Configuration): Observable<GenerateOut>;
    v1TransformationTemplateGet(transformationTemplateId: string, _options?: Configuration): Observable<TemplateOut>;
    v1TransformationTemplateList(limit?: number, iterator?: string, order?: Ordering, _options?: Configuration): Observable<ListResponseTemplateOut>;
    v1TransformationTemplateOauthDiscord(oauthPayloadIn: OauthPayloadIn, idempotencyKey?: string, _options?: Configuration): Observable<OauthPayloadOut>;
    v1TransformationTemplateOauthSlack(oauthPayloadIn: OauthPayloadIn, idempotencyKey?: string, _options?: Configuration): Observable<OauthPayloadOut>;
    v1TransformationTemplatePatch(transformationTemplateId: string, templatePatch: TemplatePatch, _options?: Configuration): Observable<TemplateOut>;
    v1TransformationTemplateSimulate(transformationSimulateIn: TransformationSimulateIn, idempotencyKey?: string, _options?: Configuration): Observable<TransformationSimulateOut>;
    v1TransformationTemplateUpdate(transformationTemplateId: string, templateUpdate: TemplateUpdate, _options?: Configuration): Observable<TemplateOut>;
}
