import { Configuration } from '../configuration';
import { AggregateEventTypesOut } from '../models/AggregateEventTypesOut';
import { AppPortalAccessIn } from '../models/AppPortalAccessIn';
import { AppPortalAccessOut } from '../models/AppPortalAccessOut';
import { AppUsageStatsIn } from '../models/AppUsageStatsIn';
import { AppUsageStatsOut } from '../models/AppUsageStatsOut';
import { ApplicationIn } from '../models/ApplicationIn';
import { ApplicationOut } from '../models/ApplicationOut';
import { ApplicationPatch } from '../models/ApplicationPatch';
import { ApplicationStats } from '../models/ApplicationStats';
import { ApplicationTokenExpireIn } from '../models/ApplicationTokenExpireIn';
import { AttemptStatisticsResponse } from '../models/AttemptStatisticsResponse';
import { BackgroundTaskOut } from '../models/BackgroundTaskOut';
import { BackgroundTaskStatus } from '../models/BackgroundTaskStatus';
import { BackgroundTaskType } from '../models/BackgroundTaskType';
import { DashboardAccessOut } from '../models/DashboardAccessOut';
import { EndpointHeadersIn } from '../models/EndpointHeadersIn';
import { EndpointHeadersOut } from '../models/EndpointHeadersOut';
import { EndpointHeadersPatchIn } from '../models/EndpointHeadersPatchIn';
import { EndpointIn } from '../models/EndpointIn';
import { EndpointOut } from '../models/EndpointOut';
import { EndpointPatch } from '../models/EndpointPatch';
import { EndpointSecretOut } from '../models/EndpointSecretOut';
import { EndpointSecretRotateIn } from '../models/EndpointSecretRotateIn';
import { EndpointStats } from '../models/EndpointStats';
import { EndpointTransformationIn } from '../models/EndpointTransformationIn';
import { EndpointTransformationOut } from '../models/EndpointTransformationOut';
import { EndpointTransformationSimulateIn } from '../models/EndpointTransformationSimulateIn';
import { EndpointTransformationSimulateOut } from '../models/EndpointTransformationSimulateOut';
import { EndpointUpdate } from '../models/EndpointUpdate';
import { EnvironmentIn } from '../models/EnvironmentIn';
import { EnvironmentOut } from '../models/EnvironmentOut';
import { EnvironmentSettingsOut } from '../models/EnvironmentSettingsOut';
import { EventExampleIn } from '../models/EventExampleIn';
import { EventTypeExampleOut } from '../models/EventTypeExampleOut';
import { EventTypeImportOpenApiIn } from '../models/EventTypeImportOpenApiIn';
import { EventTypeImportOpenApiOut } from '../models/EventTypeImportOpenApiOut';
import { EventTypeIn } from '../models/EventTypeIn';
import { EventTypeOut } from '../models/EventTypeOut';
import { EventTypePatch } from '../models/EventTypePatch';
import { EventTypeSchemaIn } from '../models/EventTypeSchemaIn';
import { EventTypeUpdate } from '../models/EventTypeUpdate';
import { ExportEventTypeOut } from '../models/ExportEventTypeOut';
import { GenerateIn } from '../models/GenerateIn';
import { GenerateOut } from '../models/GenerateOut';
import { IntegrationIn } from '../models/IntegrationIn';
import { IntegrationKeyOut } from '../models/IntegrationKeyOut';
import { IntegrationOut } from '../models/IntegrationOut';
import { IntegrationUpdate } from '../models/IntegrationUpdate';
import { ListResponseApplicationOut } from '../models/ListResponseApplicationOut';
import { ListResponseApplicationStats } from '../models/ListResponseApplicationStats';
import { ListResponseBackgroundTaskOut } from '../models/ListResponseBackgroundTaskOut';
import { ListResponseEndpointMessageOut } from '../models/ListResponseEndpointMessageOut';
import { ListResponseEndpointOut } from '../models/ListResponseEndpointOut';
import { ListResponseEventTypeOut } from '../models/ListResponseEventTypeOut';
import { ListResponseIntegrationOut } from '../models/ListResponseIntegrationOut';
import { ListResponseMessageAttemptEndpointOut } from '../models/ListResponseMessageAttemptEndpointOut';
import { ListResponseMessageAttemptOut } from '../models/ListResponseMessageAttemptOut';
import { ListResponseMessageEndpointOut } from '../models/ListResponseMessageEndpointOut';
import { ListResponseMessageOut } from '../models/ListResponseMessageOut';
import { ListResponseTemplateOut } from '../models/ListResponseTemplateOut';
import { MessageAttemptHeadersOut } from '../models/MessageAttemptHeadersOut';
import { MessageAttemptOut } from '../models/MessageAttemptOut';
import { MessageBroadcastIn } from '../models/MessageBroadcastIn';
import { MessageBroadcastOut } from '../models/MessageBroadcastOut';
import { MessageIn } from '../models/MessageIn';
import { MessageOut } from '../models/MessageOut';
import { MessageRawPayloadOut } from '../models/MessageRawPayloadOut';
import { MessageStatus } from '../models/MessageStatus';
import { MessageStreamOut } from '../models/MessageStreamOut';
import { OauthPayloadIn } from '../models/OauthPayloadIn';
import { OauthPayloadOut } from '../models/OauthPayloadOut';
import { OneTimeTokenIn } from '../models/OneTimeTokenIn';
import { OneTimeTokenOut } from '../models/OneTimeTokenOut';
import { Ordering } from '../models/Ordering';
import { RecoverIn } from '../models/RecoverIn';
import { RecoverOut } from '../models/RecoverOut';
import { ReplayIn } from '../models/ReplayIn';
import { ReplayOut } from '../models/ReplayOut';
import { RetryScheduleInOut } from '../models/RetryScheduleInOut';
import { RotatedUrlOut } from '../models/RotatedUrlOut';
import { StatusCodeClass } from '../models/StatusCodeClass';
import { TemplateIn } from '../models/TemplateIn';
import { TemplateOut } from '../models/TemplateOut';
import { TemplatePatch } from '../models/TemplatePatch';
import { TemplateUpdate } from '../models/TemplateUpdate';
import { TransformationSimulateIn } from '../models/TransformationSimulateIn';
import { TransformationSimulateOut } from '../models/TransformationSimulateOut';
import { ApplicationApiRequestFactory, ApplicationApiResponseProcessor } from "../apis/ApplicationApi";
export interface ApplicationApiGetAppUsageStatsApiV1AppStatsUsageGetRequest {
    since: Date;
    until: Date;
    limit?: number;
    iterator?: string;
}
export interface ApplicationApiV1ApplicationCreateRequest {
    applicationIn: ApplicationIn;
    getIfExists?: boolean;
    idempotencyKey?: string;
}
export interface ApplicationApiV1ApplicationDeleteRequest {
    appId: string;
}
export interface ApplicationApiV1ApplicationGetRequest {
    appId: string;
}
export interface ApplicationApiV1ApplicationGetStatsRequest {
    since: Date;
    until: Date;
    appId: string;
}
export interface ApplicationApiV1ApplicationListRequest {
    limit?: number;
    iterator?: string;
    order?: Ordering;
}
export interface ApplicationApiV1ApplicationPatchRequest {
    appId: string;
    applicationPatch: ApplicationPatch;
}
export interface ApplicationApiV1ApplicationUpdateRequest {
    appId: string;
    applicationIn: ApplicationIn;
}
export declare class ObjectApplicationApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: ApplicationApiRequestFactory, responseProcessor?: ApplicationApiResponseProcessor);
    getAppUsageStatsApiV1AppStatsUsageGet(param: ApplicationApiGetAppUsageStatsApiV1AppStatsUsageGetRequest, options?: Configuration): Promise<ListResponseApplicationStats>;
    v1ApplicationCreate(param: ApplicationApiV1ApplicationCreateRequest, options?: Configuration): Promise<ApplicationOut>;
    v1ApplicationDelete(param: ApplicationApiV1ApplicationDeleteRequest, options?: Configuration): Promise<void>;
    v1ApplicationGet(param: ApplicationApiV1ApplicationGetRequest, options?: Configuration): Promise<ApplicationOut>;
    v1ApplicationGetStats(param: ApplicationApiV1ApplicationGetStatsRequest, options?: Configuration): Promise<ApplicationStats>;
    v1ApplicationList(param: ApplicationApiV1ApplicationListRequest, options?: Configuration): Promise<ListResponseApplicationOut>;
    v1ApplicationPatch(param: ApplicationApiV1ApplicationPatchRequest, options?: Configuration): Promise<ApplicationOut>;
    v1ApplicationUpdate(param: ApplicationApiV1ApplicationUpdateRequest, options?: Configuration): Promise<ApplicationOut>;
}
import { AuthenticationApiRequestFactory, AuthenticationApiResponseProcessor } from "../apis/AuthenticationApi";
export interface AuthenticationApiV1AuthenticationAppPortalAccessRequest {
    appId: string;
    appPortalAccessIn: AppPortalAccessIn;
    idempotencyKey?: string;
}
export interface AuthenticationApiV1AuthenticationDashboardAccessRequest {
    appId: string;
    idempotencyKey?: string;
}
export interface AuthenticationApiV1AuthenticationExchangeOneTimeTokenRequest {
    oneTimeTokenIn: OneTimeTokenIn;
    idempotencyKey?: string;
}
export interface AuthenticationApiV1AuthenticationExpireAllRequest {
    appId: string;
    applicationTokenExpireIn: ApplicationTokenExpireIn;
    idempotencyKey?: string;
}
export interface AuthenticationApiV1AuthenticationLogoutRequest {
    idempotencyKey?: string;
}
export declare class ObjectAuthenticationApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: AuthenticationApiRequestFactory, responseProcessor?: AuthenticationApiResponseProcessor);
    v1AuthenticationAppPortalAccess(param: AuthenticationApiV1AuthenticationAppPortalAccessRequest, options?: Configuration): Promise<AppPortalAccessOut>;
    v1AuthenticationDashboardAccess(param: AuthenticationApiV1AuthenticationDashboardAccessRequest, options?: Configuration): Promise<DashboardAccessOut>;
    v1AuthenticationExchangeOneTimeToken(param: AuthenticationApiV1AuthenticationExchangeOneTimeTokenRequest, options?: Configuration): Promise<OneTimeTokenOut>;
    v1AuthenticationExpireAll(param: AuthenticationApiV1AuthenticationExpireAllRequest, options?: Configuration): Promise<void>;
    v1AuthenticationLogout(param: AuthenticationApiV1AuthenticationLogoutRequest, options?: Configuration): Promise<void>;
}
import { BackgroundTasksApiRequestFactory, BackgroundTasksApiResponseProcessor } from "../apis/BackgroundTasksApi";
export interface BackgroundTasksApiGetBackgroundTaskRequest {
    taskId: string;
}
export interface BackgroundTasksApiListBackgroundTasksRequest {
    status?: BackgroundTaskStatus;
    task?: BackgroundTaskType;
    limit?: number;
    iterator?: string;
    order?: Ordering;
}
export declare class ObjectBackgroundTasksApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: BackgroundTasksApiRequestFactory, responseProcessor?: BackgroundTasksApiResponseProcessor);
    getBackgroundTask(param: BackgroundTasksApiGetBackgroundTaskRequest, options?: Configuration): Promise<BackgroundTaskOut>;
    listBackgroundTasks(param: BackgroundTasksApiListBackgroundTasksRequest, options?: Configuration): Promise<ListResponseBackgroundTaskOut>;
}
import { BroadcastApiRequestFactory, BroadcastApiResponseProcessor } from "../apis/BroadcastApi";
export interface BroadcastApiCreateBroadcastMessageRequest {
    messageBroadcastIn: MessageBroadcastIn;
    idempotencyKey?: string;
}
export declare class ObjectBroadcastApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: BroadcastApiRequestFactory, responseProcessor?: BroadcastApiResponseProcessor);
    createBroadcastMessage(param: BroadcastApiCreateBroadcastMessageRequest, options?: Configuration): Promise<MessageBroadcastOut>;
}
import { EndpointApiRequestFactory, EndpointApiResponseProcessor } from "../apis/EndpointApi";
export interface EndpointApiV1EndpointCreateRequest {
    appId: string;
    endpointIn: EndpointIn;
    idempotencyKey?: string;
}
export interface EndpointApiV1EndpointDeleteRequest {
    appId: string;
    endpointId: string;
}
export interface EndpointApiV1EndpointGetRequest {
    appId: string;
    endpointId: string;
}
export interface EndpointApiV1EndpointGetHeadersRequest {
    appId: string;
    endpointId: string;
}
export interface EndpointApiV1EndpointGetSecretRequest {
    appId: string;
    endpointId: string;
}
export interface EndpointApiV1EndpointGetStatsRequest {
    appId: string;
    endpointId: string;
    since?: Date;
    until?: Date;
}
export interface EndpointApiV1EndpointListRequest {
    appId: string;
    limit?: number;
    iterator?: string;
    order?: Ordering;
}
export interface EndpointApiV1EndpointPatchRequest {
    appId: string;
    endpointId: string;
    endpointPatch: EndpointPatch;
}
export interface EndpointApiV1EndpointPatchHeadersRequest {
    appId: string;
    endpointId: string;
    endpointHeadersPatchIn: EndpointHeadersPatchIn;
}
export interface EndpointApiV1EndpointRecoverRequest {
    appId: string;
    endpointId: string;
    recoverIn: RecoverIn;
    idempotencyKey?: string;
}
export interface EndpointApiV1EndpointReplayRequest {
    appId: string;
    endpointId: string;
    replayIn: ReplayIn;
    idempotencyKey?: string;
}
export interface EndpointApiV1EndpointRotateSecretRequest {
    appId: string;
    endpointId: string;
    endpointSecretRotateIn: EndpointSecretRotateIn;
    idempotencyKey?: string;
}
export interface EndpointApiV1EndpointSendExampleRequest {
    appId: string;
    endpointId: string;
    eventExampleIn: EventExampleIn;
    idempotencyKey?: string;
}
export interface EndpointApiV1EndpointTransformationGetRequest {
    appId: string;
    endpointId: string;
}
export interface EndpointApiV1EndpointTransformationPartialUpdateRequest {
    appId: string;
    endpointId: string;
    endpointTransformationIn: EndpointTransformationIn;
}
export interface EndpointApiV1EndpointTransformationSimulateRequest {
    appId: string;
    endpointId: string;
    endpointTransformationSimulateIn: EndpointTransformationSimulateIn;
    idempotencyKey?: string;
}
export interface EndpointApiV1EndpointUpdateRequest {
    appId: string;
    endpointId: string;
    endpointUpdate: EndpointUpdate;
}
export interface EndpointApiV1EndpointUpdateHeadersRequest {
    appId: string;
    endpointId: string;
    endpointHeadersIn: EndpointHeadersIn;
}
export declare class ObjectEndpointApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: EndpointApiRequestFactory, responseProcessor?: EndpointApiResponseProcessor);
    v1EndpointCreate(param: EndpointApiV1EndpointCreateRequest, options?: Configuration): Promise<EndpointOut>;
    v1EndpointDelete(param: EndpointApiV1EndpointDeleteRequest, options?: Configuration): Promise<void>;
    v1EndpointGet(param: EndpointApiV1EndpointGetRequest, options?: Configuration): Promise<EndpointOut>;
    v1EndpointGetHeaders(param: EndpointApiV1EndpointGetHeadersRequest, options?: Configuration): Promise<EndpointHeadersOut>;
    v1EndpointGetSecret(param: EndpointApiV1EndpointGetSecretRequest, options?: Configuration): Promise<EndpointSecretOut>;
    v1EndpointGetStats(param: EndpointApiV1EndpointGetStatsRequest, options?: Configuration): Promise<EndpointStats>;
    v1EndpointList(param: EndpointApiV1EndpointListRequest, options?: Configuration): Promise<ListResponseEndpointOut>;
    v1EndpointPatch(param: EndpointApiV1EndpointPatchRequest, options?: Configuration): Promise<EndpointOut>;
    v1EndpointPatchHeaders(param: EndpointApiV1EndpointPatchHeadersRequest, options?: Configuration): Promise<void>;
    v1EndpointRecover(param: EndpointApiV1EndpointRecoverRequest, options?: Configuration): Promise<RecoverOut>;
    v1EndpointReplay(param: EndpointApiV1EndpointReplayRequest, options?: Configuration): Promise<ReplayOut>;
    v1EndpointRotateSecret(param: EndpointApiV1EndpointRotateSecretRequest, options?: Configuration): Promise<void>;
    v1EndpointSendExample(param: EndpointApiV1EndpointSendExampleRequest, options?: Configuration): Promise<MessageOut>;
    v1EndpointTransformationGet(param: EndpointApiV1EndpointTransformationGetRequest, options?: Configuration): Promise<EndpointTransformationOut>;
    v1EndpointTransformationPartialUpdate(param: EndpointApiV1EndpointTransformationPartialUpdateRequest, options?: Configuration): Promise<void>;
    v1EndpointTransformationSimulate(param: EndpointApiV1EndpointTransformationSimulateRequest, options?: Configuration): Promise<EndpointTransformationSimulateOut>;
    v1EndpointUpdate(param: EndpointApiV1EndpointUpdateRequest, options?: Configuration): Promise<EndpointOut>;
    v1EndpointUpdateHeaders(param: EndpointApiV1EndpointUpdateHeadersRequest, options?: Configuration): Promise<void>;
}
import { EnvironmentApiRequestFactory, EnvironmentApiResponseProcessor } from "../apis/EnvironmentApi";
export interface EnvironmentApiV1EnvironmentExportRequest {
    idempotencyKey?: string;
}
export interface EnvironmentApiV1EnvironmentExportGetRequest {
}
export interface EnvironmentApiV1EnvironmentImportRequest {
    environmentIn: EnvironmentIn;
    idempotencyKey?: string;
}
export declare class ObjectEnvironmentApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: EnvironmentApiRequestFactory, responseProcessor?: EnvironmentApiResponseProcessor);
    v1EnvironmentExport(param: EnvironmentApiV1EnvironmentExportRequest, options?: Configuration): Promise<EnvironmentOut>;
    v1EnvironmentExportGet(param: EnvironmentApiV1EnvironmentExportGetRequest, options?: Configuration): Promise<EnvironmentOut>;
    v1EnvironmentImport(param: EnvironmentApiV1EnvironmentImportRequest, options?: Configuration): Promise<void>;
}
import { EnvironmentSettingsApiRequestFactory, EnvironmentSettingsApiResponseProcessor } from "../apis/EnvironmentSettingsApi";
export interface EnvironmentSettingsApiV1EnvironmentGetSettingsRequest {
}
export declare class ObjectEnvironmentSettingsApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: EnvironmentSettingsApiRequestFactory, responseProcessor?: EnvironmentSettingsApiResponseProcessor);
    v1EnvironmentGetSettings(param: EnvironmentSettingsApiV1EnvironmentGetSettingsRequest, options?: Configuration): Promise<EnvironmentSettingsOut>;
}
import { EventTypeApiRequestFactory, EventTypeApiResponseProcessor } from "../apis/EventTypeApi";
export interface EventTypeApiV1EventTypeCreateRequest {
    eventTypeIn: EventTypeIn;
    idempotencyKey?: string;
}
export interface EventTypeApiV1EventTypeDeleteRequest {
    eventTypeName: string;
    expunge?: boolean;
}
export interface EventTypeApiV1EventTypeExportOpenapiRequest {
    idempotencyKey?: string;
}
export interface EventTypeApiV1EventTypeGenerateExampleRequest {
    eventTypeSchemaIn: EventTypeSchemaIn;
    idempotencyKey?: string;
}
export interface EventTypeApiV1EventTypeGetRequest {
    eventTypeName: string;
}
export interface EventTypeApiV1EventTypeGetRetryScheduleRequest {
    eventTypeName: string;
}
export interface EventTypeApiV1EventTypeImportOpenapiRequest {
    eventTypeImportOpenApiIn: EventTypeImportOpenApiIn;
    idempotencyKey?: string;
}
export interface EventTypeApiV1EventTypeListRequest {
    limit?: number;
    iterator?: string;
    order?: Ordering;
    includeArchived?: boolean;
    withContent?: boolean;
}
export interface EventTypeApiV1EventTypePatchRequest {
    eventTypeName: string;
    eventTypePatch: EventTypePatch;
}
export interface EventTypeApiV1EventTypeUpdateRequest {
    eventTypeName: string;
    eventTypeUpdate: EventTypeUpdate;
}
export interface EventTypeApiV1EventTypeUpdateRetryScheduleRequest {
    eventTypeName: string;
    retryScheduleInOut: RetryScheduleInOut;
}
export declare class ObjectEventTypeApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: EventTypeApiRequestFactory, responseProcessor?: EventTypeApiResponseProcessor);
    v1EventTypeCreate(param: EventTypeApiV1EventTypeCreateRequest, options?: Configuration): Promise<EventTypeOut>;
    v1EventTypeDelete(param: EventTypeApiV1EventTypeDeleteRequest, options?: Configuration): Promise<void>;
    v1EventTypeExportOpenapi(param: EventTypeApiV1EventTypeExportOpenapiRequest, options?: Configuration): Promise<ExportEventTypeOut>;
    v1EventTypeGenerateExample(param: EventTypeApiV1EventTypeGenerateExampleRequest, options?: Configuration): Promise<EventTypeExampleOut>;
    v1EventTypeGet(param: EventTypeApiV1EventTypeGetRequest, options?: Configuration): Promise<EventTypeOut>;
    v1EventTypeGetRetrySchedule(param: EventTypeApiV1EventTypeGetRetryScheduleRequest, options?: Configuration): Promise<RetryScheduleInOut>;
    v1EventTypeImportOpenapi(param: EventTypeApiV1EventTypeImportOpenapiRequest, options?: Configuration): Promise<EventTypeImportOpenApiOut>;
    v1EventTypeList(param: EventTypeApiV1EventTypeListRequest, options?: Configuration): Promise<ListResponseEventTypeOut>;
    v1EventTypePatch(param: EventTypeApiV1EventTypePatchRequest, options?: Configuration): Promise<EventTypeOut>;
    v1EventTypeUpdate(param: EventTypeApiV1EventTypeUpdateRequest, options?: Configuration): Promise<EventTypeOut>;
    v1EventTypeUpdateRetrySchedule(param: EventTypeApiV1EventTypeUpdateRetryScheduleRequest, options?: Configuration): Promise<RetryScheduleInOut>;
}
import { HealthApiRequestFactory, HealthApiResponseProcessor } from "../apis/HealthApi";
export interface HealthApiV1HealthGetRequest {
}
export declare class ObjectHealthApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: HealthApiRequestFactory, responseProcessor?: HealthApiResponseProcessor);
    v1HealthGet(param: HealthApiV1HealthGetRequest, options?: Configuration): Promise<void>;
}
import { InboundApiRequestFactory, InboundApiResponseProcessor } from "../apis/InboundApi";
export interface InboundApiV1InboundMsgRequest {
    appId: string;
    inboundToken: string;
    body: string;
    eventType?: string;
    idempotencyKey?: string;
}
export interface InboundApiV1InboundRotateUrlRequest {
    appId: string;
    idempotencyKey?: string;
}
export declare class ObjectInboundApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: InboundApiRequestFactory, responseProcessor?: InboundApiResponseProcessor);
    v1InboundMsg(param: InboundApiV1InboundMsgRequest, options?: Configuration): Promise<MessageOut>;
    v1InboundRotateUrl(param: InboundApiV1InboundRotateUrlRequest, options?: Configuration): Promise<RotatedUrlOut>;
}
import { IntegrationApiRequestFactory, IntegrationApiResponseProcessor } from "../apis/IntegrationApi";
export interface IntegrationApiV1IntegrationCreateRequest {
    appId: string;
    integrationIn: IntegrationIn;
    idempotencyKey?: string;
}
export interface IntegrationApiV1IntegrationDeleteRequest {
    appId: string;
    integId: string;
}
export interface IntegrationApiV1IntegrationGetRequest {
    appId: string;
    integId: string;
}
export interface IntegrationApiV1IntegrationGetKeyRequest {
    appId: string;
    integId: string;
}
export interface IntegrationApiV1IntegrationListRequest {
    appId: string;
    limit?: number;
    iterator?: string;
}
export interface IntegrationApiV1IntegrationRotateKeyRequest {
    appId: string;
    integId: string;
    idempotencyKey?: string;
}
export interface IntegrationApiV1IntegrationUpdateRequest {
    appId: string;
    integId: string;
    integrationUpdate: IntegrationUpdate;
}
export declare class ObjectIntegrationApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: IntegrationApiRequestFactory, responseProcessor?: IntegrationApiResponseProcessor);
    v1IntegrationCreate(param: IntegrationApiV1IntegrationCreateRequest, options?: Configuration): Promise<IntegrationOut>;
    v1IntegrationDelete(param: IntegrationApiV1IntegrationDeleteRequest, options?: Configuration): Promise<void>;
    v1IntegrationGet(param: IntegrationApiV1IntegrationGetRequest, options?: Configuration): Promise<IntegrationOut>;
    v1IntegrationGetKey(param: IntegrationApiV1IntegrationGetKeyRequest, options?: Configuration): Promise<IntegrationKeyOut>;
    v1IntegrationList(param: IntegrationApiV1IntegrationListRequest, options?: Configuration): Promise<ListResponseIntegrationOut>;
    v1IntegrationRotateKey(param: IntegrationApiV1IntegrationRotateKeyRequest, options?: Configuration): Promise<IntegrationKeyOut>;
    v1IntegrationUpdate(param: IntegrationApiV1IntegrationUpdateRequest, options?: Configuration): Promise<IntegrationOut>;
}
import { MessageApiRequestFactory, MessageApiResponseProcessor } from "../apis/MessageApi";
export interface MessageApiCreateMessageAttemptForEndpointRequest {
    appId: string;
    endpointId: string;
    messageIn: MessageIn;
    idempotencyKey?: string;
}
export interface MessageApiV1MessageCreateRequest {
    appId: string;
    messageIn: MessageIn;
    withContent?: boolean;
    idempotencyKey?: string;
}
export interface MessageApiV1MessageExpungeContentRequest {
    appId: string;
    msgId: string;
}
export interface MessageApiV1MessageGetRequest {
    appId: string;
    msgId: string;
    withContent?: boolean;
}
export interface MessageApiV1MessageGetRawPayloadRequest {
    appId: string;
    msgId: string;
}
export interface MessageApiV1MessageListRequest {
    appId: string;
    limit?: number;
    iterator?: string;
    channel?: string;
    before?: Date;
    after?: Date;
    withContent?: boolean;
    tag?: string;
    eventTypes?: Array<string>;
}
export interface MessageApiV1MessageStreamRequest {
    appId: string;
    limit?: number;
    iterator?: string;
    eventTypes?: Array<string>;
    channels?: Array<string>;
}
export declare class ObjectMessageApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: MessageApiRequestFactory, responseProcessor?: MessageApiResponseProcessor);
    createMessageAttemptForEndpoint(param: MessageApiCreateMessageAttemptForEndpointRequest, options?: Configuration): Promise<MessageAttemptOut>;
    v1MessageCreate(param: MessageApiV1MessageCreateRequest, options?: Configuration): Promise<MessageOut>;
    v1MessageExpungeContent(param: MessageApiV1MessageExpungeContentRequest, options?: Configuration): Promise<void>;
    v1MessageGet(param: MessageApiV1MessageGetRequest, options?: Configuration): Promise<MessageOut>;
    v1MessageGetRawPayload(param: MessageApiV1MessageGetRawPayloadRequest, options?: Configuration): Promise<MessageRawPayloadOut>;
    v1MessageList(param: MessageApiV1MessageListRequest, options?: Configuration): Promise<ListResponseMessageOut>;
    v1MessageStream(param: MessageApiV1MessageStreamRequest, options?: Configuration): Promise<MessageStreamOut>;
}
import { MessageAttemptApiRequestFactory, MessageAttemptApiResponseProcessor } from "../apis/MessageAttemptApi";
export interface MessageAttemptApiV1MessageAttemptExpungeContentRequest {
    appId: string;
    msgId: string;
    attemptId: string;
}
export interface MessageAttemptApiV1MessageAttemptGetRequest {
    appId: string;
    msgId: string;
    attemptId: string;
}
export interface MessageAttemptApiV1MessageAttemptGetHeadersRequest {
    appId: string;
    msgId: string;
    attemptId: string;
}
export interface MessageAttemptApiV1MessageAttemptListAttemptedDestinationsRequest {
    appId: string;
    msgId: string;
    limit?: number;
    iterator?: string;
}
export interface MessageAttemptApiV1MessageAttemptListAttemptedMessagesRequest {
    appId: string;
    endpointId: string;
    limit?: number;
    iterator?: string;
    channel?: string;
    tag?: string;
    status?: MessageStatus;
    before?: Date;
    after?: Date;
    withContent?: boolean;
    eventTypes?: Array<string>;
}
export interface MessageAttemptApiV1MessageAttemptListByEndpointRequest {
    appId: string;
    endpointId: string;
    limit?: number;
    iterator?: string;
    status?: MessageStatus;
    statusCodeClass?: StatusCodeClass;
    channel?: string;
    tag?: string;
    before?: Date;
    after?: Date;
    withContent?: boolean;
    withMsg?: boolean;
    eventTypes?: Array<string>;
}
export interface MessageAttemptApiV1MessageAttemptListByEndpointDeprecatedRequest {
    appId: string;
    msgId: string;
    endpointId: string;
    limit?: number;
    iterator?: string;
    channel?: string;
    tag?: string;
    status?: MessageStatus;
    before?: Date;
    after?: Date;
    eventTypes?: Array<string>;
}
export interface MessageAttemptApiV1MessageAttemptListByMsgRequest {
    appId: string;
    msgId: string;
    limit?: number;
    iterator?: string;
    status?: MessageStatus;
    statusCodeClass?: StatusCodeClass;
    channel?: string;
    tag?: string;
    endpointId?: string;
    before?: Date;
    after?: Date;
    withContent?: boolean;
    eventTypes?: Array<string>;
}
export interface MessageAttemptApiV1MessageAttemptListByMsgDeprecatedRequest {
    appId: string;
    msgId: string;
    limit?: number;
    iterator?: string;
    endpointId?: string;
    channel?: string;
    tag?: string;
    status?: MessageStatus;
    before?: Date;
    after?: Date;
    statusCodeClass?: StatusCodeClass;
    eventTypes?: Array<string>;
}
export interface MessageAttemptApiV1MessageAttemptResendRequest {
    appId: string;
    msgId: string;
    endpointId: string;
    idempotencyKey?: string;
}
export declare class ObjectMessageAttemptApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: MessageAttemptApiRequestFactory, responseProcessor?: MessageAttemptApiResponseProcessor);
    v1MessageAttemptExpungeContent(param: MessageAttemptApiV1MessageAttemptExpungeContentRequest, options?: Configuration): Promise<void>;
    v1MessageAttemptGet(param: MessageAttemptApiV1MessageAttemptGetRequest, options?: Configuration): Promise<MessageAttemptOut>;
    v1MessageAttemptGetHeaders(param: MessageAttemptApiV1MessageAttemptGetHeadersRequest, options?: Configuration): Promise<MessageAttemptHeadersOut>;
    v1MessageAttemptListAttemptedDestinations(param: MessageAttemptApiV1MessageAttemptListAttemptedDestinationsRequest, options?: Configuration): Promise<ListResponseMessageEndpointOut>;
    v1MessageAttemptListAttemptedMessages(param: MessageAttemptApiV1MessageAttemptListAttemptedMessagesRequest, options?: Configuration): Promise<ListResponseEndpointMessageOut>;
    v1MessageAttemptListByEndpoint(param: MessageAttemptApiV1MessageAttemptListByEndpointRequest, options?: Configuration): Promise<ListResponseMessageAttemptOut>;
    v1MessageAttemptListByEndpointDeprecated(param: MessageAttemptApiV1MessageAttemptListByEndpointDeprecatedRequest, options?: Configuration): Promise<ListResponseMessageAttemptEndpointOut>;
    v1MessageAttemptListByMsg(param: MessageAttemptApiV1MessageAttemptListByMsgRequest, options?: Configuration): Promise<ListResponseMessageAttemptOut>;
    v1MessageAttemptListByMsgDeprecated(param: MessageAttemptApiV1MessageAttemptListByMsgDeprecatedRequest, options?: Configuration): Promise<ListResponseMessageAttemptOut>;
    v1MessageAttemptResend(param: MessageAttemptApiV1MessageAttemptResendRequest, options?: Configuration): Promise<void>;
}
import { StatisticsApiRequestFactory, StatisticsApiResponseProcessor } from "../apis/StatisticsApi";
export interface StatisticsApiV1StatisticsAggregateAppStatsRequest {
    appUsageStatsIn: AppUsageStatsIn;
    idempotencyKey?: string;
}
export interface StatisticsApiV1StatisticsAggregateEventTypesRequest {
}
export interface StatisticsApiV1StatsAppAttemptsRequest {
    appId: string;
    startDate?: Date;
    endDate?: Date;
}
export interface StatisticsApiV1StatsEndpointAttemptsRequest {
    appId: string;
    endpointId: string;
    startDate?: Date;
    endDate?: Date;
}
export declare class ObjectStatisticsApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: StatisticsApiRequestFactory, responseProcessor?: StatisticsApiResponseProcessor);
    v1StatisticsAggregateAppStats(param: StatisticsApiV1StatisticsAggregateAppStatsRequest, options?: Configuration): Promise<AppUsageStatsOut>;
    v1StatisticsAggregateEventTypes(param: StatisticsApiV1StatisticsAggregateEventTypesRequest, options?: Configuration): Promise<AggregateEventTypesOut>;
    v1StatsAppAttempts(param: StatisticsApiV1StatsAppAttemptsRequest, options?: Configuration): Promise<AttemptStatisticsResponse>;
    v1StatsEndpointAttempts(param: StatisticsApiV1StatsEndpointAttemptsRequest, options?: Configuration): Promise<AttemptStatisticsResponse>;
}
import { TransformationTemplateApiRequestFactory, TransformationTemplateApiResponseProcessor } from "../apis/TransformationTemplateApi";
export interface TransformationTemplateApiV1TransformationTemplateCreateRequest {
    templateIn: TemplateIn;
    idempotencyKey?: string;
}
export interface TransformationTemplateApiV1TransformationTemplateDeleteRequest {
    transformationTemplateId: string;
}
export interface TransformationTemplateApiV1TransformationTemplateGenerateRequest {
    generateIn: GenerateIn;
    idempotencyKey?: string;
}
export interface TransformationTemplateApiV1TransformationTemplateGetRequest {
    transformationTemplateId: string;
}
export interface TransformationTemplateApiV1TransformationTemplateListRequest {
    limit?: number;
    iterator?: string;
    order?: Ordering;
}
export interface TransformationTemplateApiV1TransformationTemplateOauthDiscordRequest {
    oauthPayloadIn: OauthPayloadIn;
    idempotencyKey?: string;
}
export interface TransformationTemplateApiV1TransformationTemplateOauthSlackRequest {
    oauthPayloadIn: OauthPayloadIn;
    idempotencyKey?: string;
}
export interface TransformationTemplateApiV1TransformationTemplatePatchRequest {
    transformationTemplateId: string;
    templatePatch: TemplatePatch;
}
export interface TransformationTemplateApiV1TransformationTemplateSimulateRequest {
    transformationSimulateIn: TransformationSimulateIn;
    idempotencyKey?: string;
}
export interface TransformationTemplateApiV1TransformationTemplateUpdateRequest {
    transformationTemplateId: string;
    templateUpdate: TemplateUpdate;
}
export declare class ObjectTransformationTemplateApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: TransformationTemplateApiRequestFactory, responseProcessor?: TransformationTemplateApiResponseProcessor);
    v1TransformationTemplateCreate(param: TransformationTemplateApiV1TransformationTemplateCreateRequest, options?: Configuration): Promise<TemplateOut>;
    v1TransformationTemplateDelete(param: TransformationTemplateApiV1TransformationTemplateDeleteRequest, options?: Configuration): Promise<void>;
    v1TransformationTemplateGenerate(param: TransformationTemplateApiV1TransformationTemplateGenerateRequest, options?: Configuration): Promise<GenerateOut>;
    v1TransformationTemplateGet(param: TransformationTemplateApiV1TransformationTemplateGetRequest, options?: Configuration): Promise<TemplateOut>;
    v1TransformationTemplateList(param: TransformationTemplateApiV1TransformationTemplateListRequest, options?: Configuration): Promise<ListResponseTemplateOut>;
    v1TransformationTemplateOauthDiscord(param: TransformationTemplateApiV1TransformationTemplateOauthDiscordRequest, options?: Configuration): Promise<OauthPayloadOut>;
    v1TransformationTemplateOauthSlack(param: TransformationTemplateApiV1TransformationTemplateOauthSlackRequest, options?: Configuration): Promise<OauthPayloadOut>;
    v1TransformationTemplatePatch(param: TransformationTemplateApiV1TransformationTemplatePatchRequest, options?: Configuration): Promise<TemplateOut>;
    v1TransformationTemplateSimulate(param: TransformationTemplateApiV1TransformationTemplateSimulateRequest, options?: Configuration): Promise<TransformationSimulateOut>;
    v1TransformationTemplateUpdate(param: TransformationTemplateApiV1TransformationTemplateUpdateRequest, options?: Configuration): Promise<TemplateOut>;
}
