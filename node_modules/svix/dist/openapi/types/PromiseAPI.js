"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PromiseTransformationTemplateApi = exports.PromiseStatisticsApi = exports.PromiseMessageAttemptApi = exports.PromiseMessageApi = exports.PromiseIntegrationApi = exports.PromiseInboundApi = exports.PromiseHealthApi = exports.PromiseEventTypeApi = exports.PromiseEnvironmentSettingsApi = exports.PromiseEnvironmentApi = exports.PromiseEndpointApi = exports.PromiseBroadcastApi = exports.PromiseBackgroundTasksApi = exports.PromiseAuthenticationApi = exports.PromiseApplicationApi = void 0;
const ObservableAPI_1 = require("./ObservableAPI");
class PromiseApplicationApi {
    constructor(configuration, requestFactory, responseProcessor) {
        this.api = new ObservableAPI_1.ObservableApplicationApi(configuration, requestFactory, responseProcessor);
    }
    getAppUsageStatsApiV1AppStatsUsageGet(since, until, limit, iterator, _options) {
        const result = this.api.getAppUsageStatsApiV1AppStatsUsageGet(since, until, limit, iterator, _options);
        return result.toPromise();
    }
    v1ApplicationCreate(applicationIn, getIfExists, idempotencyKey, _options) {
        const result = this.api.v1ApplicationCreate(applicationIn, getIfExists, idempotencyKey, _options);
        return result.toPromise();
    }
    v1ApplicationDelete(appId, _options) {
        const result = this.api.v1ApplicationDelete(appId, _options);
        return result.toPromise();
    }
    v1ApplicationGet(appId, _options) {
        const result = this.api.v1ApplicationGet(appId, _options);
        return result.toPromise();
    }
    v1ApplicationGetStats(since, until, appId, _options) {
        const result = this.api.v1ApplicationGetStats(since, until, appId, _options);
        return result.toPromise();
    }
    v1ApplicationList(limit, iterator, order, _options) {
        const result = this.api.v1ApplicationList(limit, iterator, order, _options);
        return result.toPromise();
    }
    v1ApplicationPatch(appId, applicationPatch, _options) {
        const result = this.api.v1ApplicationPatch(appId, applicationPatch, _options);
        return result.toPromise();
    }
    v1ApplicationUpdate(appId, applicationIn, _options) {
        const result = this.api.v1ApplicationUpdate(appId, applicationIn, _options);
        return result.toPromise();
    }
}
exports.PromiseApplicationApi = PromiseApplicationApi;
const ObservableAPI_2 = require("./ObservableAPI");
class PromiseAuthenticationApi {
    constructor(configuration, requestFactory, responseProcessor) {
        this.api = new ObservableAPI_2.ObservableAuthenticationApi(configuration, requestFactory, responseProcessor);
    }
    v1AuthenticationAppPortalAccess(appId, appPortalAccessIn, idempotencyKey, _options) {
        const result = this.api.v1AuthenticationAppPortalAccess(appId, appPortalAccessIn, idempotencyKey, _options);
        return result.toPromise();
    }
    v1AuthenticationDashboardAccess(appId, idempotencyKey, _options) {
        const result = this.api.v1AuthenticationDashboardAccess(appId, idempotencyKey, _options);
        return result.toPromise();
    }
    v1AuthenticationExchangeOneTimeToken(oneTimeTokenIn, idempotencyKey, _options) {
        const result = this.api.v1AuthenticationExchangeOneTimeToken(oneTimeTokenIn, idempotencyKey, _options);
        return result.toPromise();
    }
    v1AuthenticationExpireAll(appId, applicationTokenExpireIn, idempotencyKey, _options) {
        const result = this.api.v1AuthenticationExpireAll(appId, applicationTokenExpireIn, idempotencyKey, _options);
        return result.toPromise();
    }
    v1AuthenticationLogout(idempotencyKey, _options) {
        const result = this.api.v1AuthenticationLogout(idempotencyKey, _options);
        return result.toPromise();
    }
}
exports.PromiseAuthenticationApi = PromiseAuthenticationApi;
const ObservableAPI_3 = require("./ObservableAPI");
class PromiseBackgroundTasksApi {
    constructor(configuration, requestFactory, responseProcessor) {
        this.api = new ObservableAPI_3.ObservableBackgroundTasksApi(configuration, requestFactory, responseProcessor);
    }
    getBackgroundTask(taskId, _options) {
        const result = this.api.getBackgroundTask(taskId, _options);
        return result.toPromise();
    }
    listBackgroundTasks(status, task, limit, iterator, order, _options) {
        const result = this.api.listBackgroundTasks(status, task, limit, iterator, order, _options);
        return result.toPromise();
    }
}
exports.PromiseBackgroundTasksApi = PromiseBackgroundTasksApi;
const ObservableAPI_4 = require("./ObservableAPI");
class PromiseBroadcastApi {
    constructor(configuration, requestFactory, responseProcessor) {
        this.api = new ObservableAPI_4.ObservableBroadcastApi(configuration, requestFactory, responseProcessor);
    }
    createBroadcastMessage(messageBroadcastIn, idempotencyKey, _options) {
        const result = this.api.createBroadcastMessage(messageBroadcastIn, idempotencyKey, _options);
        return result.toPromise();
    }
}
exports.PromiseBroadcastApi = PromiseBroadcastApi;
const ObservableAPI_5 = require("./ObservableAPI");
class PromiseEndpointApi {
    constructor(configuration, requestFactory, responseProcessor) {
        this.api = new ObservableAPI_5.ObservableEndpointApi(configuration, requestFactory, responseProcessor);
    }
    v1EndpointCreate(appId, endpointIn, idempotencyKey, _options) {
        const result = this.api.v1EndpointCreate(appId, endpointIn, idempotencyKey, _options);
        return result.toPromise();
    }
    v1EndpointDelete(appId, endpointId, _options) {
        const result = this.api.v1EndpointDelete(appId, endpointId, _options);
        return result.toPromise();
    }
    v1EndpointGet(appId, endpointId, _options) {
        const result = this.api.v1EndpointGet(appId, endpointId, _options);
        return result.toPromise();
    }
    v1EndpointGetHeaders(appId, endpointId, _options) {
        const result = this.api.v1EndpointGetHeaders(appId, endpointId, _options);
        return result.toPromise();
    }
    v1EndpointGetSecret(appId, endpointId, _options) {
        const result = this.api.v1EndpointGetSecret(appId, endpointId, _options);
        return result.toPromise();
    }
    v1EndpointGetStats(appId, endpointId, since, until, _options) {
        const result = this.api.v1EndpointGetStats(appId, endpointId, since, until, _options);
        return result.toPromise();
    }
    v1EndpointList(appId, limit, iterator, order, _options) {
        const result = this.api.v1EndpointList(appId, limit, iterator, order, _options);
        return result.toPromise();
    }
    v1EndpointPatch(appId, endpointId, endpointPatch, _options) {
        const result = this.api.v1EndpointPatch(appId, endpointId, endpointPatch, _options);
        return result.toPromise();
    }
    v1EndpointPatchHeaders(appId, endpointId, endpointHeadersPatchIn, _options) {
        const result = this.api.v1EndpointPatchHeaders(appId, endpointId, endpointHeadersPatchIn, _options);
        return result.toPromise();
    }
    v1EndpointRecover(appId, endpointId, recoverIn, idempotencyKey, _options) {
        const result = this.api.v1EndpointRecover(appId, endpointId, recoverIn, idempotencyKey, _options);
        return result.toPromise();
    }
    v1EndpointReplay(appId, endpointId, replayIn, idempotencyKey, _options) {
        const result = this.api.v1EndpointReplay(appId, endpointId, replayIn, idempotencyKey, _options);
        return result.toPromise();
    }
    v1EndpointRotateSecret(appId, endpointId, endpointSecretRotateIn, idempotencyKey, _options) {
        const result = this.api.v1EndpointRotateSecret(appId, endpointId, endpointSecretRotateIn, idempotencyKey, _options);
        return result.toPromise();
    }
    v1EndpointSendExample(appId, endpointId, eventExampleIn, idempotencyKey, _options) {
        const result = this.api.v1EndpointSendExample(appId, endpointId, eventExampleIn, idempotencyKey, _options);
        return result.toPromise();
    }
    v1EndpointTransformationGet(appId, endpointId, _options) {
        const result = this.api.v1EndpointTransformationGet(appId, endpointId, _options);
        return result.toPromise();
    }
    v1EndpointTransformationPartialUpdate(appId, endpointId, endpointTransformationIn, _options) {
        const result = this.api.v1EndpointTransformationPartialUpdate(appId, endpointId, endpointTransformationIn, _options);
        return result.toPromise();
    }
    v1EndpointTransformationSimulate(appId, endpointId, endpointTransformationSimulateIn, idempotencyKey, _options) {
        const result = this.api.v1EndpointTransformationSimulate(appId, endpointId, endpointTransformationSimulateIn, idempotencyKey, _options);
        return result.toPromise();
    }
    v1EndpointUpdate(appId, endpointId, endpointUpdate, _options) {
        const result = this.api.v1EndpointUpdate(appId, endpointId, endpointUpdate, _options);
        return result.toPromise();
    }
    v1EndpointUpdateHeaders(appId, endpointId, endpointHeadersIn, _options) {
        const result = this.api.v1EndpointUpdateHeaders(appId, endpointId, endpointHeadersIn, _options);
        return result.toPromise();
    }
}
exports.PromiseEndpointApi = PromiseEndpointApi;
const ObservableAPI_6 = require("./ObservableAPI");
class PromiseEnvironmentApi {
    constructor(configuration, requestFactory, responseProcessor) {
        this.api = new ObservableAPI_6.ObservableEnvironmentApi(configuration, requestFactory, responseProcessor);
    }
    v1EnvironmentExport(idempotencyKey, _options) {
        const result = this.api.v1EnvironmentExport(idempotencyKey, _options);
        return result.toPromise();
    }
    v1EnvironmentExportGet(_options) {
        const result = this.api.v1EnvironmentExportGet(_options);
        return result.toPromise();
    }
    v1EnvironmentImport(environmentIn, idempotencyKey, _options) {
        const result = this.api.v1EnvironmentImport(environmentIn, idempotencyKey, _options);
        return result.toPromise();
    }
}
exports.PromiseEnvironmentApi = PromiseEnvironmentApi;
const ObservableAPI_7 = require("./ObservableAPI");
class PromiseEnvironmentSettingsApi {
    constructor(configuration, requestFactory, responseProcessor) {
        this.api = new ObservableAPI_7.ObservableEnvironmentSettingsApi(configuration, requestFactory, responseProcessor);
    }
    v1EnvironmentGetSettings(_options) {
        const result = this.api.v1EnvironmentGetSettings(_options);
        return result.toPromise();
    }
}
exports.PromiseEnvironmentSettingsApi = PromiseEnvironmentSettingsApi;
const ObservableAPI_8 = require("./ObservableAPI");
class PromiseEventTypeApi {
    constructor(configuration, requestFactory, responseProcessor) {
        this.api = new ObservableAPI_8.ObservableEventTypeApi(configuration, requestFactory, responseProcessor);
    }
    v1EventTypeCreate(eventTypeIn, idempotencyKey, _options) {
        const result = this.api.v1EventTypeCreate(eventTypeIn, idempotencyKey, _options);
        return result.toPromise();
    }
    v1EventTypeDelete(eventTypeName, expunge, _options) {
        const result = this.api.v1EventTypeDelete(eventTypeName, expunge, _options);
        return result.toPromise();
    }
    v1EventTypeExportOpenapi(idempotencyKey, _options) {
        const result = this.api.v1EventTypeExportOpenapi(idempotencyKey, _options);
        return result.toPromise();
    }
    v1EventTypeGenerateExample(eventTypeSchemaIn, idempotencyKey, _options) {
        const result = this.api.v1EventTypeGenerateExample(eventTypeSchemaIn, idempotencyKey, _options);
        return result.toPromise();
    }
    v1EventTypeGet(eventTypeName, _options) {
        const result = this.api.v1EventTypeGet(eventTypeName, _options);
        return result.toPromise();
    }
    v1EventTypeGetRetrySchedule(eventTypeName, _options) {
        const result = this.api.v1EventTypeGetRetrySchedule(eventTypeName, _options);
        return result.toPromise();
    }
    v1EventTypeImportOpenapi(eventTypeImportOpenApiIn, idempotencyKey, _options) {
        const result = this.api.v1EventTypeImportOpenapi(eventTypeImportOpenApiIn, idempotencyKey, _options);
        return result.toPromise();
    }
    v1EventTypeList(limit, iterator, order, includeArchived, withContent, _options) {
        const result = this.api.v1EventTypeList(limit, iterator, order, includeArchived, withContent, _options);
        return result.toPromise();
    }
    v1EventTypePatch(eventTypeName, eventTypePatch, _options) {
        const result = this.api.v1EventTypePatch(eventTypeName, eventTypePatch, _options);
        return result.toPromise();
    }
    v1EventTypeUpdate(eventTypeName, eventTypeUpdate, _options) {
        const result = this.api.v1EventTypeUpdate(eventTypeName, eventTypeUpdate, _options);
        return result.toPromise();
    }
    v1EventTypeUpdateRetrySchedule(eventTypeName, retryScheduleInOut, _options) {
        const result = this.api.v1EventTypeUpdateRetrySchedule(eventTypeName, retryScheduleInOut, _options);
        return result.toPromise();
    }
}
exports.PromiseEventTypeApi = PromiseEventTypeApi;
const ObservableAPI_9 = require("./ObservableAPI");
class PromiseHealthApi {
    constructor(configuration, requestFactory, responseProcessor) {
        this.api = new ObservableAPI_9.ObservableHealthApi(configuration, requestFactory, responseProcessor);
    }
    v1HealthGet(_options) {
        const result = this.api.v1HealthGet(_options);
        return result.toPromise();
    }
}
exports.PromiseHealthApi = PromiseHealthApi;
const ObservableAPI_10 = require("./ObservableAPI");
class PromiseInboundApi {
    constructor(configuration, requestFactory, responseProcessor) {
        this.api = new ObservableAPI_10.ObservableInboundApi(configuration, requestFactory, responseProcessor);
    }
    v1InboundMsg(appId, inboundToken, body, eventType, idempotencyKey, _options) {
        const result = this.api.v1InboundMsg(appId, inboundToken, body, eventType, idempotencyKey, _options);
        return result.toPromise();
    }
    v1InboundRotateUrl(appId, idempotencyKey, _options) {
        const result = this.api.v1InboundRotateUrl(appId, idempotencyKey, _options);
        return result.toPromise();
    }
}
exports.PromiseInboundApi = PromiseInboundApi;
const ObservableAPI_11 = require("./ObservableAPI");
class PromiseIntegrationApi {
    constructor(configuration, requestFactory, responseProcessor) {
        this.api = new ObservableAPI_11.ObservableIntegrationApi(configuration, requestFactory, responseProcessor);
    }
    v1IntegrationCreate(appId, integrationIn, idempotencyKey, _options) {
        const result = this.api.v1IntegrationCreate(appId, integrationIn, idempotencyKey, _options);
        return result.toPromise();
    }
    v1IntegrationDelete(appId, integId, _options) {
        const result = this.api.v1IntegrationDelete(appId, integId, _options);
        return result.toPromise();
    }
    v1IntegrationGet(appId, integId, _options) {
        const result = this.api.v1IntegrationGet(appId, integId, _options);
        return result.toPromise();
    }
    v1IntegrationGetKey(appId, integId, _options) {
        const result = this.api.v1IntegrationGetKey(appId, integId, _options);
        return result.toPromise();
    }
    v1IntegrationList(appId, limit, iterator, _options) {
        const result = this.api.v1IntegrationList(appId, limit, iterator, _options);
        return result.toPromise();
    }
    v1IntegrationRotateKey(appId, integId, idempotencyKey, _options) {
        const result = this.api.v1IntegrationRotateKey(appId, integId, idempotencyKey, _options);
        return result.toPromise();
    }
    v1IntegrationUpdate(appId, integId, integrationUpdate, _options) {
        const result = this.api.v1IntegrationUpdate(appId, integId, integrationUpdate, _options);
        return result.toPromise();
    }
}
exports.PromiseIntegrationApi = PromiseIntegrationApi;
const ObservableAPI_12 = require("./ObservableAPI");
class PromiseMessageApi {
    constructor(configuration, requestFactory, responseProcessor) {
        this.api = new ObservableAPI_12.ObservableMessageApi(configuration, requestFactory, responseProcessor);
    }
    createMessageAttemptForEndpoint(appId, endpointId, messageIn, idempotencyKey, _options) {
        const result = this.api.createMessageAttemptForEndpoint(appId, endpointId, messageIn, idempotencyKey, _options);
        return result.toPromise();
    }
    v1MessageCreate(appId, messageIn, withContent, idempotencyKey, _options) {
        const result = this.api.v1MessageCreate(appId, messageIn, withContent, idempotencyKey, _options);
        return result.toPromise();
    }
    v1MessageExpungeContent(appId, msgId, _options) {
        const result = this.api.v1MessageExpungeContent(appId, msgId, _options);
        return result.toPromise();
    }
    v1MessageGet(appId, msgId, withContent, _options) {
        const result = this.api.v1MessageGet(appId, msgId, withContent, _options);
        return result.toPromise();
    }
    v1MessageGetRawPayload(appId, msgId, _options) {
        const result = this.api.v1MessageGetRawPayload(appId, msgId, _options);
        return result.toPromise();
    }
    v1MessageList(appId, limit, iterator, channel, before, after, withContent, tag, eventTypes, _options) {
        const result = this.api.v1MessageList(appId, limit, iterator, channel, before, after, withContent, tag, eventTypes, _options);
        return result.toPromise();
    }
    v1MessageStream(appId, limit, iterator, eventTypes, channels, _options) {
        const result = this.api.v1MessageStream(appId, limit, iterator, eventTypes, channels, _options);
        return result.toPromise();
    }
}
exports.PromiseMessageApi = PromiseMessageApi;
const ObservableAPI_13 = require("./ObservableAPI");
class PromiseMessageAttemptApi {
    constructor(configuration, requestFactory, responseProcessor) {
        this.api = new ObservableAPI_13.ObservableMessageAttemptApi(configuration, requestFactory, responseProcessor);
    }
    v1MessageAttemptExpungeContent(appId, msgId, attemptId, _options) {
        const result = this.api.v1MessageAttemptExpungeContent(appId, msgId, attemptId, _options);
        return result.toPromise();
    }
    v1MessageAttemptGet(appId, msgId, attemptId, _options) {
        const result = this.api.v1MessageAttemptGet(appId, msgId, attemptId, _options);
        return result.toPromise();
    }
    v1MessageAttemptGetHeaders(appId, msgId, attemptId, _options) {
        const result = this.api.v1MessageAttemptGetHeaders(appId, msgId, attemptId, _options);
        return result.toPromise();
    }
    v1MessageAttemptListAttemptedDestinations(appId, msgId, limit, iterator, _options) {
        const result = this.api.v1MessageAttemptListAttemptedDestinations(appId, msgId, limit, iterator, _options);
        return result.toPromise();
    }
    v1MessageAttemptListAttemptedMessages(appId, endpointId, limit, iterator, channel, tag, status, before, after, withContent, eventTypes, _options) {
        const result = this.api.v1MessageAttemptListAttemptedMessages(appId, endpointId, limit, iterator, channel, tag, status, before, after, withContent, eventTypes, _options);
        return result.toPromise();
    }
    v1MessageAttemptListByEndpoint(appId, endpointId, limit, iterator, status, statusCodeClass, channel, tag, before, after, withContent, withMsg, eventTypes, _options) {
        const result = this.api.v1MessageAttemptListByEndpoint(appId, endpointId, limit, iterator, status, statusCodeClass, channel, tag, before, after, withContent, withMsg, eventTypes, _options);
        return result.toPromise();
    }
    v1MessageAttemptListByEndpointDeprecated(appId, msgId, endpointId, limit, iterator, channel, tag, status, before, after, eventTypes, _options) {
        const result = this.api.v1MessageAttemptListByEndpointDeprecated(appId, msgId, endpointId, limit, iterator, channel, tag, status, before, after, eventTypes, _options);
        return result.toPromise();
    }
    v1MessageAttemptListByMsg(appId, msgId, limit, iterator, status, statusCodeClass, channel, tag, endpointId, before, after, withContent, eventTypes, _options) {
        const result = this.api.v1MessageAttemptListByMsg(appId, msgId, limit, iterator, status, statusCodeClass, channel, tag, endpointId, before, after, withContent, eventTypes, _options);
        return result.toPromise();
    }
    v1MessageAttemptListByMsgDeprecated(appId, msgId, limit, iterator, endpointId, channel, tag, status, before, after, statusCodeClass, eventTypes, _options) {
        const result = this.api.v1MessageAttemptListByMsgDeprecated(appId, msgId, limit, iterator, endpointId, channel, tag, status, before, after, statusCodeClass, eventTypes, _options);
        return result.toPromise();
    }
    v1MessageAttemptResend(appId, msgId, endpointId, idempotencyKey, _options) {
        const result = this.api.v1MessageAttemptResend(appId, msgId, endpointId, idempotencyKey, _options);
        return result.toPromise();
    }
}
exports.PromiseMessageAttemptApi = PromiseMessageAttemptApi;
const ObservableAPI_14 = require("./ObservableAPI");
class PromiseStatisticsApi {
    constructor(configuration, requestFactory, responseProcessor) {
        this.api = new ObservableAPI_14.ObservableStatisticsApi(configuration, requestFactory, responseProcessor);
    }
    v1StatisticsAggregateAppStats(appUsageStatsIn, idempotencyKey, _options) {
        const result = this.api.v1StatisticsAggregateAppStats(appUsageStatsIn, idempotencyKey, _options);
        return result.toPromise();
    }
    v1StatisticsAggregateEventTypes(_options) {
        const result = this.api.v1StatisticsAggregateEventTypes(_options);
        return result.toPromise();
    }
    v1StatsAppAttempts(appId, startDate, endDate, _options) {
        const result = this.api.v1StatsAppAttempts(appId, startDate, endDate, _options);
        return result.toPromise();
    }
    v1StatsEndpointAttempts(appId, endpointId, startDate, endDate, _options) {
        const result = this.api.v1StatsEndpointAttempts(appId, endpointId, startDate, endDate, _options);
        return result.toPromise();
    }
}
exports.PromiseStatisticsApi = PromiseStatisticsApi;
const ObservableAPI_15 = require("./ObservableAPI");
class PromiseTransformationTemplateApi {
    constructor(configuration, requestFactory, responseProcessor) {
        this.api = new ObservableAPI_15.ObservableTransformationTemplateApi(configuration, requestFactory, responseProcessor);
    }
    v1TransformationTemplateCreate(templateIn, idempotencyKey, _options) {
        const result = this.api.v1TransformationTemplateCreate(templateIn, idempotencyKey, _options);
        return result.toPromise();
    }
    v1TransformationTemplateDelete(transformationTemplateId, _options) {
        const result = this.api.v1TransformationTemplateDelete(transformationTemplateId, _options);
        return result.toPromise();
    }
    v1TransformationTemplateGenerate(generateIn, idempotencyKey, _options) {
        const result = this.api.v1TransformationTemplateGenerate(generateIn, idempotencyKey, _options);
        return result.toPromise();
    }
    v1TransformationTemplateGet(transformationTemplateId, _options) {
        const result = this.api.v1TransformationTemplateGet(transformationTemplateId, _options);
        return result.toPromise();
    }
    v1TransformationTemplateList(limit, iterator, order, _options) {
        const result = this.api.v1TransformationTemplateList(limit, iterator, order, _options);
        return result.toPromise();
    }
    v1TransformationTemplateOauthDiscord(oauthPayloadIn, idempotencyKey, _options) {
        const result = this.api.v1TransformationTemplateOauthDiscord(oauthPayloadIn, idempotencyKey, _options);
        return result.toPromise();
    }
    v1TransformationTemplateOauthSlack(oauthPayloadIn, idempotencyKey, _options) {
        const result = this.api.v1TransformationTemplateOauthSlack(oauthPayloadIn, idempotencyKey, _options);
        return result.toPromise();
    }
    v1TransformationTemplatePatch(transformationTemplateId, templatePatch, _options) {
        const result = this.api.v1TransformationTemplatePatch(transformationTemplateId, templatePatch, _options);
        return result.toPromise();
    }
    v1TransformationTemplateSimulate(transformationSimulateIn, idempotencyKey, _options) {
        const result = this.api.v1TransformationTemplateSimulate(transformationSimulateIn, idempotencyKey, _options);
        return result.toPromise();
    }
    v1TransformationTemplateUpdate(transformationTemplateId, templateUpdate, _options) {
        const result = this.api.v1TransformationTemplateUpdate(transformationTemplateId, templateUpdate, _options);
        return result.toPromise();
    }
}
exports.PromiseTransformationTemplateApi = PromiseTransformationTemplateApi;
//# sourceMappingURL=PromiseAPI.js.map