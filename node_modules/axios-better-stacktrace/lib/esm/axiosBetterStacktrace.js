var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var patchedSym = Symbol('axiosBetterStacktrace.patched');
// toString used instead of instanceOf for detecting error type to prevent problem mentioned in issue #5
var isError = function (error) {
    return error instanceof Error || Object.prototype.toString.call(error) === '[object Error]';
};
var isAxiosError = function (error) {
    return isError(error) && error.isAxiosError;
};
var axiosMethods = [
    'request',
    'get',
    'delete',
    'head',
    'options',
    'post',
    'put',
    'patch',
];
var axiosBetterStacktrace = function (axiosInstance, opts) {
    if (opts === void 0) { opts = {}; }
    var _a = opts.errorMsg, errorMsg = _a === void 0 ? 'Axios Better Stacktrace' : _a;
    // do nothing if input does not look like an axios instance
    if (!axiosInstance || !axiosMethods.some(function (method) { return axiosInstance.hasOwnProperty(method); })) {
        return;
    }
    // avoid potential memory leaks if axios instance already patched
    if (axiosInstance[patchedSym]) {
        return;
    }
    var originalHandlers = {
        request: axiosInstance['request'],
        get: axiosInstance['get'],
        delete: axiosInstance['delete'],
        head: axiosInstance['head'],
        options: axiosInstance['options'],
        post: axiosInstance['post'],
        put: axiosInstance['put'],
        patch: axiosInstance['patch'],
    };
    // enhance original response error with a topmostError stack trace
    var responseErrorInterceptorId = axiosInstance.interceptors.response.use(function (response) {
        if (response && response.config && isError(response.config.topmostError)) {
            // remove topmostError to not clutter config and expose it to other interceptors down the chain
            delete response.config.topmostError;
        }
        return response;
    }, function (error) {
        if (isAxiosError(error) && error.config && isError(error.config.topmostError)) {
            error.originalStack = error.stack;
            error.stack = "".concat(error.stack, "\n").concat(error.config.topmostError.stack);
            delete error.config.topmostError;
        }
        throw error;
    });
    axiosMethods.forEach(function (method) {
        if (method in axiosInstance) {
            switch (method) {
                case 'request': {
                    var originalHandler_1 = axiosInstance[method];
                    axiosInstance[method] = function axiosBetterStacktraceMethodProxy(config) {
                        return originalHandler_1(__assign(__assign({}, (config || {})), { topmostError: new Error(errorMsg) }));
                    };
                    break;
                }
                case 'get':
                case 'delete':
                case 'head':
                case 'options': {
                    var originalHandler_2 = axiosInstance[method];
                    axiosInstance[method] = function axiosBetterStacktraceMethodProxy(url, config) {
                        return originalHandler_2(url, __assign(__assign({}, (config || {})), { topmostError: new Error(errorMsg) }));
                    };
                    break;
                }
                case 'post':
                case 'put':
                case 'patch': {
                    var originalHandler_3 = axiosInstance[method];
                    axiosInstance[method] = function axiosBetterStacktraceMethodProxy(url, data, config) {
                        return originalHandler_3(url, data, __assign(__assign({}, (config || {})), { topmostError: new Error(errorMsg) }));
                    };
                    break;
                }
            }
            if (!axiosInstance[patchedSym]) {
                axiosInstance[patchedSym] = true;
            }
        }
    });
    // ensure consumer of the plugin can restore original handlers and remove custom interceptor
    return function () {
        axiosInstance.interceptors.response.eject(responseErrorInterceptorId);
        Object.assign(axiosInstance, originalHandlers);
    };
};
export default axiosBetterStacktrace;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXhpb3NCZXR0ZXJTdGFja3RyYWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2F4aW9zQmV0dGVyU3RhY2t0cmFjZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUVBLElBQU0sVUFBVSxHQUFHLE1BQU0sQ0FBQywrQkFBK0IsQ0FBQyxDQUFDO0FBZ0IzRCx3R0FBd0c7QUFDeEcsSUFBTSxPQUFPLEdBQUcsVUFBQyxLQUFjO0lBQzdCLE9BQUEsS0FBSyxZQUFZLEtBQUssSUFBSSxNQUFNLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssZ0JBQWdCO0FBQXBGLENBQW9GLENBQUM7QUFFdkYsSUFBTSxZQUFZLEdBQUcsVUFBQyxLQUFjO0lBQ2xDLE9BQUEsT0FBTyxDQUFDLEtBQUssQ0FBQyxJQUFLLEtBQW9CLENBQUMsWUFBWTtBQUFwRCxDQUFvRCxDQUFDO0FBRXZELElBQU0sWUFBWSxHQUFHO0lBQ25CLFNBQVM7SUFDVCxLQUFLO0lBQ0wsUUFBUTtJQUNSLE1BQU07SUFDTixTQUFTO0lBQ1QsTUFBTTtJQUNOLEtBQUs7SUFDTCxPQUFPO0NBQ0MsQ0FBQztBQUVYLElBQU0scUJBQXFCLEdBQUcsVUFBQyxhQUE2QixFQUFFLElBQWdDO0lBQWhDLHFCQUFBLEVBQUEsU0FBZ0M7SUFDcEYsSUFBQSxLQUF5QyxJQUFJLFNBQVQsRUFBcEMsUUFBUSxtQkFBRyx5QkFBeUIsS0FBQSxDQUFVO0lBRXRELDJEQUEyRDtJQUMzRCxJQUFJLENBQUMsYUFBYSxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxVQUFDLE1BQU0sSUFBSyxPQUFBLGFBQWEsQ0FBQyxjQUFjLENBQUMsTUFBTSxDQUFDLEVBQXBDLENBQW9DLENBQUMsRUFBRTtRQUMxRixPQUFPO0tBQ1I7SUFFRCxpRUFBaUU7SUFDakUsSUFBSSxhQUFhLENBQUMsVUFBVSxDQUFDLEVBQUU7UUFDN0IsT0FBTztL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